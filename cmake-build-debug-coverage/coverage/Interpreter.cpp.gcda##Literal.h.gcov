        -:    0:Source:D:/Project Workspace/Year3/VIS/include/Literal.h
        -:    0:Graph:D:\Project Workspace\Year3\VIS\cmake-build-debug-coverage\tests\CMakeFiles\vis_tests.dir\__\src\Interpreter.cpp.gcno
        -:    0:Data:D:\Project Workspace\Year3\VIS\cmake-build-debug-coverage\tests\CMakeFiles\vis_tests.dir\__\src\Interpreter.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by joshu on 05/03/2025.
        -:    3://
        -:    4:
        -:    5:#ifndef LITERAL_H
        -:    6:#define LITERAL_H
        -:    7:
        -:    8:#include <map>
        -:    9:#include <memory>
        -:   10:#include "Node.h"
        -:   11:# include "Context.h"
        -:   12:class Context; // decleration to allow use of context without circular loop
        -:   13:
        -:   14:class Literal {
        -:   15:public:
        -:   16:    Literal();
        -:   17:    void setContext(Context* context);
        -:   18:    [[nodiscard]] Context* getContext() const;
        -:   19:    void setPosition(const std::map<std::string, std::string> &pos);
        -:   20:    [[nodiscard]] std::map<std::string, std::string> getPosition() const;
        -:   21:
        -:   22:    [[nodiscard]] virtual std::unique_ptr<Literal> add(const Literal& other) const = 0;
        -:   23:    [[nodiscard]] virtual std::unique_ptr<Literal> subtract(const Literal& other) const = 0;
        -:   24:    [[nodiscard]] virtual std::unique_ptr<Literal> multiply(const Literal &other) const = 0;
        -:   25:    [[nodiscard]] virtual std::unique_ptr<Literal> divide(const Literal& other) const = 0;
        -:   26:    [[nodiscard]] virtual std::unique_ptr<Literal> modulo(const Literal& other) const = 0;
        -:   27:    [[nodiscard]] virtual std::unique_ptr<Literal> compareTE(const Literal& other) const = 0;
        -:   28:    [[nodiscard]] virtual std::unique_ptr<Literal> compareNE(const Literal& other) const = 0;
        -:   29:    [[nodiscard]] virtual std::unique_ptr<Literal> compareLT(const Literal& other) const;
        -:   30:    [[nodiscard]] virtual std::unique_ptr<Literal> compareLTE(const Literal& other) const;
        -:   31:    [[nodiscard]] virtual std::unique_ptr<Literal> compareGT(const Literal& other) const;
        -:   32:    [[nodiscard]] virtual std::unique_ptr<Literal> compareGTE(const Literal& other) const;
        -:   33:    [[nodiscard]] virtual std::unique_ptr<Literal> andWith(const Literal& other) const;
        -:   34:    [[nodiscard]] virtual std::unique_ptr<Literal> orWith(const Literal& other) const;
        -:   35:    [[nodiscard]] virtual std::unique_ptr<Literal> notSelf() const;
        -:   36:
        -:   37:    [[nodiscard]] virtual double getNumberValue() const = 0;
        -:   38:    [[nodiscard]] virtual bool getBoolValue() const = 0;
        -:   39:    [[nodiscard]] virtual std::string getStringValue() const = 0;
        -:   40:    [[nodiscard]] virtual std::unique_ptr<Literal> clone() const = 0;
        -:   41:    virtual void printLiteral(std::ostream& os, int tabCount) const;
        -:   42:    friend std::ostream& operator<<(std::ostream& os, const Literal &literal);
function _ZN7LiteralD2Ev called 0 returned 0% blocks executed 0%
    #####:   43:    virtual ~Literal() = default;
    %%%%%:   43-block  0
call    0 never executed
        -:   44:protected:
        -:   45:    std::unique_ptr<Literal> setLiteral(std::unique_ptr<Literal> literal) const;
        -:   46:    std::map<std::string, std::string> position;
        -:   47:    Context* context;
        -:   48:};
        -:   49:
        -:   50:
        -:   51:class BoolLiteral final : public Literal {
        -:   52:public:
        -:   53:    explicit BoolLiteral(bool value);
        -:   54:
        -:   55:    [[nodiscard]] std::unique_ptr<Literal> add(const Literal& other) const override;
        -:   56:    [[nodiscard]] std::unique_ptr<Literal> subtract(const Literal& other) const override;
        -:   57:    [[nodiscard]] std::unique_ptr<Literal> multiply(const Literal &other) const override;
        -:   58:    [[nodiscard]] std::unique_ptr<Literal> divide(const Literal& other) const override;
        -:   59:    [[nodiscard]] std::unique_ptr<Literal> modulo(const Literal& other) const override;
        -:   60:    [[nodiscard]] std::unique_ptr<Literal> compareTE(const Literal& other) const override;
        -:   61:    [[nodiscard]] std::unique_ptr<Literal> compareNE(const Literal& other) const override;
        -:   62:
        -:   63:    [[nodiscard]] double getNumberValue() const override;
        -:   64:    [[nodiscard]] bool getBoolValue() const override;
        -:   65:    [[nodiscard]] std::string getStringValue() const override;
        -:   66:    [[nodiscard]] std::unique_ptr<Literal> clone() const override;
        -:   67:    void printLiteral(std::ostream &os, int tabCount) const override;
        -:   68:private:
        -:   69:    bool value;
        -:   70:
        -:   71:};
        -:   72:
        -:   73:
        -:   74:class StringLiteral final : public Literal {
        -:   75:public:
        -:   76:    explicit StringLiteral(const std::string &value);
        -:   77:
        -:   78:    [[nodiscard]] std::unique_ptr<Literal> add(const Literal& other) const override;
        -:   79:    [[nodiscard]] std::unique_ptr<Literal> subtract(const Literal& other) const override;
        -:   80:    [[nodiscard]] std::unique_ptr<Literal> multiply(const Literal &other) const override;
        -:   81:    [[nodiscard]] std::unique_ptr<Literal> divide(const Literal& other) const override;
        -:   82:    [[nodiscard]] std::unique_ptr<Literal> modulo(const Literal& other) const override;
        -:   83:    [[nodiscard]] std::unique_ptr<Literal> compareTE(const Literal& other) const override;
        -:   84:    [[nodiscard]] std::unique_ptr<Literal> compareNE(const Literal& other) const override;
        -:   85:
        -:   86:    [[nodiscard]] double getNumberValue() const override;
        -:   87:    [[nodiscard]] bool getBoolValue() const override;
        -:   88:    [[nodiscard]] std::string getStringValue() const override;
        -:   89:    [[nodiscard]] std::unique_ptr<Literal> clone() const override;
        -:   90:    void printLiteral(std::ostream &os, int tabCount) const override;
        -:   91:private:
        -:   92:    std::string value;
        -:   93:};
        -:   94:
        -:   95:
        -:   96:class NumberLiteral : public Literal{
        -:   97:public:
        -:   98:    NumberLiteral();
        -:   99:
        -:  100:    [[nodiscard]] std::unique_ptr<Literal> add(const Literal& other) const override;
        -:  101:    [[nodiscard]] std::unique_ptr<Literal> subtract(const Literal& other) const override;
        -:  102:    [[nodiscard]] std::unique_ptr<Literal> multiply(const Literal &other) const override;
        -:  103:    [[nodiscard]] std::unique_ptr<Literal> divide(const Literal& other) const override;
        -:  104:    [[nodiscard]] std::unique_ptr<Literal> modulo(const Literal& other) const override;
        -:  105:    [[nodiscard]] std::unique_ptr<Literal> compareTE(const Literal& other) const override;
        -:  106:    [[nodiscard]] std::unique_ptr<Literal> compareNE(const Literal& other) const override;
        -:  107:
        -:  108:    [[nodiscard]] double getNumberValue() const override = 0;
        -:  109:    [[nodiscard]] bool getBoolValue() const override = 0;
        -:  110:    [[nodiscard]] std::string getStringValue() const override = 0;
        -:  111:    [[nodiscard]] std::unique_ptr<Literal> clone() const override = 0;
        -:  112:    void printLiteral(std::ostream &os, int tabCount) const override;
        -:  113:private:
        -:  114:    static std::unique_ptr<NumberLiteral> makeResultLiteral(float value);
        -:  115:};
        -:  116:
        -:  117:
        -:  118:class IntLiteral final : public NumberLiteral{
        -:  119:public:
        -:  120:    explicit IntLiteral(int value);
        -:  121:    [[nodiscard]] double getNumberValue() const override;
        -:  122:    [[nodiscard]] bool getBoolValue() const override;
        -:  123:    [[nodiscard]] std::string getStringValue() const override;
        -:  124:    [[nodiscard]] std::unique_ptr<Literal> clone() const override;
        -:  125:    void printLiteral(std::ostream &os, int tabCount) const override;
        -:  126:private:
        -:  127:    int value;
        -:  128:};
        -:  129:
        -:  130:
        -:  131:class FloatLiteral final : public NumberLiteral{
        -:  132:public:
        -:  133:    explicit FloatLiteral(float value);
        -:  134:    [[nodiscard]] double getNumberValue() const override;
        -:  135:    [[nodiscard]] bool getBoolValue() const override;
        -:  136:    [[nodiscard]] std::string getStringValue() const override;
        -:  137:    [[nodiscard]] std::unique_ptr<Literal> clone() const override;
        -:  138:    void printLiteral(std::ostream &os, int tabCount) const override;
        -:  139:private:
        -:  140:    float value;
        -:  141:};
        -:  142:
        -:  143:
        -:  144:class FunctionLiteral final : public Literal {
        -:  145:public:
        -:  146:    explicit FunctionLiteral(
        -:  147:        std::string name,
        -:  148:        std::vector<Token> args,
        -:  149:        std::vector<std::unique_ptr<Node>> body,
        -:  150:        std::unique_ptr<Context> scope
        -:  151:        );
        -:  152:    [[nodiscard]] std::string getName() const;
        -:  153:    [[nodiscard]] const std::vector<Token>& getArgs() const;
        -:  154:    [[nodiscard]] const std::vector<std::unique_ptr<Node>>& getBody() const;
        -:  155:    [[nodiscard]] std::unique_ptr<Literal> add(const Literal &other) const override;
        -:  156:    [[nodiscard]] std::unique_ptr<Literal> subtract(const Literal &other) const override;
        -:  157:    [[nodiscard]] std::unique_ptr<Literal> multiply(const Literal &other) const override;
        -:  158:    [[nodiscard]] std::unique_ptr<Literal> divide(const Literal &other) const override;
        -:  159:    [[nodiscard]] std::unique_ptr<Literal> modulo(const Literal &other) const override;
        -:  160:    [[nodiscard]] std::unique_ptr<Literal> compareTE(const Literal &other) const override;
        -:  161:    [[nodiscard]] std::unique_ptr<Literal> compareNE(const Literal &other) const override;
        -:  162:    [[nodiscard]] double getNumberValue() const override;
        -:  163:    [[nodiscard]] bool getBoolValue() const override;
        -:  164:    [[nodiscard]] std::string getStringValue() const override;
        -:  165:    [[nodiscard]] const std::unique_ptr<Context>& getScopeContext() const;
        -:  166:    [[nodiscard]] std::unique_ptr<Literal> clone() const override;
        -:  167:    void printLiteral(std::ostream &os, int tabCount) const override;
        -:  168:private:
        -:  169:    std::string name;
        -:  170:    std::vector<Token> argTokens;
        -:  171:    std::vector<std::unique_ptr<Node>> bodyNodes;
        -:  172:    std::unique_ptr<Context> scopeContext;
        -:  173:};
        -:  174:#endif //LITERAL_H
