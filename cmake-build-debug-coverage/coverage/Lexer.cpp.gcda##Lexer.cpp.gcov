        -:    0:Source:D:/Project Workspace/Year3/VIS/src/Lexer.cpp
        -:    0:Graph:D:\Project Workspace\Year3\VIS\cmake-build-debug-coverage\tests\CMakeFiles\vis_tests.dir\__\src\Lexer.cpp.gcno
        -:    0:Data:D:\Project Workspace\Year3\VIS\cmake-build-debug-coverage\tests\CMakeFiles\vis_tests.dir\__\src\Lexer.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "Lexer.h"
        -:    2:#include <iostream>
        -:    3:#include "Error.h"
        -:    4:
        -:    5:const std::unordered_set<std::string> Lexer::LIBWORDS = {"out"};
        -:    6:const std::unordered_set<std::string> Lexer::KEYWORDS = {
        -:    7:    "var","and","or", "not", "if", "else", "while", "for", "func", "return"
        -:    8:};
        -:    9:const std::string Lexer::DIGITS = "0123456789";
        -:   10:const std::string Lexer::LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_";
        -:   11:const std::string Lexer::LETTERS_DIGITS = Lexer::LETTERS + Lexer::DIGITS;
        -:   12:const std::string Lexer::OPERATORS = "+-*/%";
        -:   13:const char Lexer::COMMENT = '~';
        -:   14:
function _ZN5LexerC2ER15PositionHandler called 205 returned 100% blocks executed 100%
      205:   15:Lexer::Lexer(PositionHandler& positionHandler) : positionHandler(positionHandler) {}
        -:   16:
function _ZNK5Lexer17makeOperatorTokenEc called 42 returned 100% blocks executed 42%
       42:   17:Token Lexer::makeOperatorToken(const char character) const {
       42:   18:    const std::map<std::string, std::string> pos = positionHandler.getPos();
       42:   18-block  0
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
       42:   19:    switch(character) {
       42:   19-block  0
branch  0 taken 3
branch  1 taken 36
branch  2 taken 1
branch  3 taken 1
branch  4 taken 1
branch  5 taken 0
        3:   20:        case '+':
        3:   21:            if (positionHandler.peek() == '+') {
        3:   21-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   21-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 2
        1:   22:                positionHandler.advanceCharacter();
        1:   22-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   23:                return Token(TokenType::INCREMENT, pos);
        1:   23-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   23-block  1
call    4 returned 1
    $$$$$:   23-block  2
call    5 never executed
    $$$$$:   23-block  3
    $$$$$:   23-block  4
        -:   24:            }
        2:   25:            return Token(TokenType::PLUS, pos);
        2:   25-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   25-block  1
call    4 returned 2
    $$$$$:   25-block  2
call    5 never executed
    $$$$$:   25-block  3
    $$$$$:   25-block  4
       36:   26:        case '-':
       36:   27:            if (positionHandler.peek() == '-') {
       36:   27-block  0
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
       36:   27-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 35
        1:   28:                positionHandler.advanceCharacter();
        1:   28-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   29:                return Token(TokenType::DECREMENT, pos);
        1:   29-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   29-block  1
call    4 returned 1
    $$$$$:   29-block  2
call    5 never executed
    $$$$$:   29-block  3
    $$$$$:   29-block  4
        -:   30:            }
       35:   31:            return Token(TokenType::MINUS, pos);
       35:   31-block  0
call    0 returned 35
call    1 returned 35
branch  2 taken 35 (fallthrough)
branch  3 taken 0 (throw)
       35:   31-block  1
call    4 returned 35
    $$$$$:   31-block  2
call    5 never executed
    $$$$$:   31-block  3
    $$$$$:   31-block  4
        1:   32:        case '*': return Token(TokenType::MUL, pos);
        1:   32-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   32-block  1
call    4 returned 1
    $$$$$:   32-block  2
call    5 never executed
    $$$$$:   32-block  3
    $$$$$:   32-block  4
        1:   33:        case '/': return Token(TokenType::DIV, pos);
        1:   33-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   33-block  1
call    4 returned 1
    $$$$$:   33-block  2
call    5 never executed
    $$$$$:   33-block  3
    $$$$$:   33-block  4
        1:   34:        case '%': return Token(TokenType::MOD, pos);
        1:   34-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   34-block  1
call    4 returned 1
    $$$$$:   34-block  2
call    5 never executed
    $$$$$:   34-block  3
    $$$$$:   34-block  4
    #####:   35:        default: throw LexerError("operator token cant be created no case defined for character >>>" +
    %%%%%:   35-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$:   35-block  1
call    4 never executed
    $$$$$:   35-block  2
    #####:   36:                                            std::string(1, character) + "<<<");
    %%%%%:   36-block  0
call    0 never executed
    %%%%%:   36-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   36-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:   36-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:   36-block  4
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:   36-block  5
call   13 never executed
    $$$$$:   36-block  6
call   14 never executed
    $$$$$:   36-block  7
    $$$$$:   36-block  8
    $$$$$:   36-block  9
    $$$$$:   36-block 10
call   15 never executed
        -:   37:    }
       42:   38:}
       42:   38-block  0
call    0 returned 42
    $$$$$:   38-block  1
call    1 never executed
function _ZNK5Lexer15makeNumberTokenEc called 72 returned 53% blocks executed 60%
       72:   39:Token Lexer::makeNumberToken (char character) const{// loop through line until next char isnt digit
       72:   40:    const std::map<std::string, std::string> pos = positionHandler.getPos();
       72:   40-block  0
call    0 returned 72
branch  1 taken 72 (fallthrough)
branch  2 taken 0 (throw)
       72:   41:    bool dotFlag = false;
       72:   42:    std::string stringNum;
       72:   42-block  0
call    0 returned 72
       72:   43:    stringNum += character;
call    0 returned 72
branch  1 taken 72 (fallthrough)
branch  2 taken 0 (throw)
       72:   44:    char peekChar = this->positionHandler.peek();
       72:   44-block  0
call    0 returned 72
branch  1 taken 72 (fallthrough)
branch  2 taken 0 (throw)
      146:   45:    while (peekChar != '\0' and (Lexer::DIGITS.find(peekChar) != std::string::npos or peekChar == '.')){
       72:   45-block  0
      146:   45-block  1
branch  0 taken 142 (fallthrough)
branch  1 taken 4
      142:   45-block  2
call    2 returned 142
branch  3 taken 103 (fallthrough)
branch  4 taken 39
      103:   45-block  3
branch  5 taken 69 (fallthrough)
branch  6 taken 34
      108:   45-block  4
       38:   45-block  5
      146:   45-block  6
branch  7 taken 108
branch  8 taken 38 (fallthrough)
      108:   46:        character = this->positionHandler.advanceCharacter();
      108:   46-block  0
call    0 returned 108
branch  1 taken 108 (fallthrough)
branch  2 taken 0 (throw)
      108:   47:        if (character == '.') {
      108:   47-block  0
branch  0 taken 69 (fallthrough)
branch  1 taken 39
       69:   48:            std::map<std::string, std::string> position = positionHandler.getPos();
       69:   48-block  0
call    0 returned 69
branch  1 taken 69 (fallthrough)
branch  2 taken 0 (throw)
       69:   49:            if (!dotFlag) {dotFlag = true;}
       69:   49-block  0
branch  0 taken 35 (fallthrough)
branch  1 taken 34
       35:   49-block  1
        -:   50:            else {
       34:   51:                const std::string word = PositionHandler::getWordFromLine(position);
       34:   51-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       68:   52:                throw IllegalCharError("\nIllegal Number >>> " + word + " <<<\n"+
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:   52-block  0
call    3 returned 34
branch  4 taken 34 (fallthrough)
branch  5 taken 0 (throw)
       34:   52-block  1
call    6 returned 34
branch  7 taken 34 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 34
call   10 returned 34
call   11 returned 34
    $$$$$:   52-block  2
call   12 never executed
    $$$$$:   52-block  3
call   13 never executed
    $$$$$:   52-block  4
call   14 never executed
    $$$$$:   52-block  5
    $$$$$:   52-block  6
    $$$$$:   52-block  7
      136:   53:                    "on line: " + std::to_string(stoi(position["line"]) + 1) +
       34:   53-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:   53-block  1
call    3 returned 34
branch  4 taken 34 (fallthrough)
branch  5 taken 0 (throw)
       34:   53-block  2
call    6 returned 34
branch  7 taken 34 (fallthrough)
branch  8 taken 0 (throw)
       34:   53-block  3
call    9 returned 34
       34:   53-block  4
call   10 returned 34
branch 11 taken 34 (fallthrough)
branch 12 taken 0 (throw)
       34:   53-block  5
call   13 returned 34
branch 14 taken 34 (fallthrough)
branch 15 taken 0 (throw)
call   16 returned 34
call   17 returned 34
call   18 returned 34
call   19 returned 34
    $$$$$:   53-block  6
call   20 never executed
    $$$$$:   53-block  7
call   21 never executed
    $$$$$:   53-block  8
call   22 never executed
    $$$$$:   53-block  9
call   23 never executed
    $$$$$:   53-block 10
    $$$$$:   53-block 11
    $$$$$:   53-block 12
    $$$$$:   53-block 13
    $$$$$:   53-block 14
      136:   54:                    " of file: " + position["name"] + "\n" +
       34:   54-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:   54-block  1
call    3 returned 34
branch  4 taken 34 (fallthrough)
branch  5 taken 0 (throw)
       34:   54-block  2
       34:   54-block  3
call    6 returned 34
branch  7 taken 34 (fallthrough)
branch  8 taken 0 (throw)
       34:   54-block  4
call    9 returned 34
branch 10 taken 34 (fallthrough)
branch 11 taken 0 (throw)
       34:   54-block  5
call   12 returned 34
branch 13 taken 34 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 34
call   16 returned 34
call   17 returned 34
call   18 returned 34
    $$$$$:   54-block  6
call   19 never executed
    $$$$$:   54-block  7
call   20 never executed
    $$$$$:   54-block  8
call   21 never executed
    $$$$$:   54-block  9
call   22 never executed
    $$$$$:   54-block 10
    $$$$$:   54-block 11
    $$$$$:   54-block 12
    $$$$$:   54-block 13
    $$$$$:   54-block 14
      170:   55:                    "{" + position["lineText"] + "}");
       34:   55-block  0
call    0 returned 34
       34:   55-block  1
call    1 returned 34
branch  2 taken 34 (fallthrough)
branch  3 taken 0 (throw)
       34:   55-block  2
call    4 returned 34
branch  5 taken 34 (fallthrough)
branch  6 taken 0 (throw)
       34:   55-block  3
       34:   55-block  4
call    7 returned 34
branch  8 taken 34 (fallthrough)
branch  9 taken 0 (throw)
       34:   55-block  5
call   10 returned 34
branch 11 taken 34 (fallthrough)
branch 12 taken 0 (throw)
       34:   55-block  6
call   13 returned 34
branch 14 taken 34 (fallthrough)
branch 15 taken 0 (throw)
       34:   55-block  7
call   16 returned 34
call   17 returned 34
call   18 returned 34
call   19 returned 34
    $$$$$:   55-block  8
call   20 never executed
    $$$$$:   55-block  9
call   21 never executed
    $$$$$:   55-block 10
call   22 never executed
    $$$$$:   55-block 11
    $$$$$:   55-block 12
    $$$$$:   55-block 13
    $$$$$:   55-block 14
    $$$$$:   55-block 15
call   23 never executed
       34:   56:            }
       34:   56-block  0
call    0 returned 34
       69:   57:        }
       35:   57-block  0
call    0 returned 35
       34:   57-block  1
call    1 returned 34
       74:   58:        stringNum += character;
       74:   58-block  0
call    0 returned 74
branch  1 taken 74 (fallthrough)
branch  2 taken 0 (throw)
       74:   59:        peekChar = this->positionHandler.peek();
       74:   59-block  0
call    0 returned 74
branch  1 taken 74 (fallthrough)
branch  2 taken 0 (throw)
       74:   59-block  1
        -:   60:    }
       38:   61:    if (dotFlag) {
       38:   61-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 37
        1:   62:        return Token(TokenType::FLOAT, pos, std::stof(stringNum));
        1:   62-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   62-block  1
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   62-block  2
call    7 returned 1
    $$$$$:   62-block  3
call    8 never executed
    $$$$$:   62-block  4
    $$$$$:   62-block  5
        -:   63:    }
        -:   64:    else {
       37:   65:        return Token(TokenType::INT, pos, std::stoi(stringNum));
       37:   65-block  0
call    0 returned 37
branch  1 taken 37 (fallthrough)
branch  2 taken 0 (throw)
       37:   65-block  1
call    3 returned 37
call    4 returned 37
branch  5 taken 37 (fallthrough)
branch  6 taken 0 (throw)
       37:   65-block  2
call    7 returned 37
    $$$$$:   65-block  3
call    8 never executed
    $$$$$:   65-block  4
    $$$$$:   65-block  5
        -:   66:    }
      106:   67:}
       38:   67-block  0
call    0 returned 38
call    1 returned 38
       34:   67-block  1
call    2 returned 34
       34:   67-block  2
call    3 returned 34
function _ZNK5Lexer15makeStringTokenEc called 35 returned 3% blocks executed 55%
       35:   68:Token Lexer::makeStringToken (char character) const{
       35:   69:    const std::map<std::string, std::string> pos = positionHandler.getPos();
       35:   69-block  0
call    0 returned 35
branch  1 taken 35 (fallthrough)
branch  2 taken 0 (throw)
       35:   70:    std::string valueString = "";
       35:   70-block  0
call    0 returned 35
branch  1 taken 35 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:   70-block  1
       35:   71:    character = positionHandler.advanceCharacter();
call    0 returned 35
branch  1 taken 35 (fallthrough)
branch  2 taken 0 (throw)
      380:   72:    while (character != '\"') {
       35:   72-block  0
      380:   72-block  1
branch  0 taken 379
branch  1 taken 1 (fallthrough)
      379:   73:        if (character == '\0') {
      379:   73-block  0
branch  0 taken 34 (fallthrough)
branch  1 taken 345
        -:   74:            throw InvalidSyntaxError(
       68:   75:                "\nError in file: " + pos.at("name")
       34:   75-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:   75-block  1
call    3 returned 34
branch  4 taken 34 (fallthrough)
branch  5 taken 0 (throw)
       34:   75-block  2
call    6 returned 34
branch  7 taken 34 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 34
call   10 returned 34
    $$$$$:   75-block  3
call   11 never executed
    $$$$$:   75-block  4
call   12 never executed
    $$$$$:   75-block  5
    $$$$$:   75-block  6
    $$$$$:   75-block  7
      136:   76:                + "\n>>> line: " + std::to_string(stoi(pos.at("line")) + 1)
       34:   76-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:   76-block  1
call    3 returned 34
branch  4 taken 34 (fallthrough)
branch  5 taken 0 (throw)
       34:   76-block  2
call    6 returned 34
branch  7 taken 34 (fallthrough)
branch  8 taken 0 (throw)
       34:   76-block  3
call    9 returned 34
       34:   76-block  4
call   10 returned 34
branch 11 taken 34 (fallthrough)
branch 12 taken 0 (throw)
       34:   76-block  5
call   13 returned 34
branch 14 taken 34 (fallthrough)
branch 15 taken 0 (throw)
call   16 returned 34
call   17 returned 34
call   18 returned 34
call   19 returned 34
    $$$$$:   76-block  6
call   20 never executed
    $$$$$:   76-block  7
call   21 never executed
    $$$$$:   76-block  8
    $$$$$:   76-block  9
call   22 never executed
    $$$$$:   76-block 10
call   23 never executed
    $$$$$:   76-block 11
    $$$$$:   76-block 12
    $$$$$:   76-block 13
    $$$$$:   76-block 14
      136:   77:                + " | " + pos.at("lineText") + "<<<"
       34:   77-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:   77-block  1
call    3 returned 34
branch  4 taken 34 (fallthrough)
branch  5 taken 0 (throw)
       34:   77-block  2
       34:   77-block  3
call    6 returned 34
branch  7 taken 34 (fallthrough)
branch  8 taken 0 (throw)
       34:   77-block  4
call    9 returned 34
branch 10 taken 34 (fallthrough)
branch 11 taken 0 (throw)
       34:   77-block  5
call   12 returned 34
branch 13 taken 34 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 34
call   16 returned 34
call   17 returned 34
call   18 returned 34
    $$$$$:   77-block  6
call   19 never executed
    $$$$$:   77-block  7
call   20 never executed
    $$$$$:   77-block  8
call   21 never executed
    $$$$$:   77-block  9
    $$$$$:   77-block 10
call   22 never executed
    $$$$$:   77-block 11
    $$$$$:   77-block 12
    $$$$$:   77-block 13
    $$$$$:   77-block 14
       68:   78:                + "\nline ended without closing quotation marks"
       34:   78-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:   78-block  1
call    3 returned 34
    $$$$$:   78-block  2
call    4 never executed
    $$$$$:   78-block  3
      102:   79:            );
       34:   79-block  0
call    0 returned 34
       34:   79-block  1
call    1 returned 34
branch  2 taken 34 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 34
    $$$$$:   79-block  2
call    5 never executed
        -:   80:        }
      345:   81:        valueString += character;
      345:   81-block  0
call    0 returned 345
branch  1 taken 345 (fallthrough)
branch  2 taken 0 (throw)
      345:   82:        character = positionHandler.advanceCharacter();
      345:   82-block  0
call    0 returned 345
branch  1 taken 345 (fallthrough)
branch  2 taken 0 (throw)
      345:   82-block  1
        -:   83:    }
        2:   84:    return Token(TokenType::STRING, pos, valueString);
        1:   84-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   84-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   84-block  2
call    6 returned 1
        1:   84-block  3
    $$$$$:   84-block  4
call    7 never executed
    $$$$$:   84-block  5
       69:   85:}
call    0 returned 1
call    1 returned 1
       34:   85-block  0
call    2 returned 34
       34:   85-block  1
call    3 returned 34
function _ZNK5Lexer19makeIdentifierTokenEc called 49 returned 100% blocks executed 73%
       49:   86:Token Lexer::makeIdentifierToken(char character) const{
       49:   87:    const std::map<std::string, std::string> pos = positionHandler.getPos();
       49:   87-block  0
call    0 returned 49
branch  1 taken 49 (fallthrough)
branch  2 taken 0 (throw)
       49:   88:    std::string identifierString;
       49:   88-block  0
call    0 returned 49
       49:   89:    identifierString += character;
call    0 returned 49
branch  1 taken 49 (fallthrough)
branch  2 taken 0 (throw)
        -:   90:    do {
       78:   91:        char peekChar = this->positionHandler.peek();
       78:   91-block  0
call    0 returned 78
branch  1 taken 78 (fallthrough)
branch  2 taken 0 (throw)
       78:   92:        if (peekChar != '\0' and Lexer::LETTERS_DIGITS.find(peekChar) != std::string::npos) {
       78:   92-block  0
branch  0 taken 66 (fallthrough)
branch  1 taken 12
       66:   92-block  1
call    2 returned 66
branch  3 taken 29 (fallthrough)
branch  4 taken 37
       29:   92-block  2
       49:   92-block  3
       78:   92-block  4
branch  5 taken 29 (fallthrough)
branch  6 taken 49
       29:   93:            character = this->positionHandler.advanceCharacter();
       29:   93-block  0
call    0 returned 29
branch  1 taken 29 (fallthrough)
branch  2 taken 0 (throw)
       29:   94:            identifierString += character;
       29:   94-block  0
call    0 returned 29
branch  1 taken 29 (fallthrough)
branch  2 taken 0 (throw)
        -:   95:        }
       49:   96:        else {break;}
       49:   96-block  0
       29:   97:    } while (true);
       29:   97-block  0
       49:   98:    if (KEYWORDS.find(identifierString) != KEYWORDS.end() or LIBWORDS.find(identifierString) != LIBWORDS.end()) {
       49:   98-block  0
call    0 returned 49
call    1 returned 49
branch  2 taken 49 (fallthrough)
branch  3 taken 0 (throw)
       49:   98-block  1
call    4 returned 49
branch  5 taken 38 (fallthrough)
branch  6 taken 11
       38:   98-block  2
call    7 returned 38
call    8 returned 38
branch  9 taken 38 (fallthrough)
branch 10 taken 0 (throw)
       38:   98-block  3
call   11 returned 38
branch 12 taken 1 (fallthrough)
branch 13 taken 37
       12:   98-block  4
       37:   98-block  5
       49:   98-block  6
branch 14 taken 12 (fallthrough)
branch 15 taken 37
    $$$$$:   98-block  7
    $$$$$:   98-block  8
    $$$$$:   98-block  9
    $$$$$:   98-block 10
       12:   99:        return Token(TokenType::KEYWORD, pos, identifierString);
       12:   99-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:   99-block  1
call    3 returned 12
branch  4 taken 12 (fallthrough)
branch  5 taken 0 (throw)
       12:   99-block  2
call    6 returned 12
    $$$$$:   99-block  3
call    7 never executed
    $$$$$:   99-block  4
        -:  100:    }
        -:  101:    else {
       37:  102:        return Token(TokenType::IDENTIFIER, pos, identifierString);
       37:  102-block  0
call    0 returned 37
branch  1 taken 37 (fallthrough)
branch  2 taken 0 (throw)
       37:  102-block  1
call    3 returned 37
branch  4 taken 37 (fallthrough)
branch  5 taken 0 (throw)
       37:  102-block  2
call    6 returned 37
    $$$$$:  102-block  3
call    7 never executed
    $$$$$:  102-block  4
        -:  103:    }
       49:  104:}
       49:  104-block  0
call    0 returned 49
call    1 returned 49
    $$$$$:  104-block  1
call    2 never executed
    $$$$$:  104-block  2
call    3 never executed
function _ZNK5Lexer15makeEqualsTokenEc called 3 returned 100% blocks executed 62%
        3:  105:Token Lexer::makeEqualsToken(char character) const {
        3:  106:    const std::map<std::string, std::string> pos = positionHandler.getPos();
        3:  106-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  107:    const char peekChar = this->positionHandler.peek();
        3:  107-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  108:    if (peekChar == '=') {
        3:  108-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  109:        positionHandler.advanceCharacter();
        1:  109-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  110:        return Token(TokenType::TRUEEQUALS, pos);
        1:  110-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  110-block  1
call    4 returned 1
    $$$$$:  110-block  2
call    5 never executed
    $$$$$:  110-block  3
    $$$$$:  110-block  4
        -:  111:    }
        -:  112:    else {
        2:  113:        return Token(TokenType::EQUALS, pos);
        2:  113-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  113-block  1
call    4 returned 2
    $$$$$:  113-block  2
call    5 never executed
    $$$$$:  113-block  3
    $$$$$:  113-block  4
        -:  114:    }
        3:  115:}
        3:  115-block  0
call    0 returned 3
    $$$$$:  115-block  1
call    1 never executed
function _ZNK5Lexer18makeNotEqualsTokenEc called 35 returned 3% blocks executed 50%
       35:  116:Token Lexer::makeNotEqualsToken(char character) const {
       35:  117:    std::map<std::string, std::string> pos = positionHandler.getPos();
       35:  117-block  0
call    0 returned 35
branch  1 taken 35 (fallthrough)
branch  2 taken 0 (throw)
       35:  118:    if (const char peekChar = this->positionHandler.peek(); peekChar == '=') {
       35:  118-block  0
call    0 returned 35
branch  1 taken 35 (fallthrough)
branch  2 taken 0 (throw)
       35:  118-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 34
        1:  119:        positionHandler.advanceCharacter();
        1:  119-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2:  120:        return Token(TokenType::NOTEQUAL, pos);
        1:  120-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  120-block  1
call    4 returned 1
        1:  120-block  2
    $$$$$:  120-block  3
call    5 never executed
    $$$$$:  120-block  4
    $$$$$:  120-block  5
        -:  121:    }
        -:  122:    else {
       68:  123:        throw ExpectedCharError("\nOn line: " + std::to_string(stoi(pos["line"]) + 1) +
       34:  123-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:  123-block  1
call    3 returned 34
branch  4 taken 34 (fallthrough)
branch  5 taken 0 (throw)
       34:  123-block  2
call    6 returned 34
branch  7 taken 34 (fallthrough)
branch  8 taken 0 (throw)
       34:  123-block  3
call    9 returned 34
call   10 returned 34
branch 11 taken 34 (fallthrough)
branch 12 taken 0 (throw)
       34:  123-block  4
call   13 returned 34
branch 14 taken 34 (fallthrough)
branch 15 taken 0 (throw)
call   16 returned 34
call   17 returned 34
call   18 returned 34
call   19 returned 34
    $$$$$:  123-block  5
call   20 never executed
    $$$$$:  123-block  6
call   21 never executed
    $$$$$:  123-block  7
call   22 never executed
    $$$$$:  123-block  8
call   23 never executed
    $$$$$:  123-block  9
    $$$$$:  123-block 10
    $$$$$:  123-block 11
    $$$$$:  123-block 12
    $$$$$:  123-block 13
      136:  124:        " of file: " + pos["name"] + "\n" +
       34:  124-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:  124-block  1
call    3 returned 34
branch  4 taken 34 (fallthrough)
branch  5 taken 0 (throw)
       34:  124-block  2
       34:  124-block  3
call    6 returned 34
branch  7 taken 34 (fallthrough)
branch  8 taken 0 (throw)
       34:  124-block  4
call    9 returned 34
branch 10 taken 34 (fallthrough)
branch 11 taken 0 (throw)
       34:  124-block  5
call   12 returned 34
branch 13 taken 34 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 34
call   16 returned 34
call   17 returned 34
call   18 returned 34
    $$$$$:  124-block  6
call   19 never executed
    $$$$$:  124-block  7
call   20 never executed
    $$$$$:  124-block  8
call   21 never executed
    $$$$$:  124-block  9
call   22 never executed
    $$$$$:  124-block 10
    $$$$$:  124-block 11
    $$$$$:  124-block 12
    $$$$$:  124-block 13
    $$$$$:  124-block 14
      136:  125:        "{" + pos["lineText"] + "}\n" +
       34:  125-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:  125-block  1
call    3 returned 34
branch  4 taken 34 (fallthrough)
branch  5 taken 0 (throw)
       34:  125-block  2
       34:  125-block  3
call    6 returned 34
branch  7 taken 34 (fallthrough)
branch  8 taken 0 (throw)
       34:  125-block  4
call    9 returned 34
branch 10 taken 34 (fallthrough)
branch 11 taken 0 (throw)
       34:  125-block  5
call   12 returned 34
branch 13 taken 34 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 34
call   16 returned 34
call   17 returned 34
call   18 returned 34
    $$$$$:  125-block  6
call   19 never executed
    $$$$$:  125-block  7
call   20 never executed
    $$$$$:  125-block  8
call   21 never executed
    $$$$$:  125-block  9
call   22 never executed
    $$$$$:  125-block 10
    $$$$$:  125-block 11
    $$$$$:  125-block 12
    $$$$$:  125-block 13
    $$$$$:  125-block 14
      170:  126:        "Expected >>> != <<< instead recieved >>> !" + std::string(1, peekChar) + " <<<");
       34:  126-block  0
call    0 returned 34
       34:  126-block  1
call    1 returned 34
branch  2 taken 34 (fallthrough)
branch  3 taken 0 (throw)
       34:  126-block  2
call    4 returned 34
branch  5 taken 34 (fallthrough)
branch  6 taken 0 (throw)
       34:  126-block  3
call    7 returned 34
branch  8 taken 34 (fallthrough)
branch  9 taken 0 (throw)
       34:  126-block  4
call   10 returned 34
branch 11 taken 34 (fallthrough)
branch 12 taken 0 (throw)
       34:  126-block  5
call   13 returned 34
call   14 returned 34
call   15 returned 34
call   16 returned 34
    $$$$$:  126-block  6
call   17 never executed
    $$$$$:  126-block  7
call   18 never executed
    $$$$$:  126-block  8
call   19 never executed
    $$$$$:  126-block  9
    $$$$$:  126-block 10
    $$$$$:  126-block 11
    $$$$$:  126-block 12
    $$$$$:  126-block 13
call   20 never executed
        -:  127:    }
       35:  128:}
call    0 returned 1
       34:  128-block  0
call    1 returned 34
function _ZNK5Lexer17makeLessThanTokenEc called 2 returned 100% blocks executed 62%
        2:  129:Token Lexer::makeLessThanToken(char character) const {
        2:  130:    const std::map<std::string, std::string> pos = positionHandler.getPos();
        2:  130-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  131:    const char peekChar = this->positionHandler.peek();
        2:  131-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  132:    if (peekChar == '=') {
        2:  132-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  133:        positionHandler.advanceCharacter();
        1:  133-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  134:        return Token(TokenType::LESSEQUAL, pos);
        1:  134-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  134-block  1
call    4 returned 1
    $$$$$:  134-block  2
call    5 never executed
    $$$$$:  134-block  3
    $$$$$:  134-block  4
        -:  135:    }
        -:  136:    else {
        1:  137:        return Token(TokenType::LESSTHAN, pos);
        1:  137-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  137-block  1
call    4 returned 1
    $$$$$:  137-block  2
call    5 never executed
    $$$$$:  137-block  3
    $$$$$:  137-block  4
        -:  138:    }
        2:  139:}
        2:  139-block  0
call    0 returned 2
    $$$$$:  139-block  1
call    1 never executed
function _ZNK5Lexer20makeGreaterThanTokenEc called 2 returned 100% blocks executed 62%
        2:  140:Token Lexer::makeGreaterThanToken(char character) const {
        2:  141:    const std::map<std::string, std::string> pos = positionHandler.getPos();
        2:  141-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  142:    const char peekChar = this->positionHandler.peek();
        2:  142-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  143:    if (peekChar == '=') {
        2:  143-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  144:        positionHandler.advanceCharacter();
        1:  144-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  145:        return Token(TokenType::GREATEREQUAL, pos);
        1:  145-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  145-block  1
call    4 returned 1
    $$$$$:  145-block  2
call    5 never executed
    $$$$$:  145-block  3
    $$$$$:  145-block  4
        -:  146:    }
        -:  147:    else {
        1:  148:        return Token(TokenType::GREATERTHAN, pos);
        1:  148-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  148-block  1
call    4 returned 1
    $$$$$:  148-block  2
call    5 never executed
    $$$$$:  148-block  3
    $$$$$:  148-block  4
        -:  149:    }
        2:  150:}
        2:  150-block  0
call    0 returned 2
    $$$$$:  150-block  1
call    1 never executed
        -:  151:
function _ZNK5Lexer8tokeniseEv called 205 returned 34% blocks executed 61%
      205:  152:std::map<int, std::vector<Token>> Lexer::tokenise() const {
      205:  153:    std::map<int, std::vector<Token>> tokenDict = {};
      205:  153-block  0
call    0 returned 205
      205:  154:    bool isLine = positionHandler.advanceLine();
call    0 returned 205
branch  1 taken 205 (fallthrough)
branch  2 taken 0 (throw)
      275:  155:    while (isLine) { // loop through lines
      205:  155-block  0
      275:  155-block  1
branch  0 taken 206
branch  1 taken 69 (fallthrough)
      206:  156:        std::vector<Token> lineTokens = {};
      206:  156-block  0
call    0 returned 206
      206:  157:        std::map<std::string, std::string> pos = positionHandler.getPos();
call    0 returned 206
branch  1 taken 206 (fallthrough)
branch  2 taken 0 (throw)
      206:  158:        char currentChar = positionHandler.getChar();
      206:  158-block  0
call    0 returned 206
branch  1 taken 206 (fallthrough)
branch  2 taken 0 (throw)
      206:  159:        bool escapeFlag = false;
      490:  160:        while (currentChar != '\0' and not escapeFlag) { // loop through characters
      206:  160-block  0
      490:  160-block  1
branch  0 taken 454 (fallthrough)
branch  1 taken 36
      454:  160-block  2
branch  2 taken 420
branch  3 taken 34 (fallthrough)
      420:  161:            pos = positionHandler.getPos();
      420:  161-block  0
call    0 returned 420
branch  1 taken 420 (fallthrough)
branch  2 taken 0 (throw)
      420:  161-block  1
call    3 returned 420
call    4 returned 420
    $$$$$:  161-block  2
      420:  162:            switch(currentChar){
branch  0 taken 107
branch  1 taken 34
branch  2 taken 1
branch  3 taken 1
branch  4 taken 1
branch  5 taken 1
branch  6 taken 1
branch  7 taken 3
branch  8 taken 35
branch  9 taken 2
branch 10 taken 2
branch 11 taken 35
branch 12 taken 197
      107:  163:                case ' ': case '\t': case '\n': case '\r':
        -:  164:                    // Skip whitespace
      107:  165:                    break;
      107:  165-block  0
       34:  166:                case '~':
       34:  167:                    escapeFlag = true;
       34:  168:                break;
       34:  168-block  0
        1:  169:                case '(':
        1:  170:                    lineTokens.emplace_back(TokenType::OPENPAREN, pos);
        1:  170-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  170-block  1
        1:  171:                break;
        1:  171-block  0
        1:  172:                case ')':
        1:  173:                    lineTokens.emplace_back(TokenType::CLOSEPAREN, pos);
        1:  173-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  173-block  1
        1:  174:                    break;
        1:  174-block  0
        1:  175:                case '{':
        1:  176:                    lineTokens.emplace_back(TokenType::OPENBRACE, pos);
        1:  176-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  176-block  1
        1:  177:                break;
        1:  177-block  0
        1:  178:                case '}':
        1:  179:                    lineTokens.emplace_back(TokenType::CLOSEBRACE, pos);
        1:  179-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  179-block  1
        1:  180:                break;
        1:  180-block  0
        1:  181:                case ',':
        1:  182:                    lineTokens.emplace_back(TokenType::SEPERATOR, pos);
        1:  182-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  182-block  1
        1:  183:                break;
        1:  183-block  0
        3:  184:                case '=':
        3:  185:                    lineTokens.push_back(makeEqualsToken(currentChar));
        3:  185-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  185-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3:  185-block  2
call    6 returned 3
    $$$$$:  185-block  3
call    7 never executed
    $$$$$:  185-block  4
        3:  186:                break;
       35:  187:                case '!':
       35:  188:                    lineTokens.push_back(makeNotEqualsToken(currentChar));
       35:  188-block  0
call    0 returned 35
branch  1 taken 1 (fallthrough)
branch  2 taken 34 (throw)
        1:  188-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  188-block  2
call    6 returned 1
    $$$$$:  188-block  3
call    7 never executed
       34:  188-block  4
        1:  189:                break;
        2:  190:                case '<':
        2:  191:                    lineTokens.push_back(makeLessThanToken(currentChar));
        2:  191-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  191-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  191-block  2
call    6 returned 2
    $$$$$:  191-block  3
call    7 never executed
    $$$$$:  191-block  4
        2:  192:                break;
        2:  193:                case '>':
        2:  194:                    lineTokens.push_back(makeGreaterThanToken(currentChar));
        2:  194-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  194-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  194-block  2
call    6 returned 2
    $$$$$:  194-block  3
call    7 never executed
    $$$$$:  194-block  4
        2:  195:                break;
       35:  196:                case '\"':
       35:  197:                    lineTokens.push_back(makeStringToken(currentChar));
       35:  197-block  0
call    0 returned 35
branch  1 taken 1 (fallthrough)
branch  2 taken 34 (throw)
        1:  197-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  197-block  2
call    6 returned 1
    $$$$$:  197-block  3
call    7 never executed
       34:  197-block  4
        1:  198:                break;
      197:  199:                default:
      197:  200:                    if (OPERATORS.find(currentChar) != std::string::npos) {
      197:  200-block  0
call    0 returned 197
branch  1 taken 42 (fallthrough)
branch  2 taken 155
       42:  201:                        lineTokens.push_back(makeOperatorToken(currentChar));
       42:  201-block  0
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
       42:  201-block  1
call    3 returned 42
branch  4 taken 42 (fallthrough)
branch  5 taken 0 (throw)
       42:  201-block  2
call    6 returned 42
    $$$$$:  201-block  3
call    7 never executed
    $$$$$:  201-block  4
        -:  202:                    }
      155:  203:                    else if (DIGITS.find(currentChar) != std::string::npos) {
      155:  203-block  0
call    0 returned 155
branch  1 taken 72 (fallthrough)
branch  2 taken 83
       72:  204:                        lineTokens.push_back(makeNumberToken(currentChar));
       72:  204-block  0
call    0 returned 72
branch  1 taken 38 (fallthrough)
branch  2 taken 34 (throw)
       38:  204-block  1
call    3 returned 38
branch  4 taken 38 (fallthrough)
branch  5 taken 0 (throw)
       38:  204-block  2
call    6 returned 38
    $$$$$:  204-block  3
call    7 never executed
       34:  204-block  4
        -:  205:                    }
       83:  206:                    else if (LETTERS.find(currentChar) != std::string::npos) {
       83:  206-block  0
call    0 returned 83
branch  1 taken 49 (fallthrough)
branch  2 taken 34
       49:  207:                        lineTokens.push_back(makeIdentifierToken(currentChar));
       49:  207-block  0
call    0 returned 49
branch  1 taken 49 (fallthrough)
branch  2 taken 0 (throw)
       49:  207-block  1
call    3 returned 49
branch  4 taken 49 (fallthrough)
branch  5 taken 0 (throw)
       49:  207-block  2
call    6 returned 49
    $$$$$:  207-block  3
call    7 never executed
    $$$$$:  207-block  4
        -:  208:                    }
        -:  209:                    else {
       68:  210:                        throw IllegalCharError("\nUnrecognized character >>> " + pos["character"] + " <<<" +
       34:  210-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:  210-block  1
call    3 returned 34
branch  4 taken 34 (fallthrough)
branch  5 taken 0 (throw)
       34:  210-block  2
call    6 returned 34
branch  7 taken 34 (fallthrough)
branch  8 taken 0 (throw)
       34:  210-block  3
call    9 returned 34
branch 10 taken 34 (fallthrough)
branch 11 taken 0 (throw)
       34:  210-block  4
call   12 returned 34
branch 13 taken 34 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 34
call   16 returned 34
call   17 returned 34
call   18 returned 34
    $$$$$:  210-block  5
call   19 never executed
    $$$$$:  210-block  6
call   20 never executed
    $$$$$:  210-block  7
call   21 never executed
    $$$$$:  210-block  8
call   22 never executed
    $$$$$:  210-block  9
    $$$$$:  210-block 10
    $$$$$:  210-block 11
    $$$$$:  210-block 12
    $$$$$:  210-block 13
       68:  211:                            " on line: " +
       34:  211-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 34
    $$$$$:  211-block  1
call    4 never executed
    $$$$$:  211-block  2
      204:  212:                            std::to_string(stoi(pos["line"]) + 1) + " of file: " + pos["name"] +
       34:  212-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:  212-block  1
call    3 returned 34
branch  4 taken 34 (fallthrough)
branch  5 taken 0 (throw)
       34:  212-block  2
       34:  212-block  3
call    6 returned 34
branch  7 taken 34 (fallthrough)
branch  8 taken 0 (throw)
       34:  212-block  4
call    9 returned 34
branch 10 taken 34 (fallthrough)
branch 11 taken 0 (throw)
       34:  212-block  5
call   12 returned 34
branch 13 taken 34 (fallthrough)
branch 14 taken 0 (throw)
       34:  212-block  6
call   15 returned 34
       34:  212-block  7
call   16 returned 34
branch 17 taken 34 (fallthrough)
branch 18 taken 0 (throw)
       34:  212-block  8
call   19 returned 34
branch 20 taken 34 (fallthrough)
branch 21 taken 0 (throw)
       34:  212-block  9
call   22 returned 34
branch 23 taken 34 (fallthrough)
branch 24 taken 0 (throw)
call   25 returned 34
call   26 returned 34
call   27 returned 34
call   28 returned 34
call   29 returned 34
call   30 returned 34
    $$$$$:  212-block 10
call   31 never executed
    $$$$$:  212-block 11
call   32 never executed
    $$$$$:  212-block 12
call   33 never executed
    $$$$$:  212-block 13
call   34 never executed
    $$$$$:  212-block 14
call   35 never executed
    $$$$$:  212-block 15
    $$$$$:  212-block 16
    $$$$$:  212-block 17
    $$$$$:  212-block 18
    $$$$$:  212-block 19
call   36 never executed
    $$$$$:  212-block 20
    $$$$$:  212-block 21
    $$$$$:  212-block 22
    $$$$$:  212-block 23
      170:  213:                            " {" + pos["lineText"] + "}");
       34:  213-block  0
call    0 returned 34
       34:  213-block  1
call    1 returned 34
branch  2 taken 34 (fallthrough)
branch  3 taken 0 (throw)
       34:  213-block  2
call    4 returned 34
branch  5 taken 34 (fallthrough)
branch  6 taken 0 (throw)
       34:  213-block  3
       34:  213-block  4
call    7 returned 34
branch  8 taken 34 (fallthrough)
branch  9 taken 0 (throw)
       34:  213-block  5
call   10 returned 34
branch 11 taken 34 (fallthrough)
branch 12 taken 0 (throw)
       34:  213-block  6
call   13 returned 34
branch 14 taken 34 (fallthrough)
branch 15 taken 0 (throw)
       34:  213-block  7
call   16 returned 34
call   17 returned 34
call   18 returned 34
call   19 returned 34
    $$$$$:  213-block  8
call   20 never executed
    $$$$$:  213-block  9
call   21 never executed
    $$$$$:  213-block 10
call   22 never executed
    $$$$$:  213-block 11
    $$$$$:  213-block 12
    $$$$$:  213-block 13
    $$$$$:  213-block 14
    $$$$$:  213-block 15
call   23 never executed
        -:  214:                    }
        -:  215:            }
      284:  216:            currentChar = positionHandler.advanceCharacter(); // advance to next char
      284:  216-block  0
call    0 returned 284
branch  1 taken 284 (fallthrough)
branch  2 taken 0 (throw)
      284:  216-block  1
        -:  217:        }
       70:  218:        lineTokens.emplace_back(TokenType::EOL, positionHandler.getPos());
       70:  218-block  0
call    0 returned 70
branch  1 taken 70 (fallthrough)
branch  2 taken 0 (throw)
       70:  218-block  1
call    3 returned 70
branch  4 taken 70 (fallthrough)
branch  5 taken 0 (throw)
       70:  218-block  2
call    6 returned 70
    $$$$$:  218-block  3
    $$$$$:  218-block  4
call    7 never executed
    $$$$$:  218-block  5
       70:  219:        tokenDict[positionHandler.getLineNumber()] = lineTokens;
call    0 returned 70
branch  1 taken 70 (fallthrough)
branch  2 taken 0 (throw)
       70:  219-block  0
call    3 returned 70
branch  4 taken 70 (fallthrough)
branch  5 taken 0 (throw)
       70:  219-block  1
call    6 returned 70
branch  7 taken 70 (fallthrough)
branch  8 taken 0 (throw)
    $$$$$:  219-block  2
       70:  220:        isLine = positionHandler.advanceLine();
       70:  220-block  0
call    0 returned 70
branch  1 taken 70 (fallthrough)
branch  2 taken 0 (throw)
      342:  221:    }
       70:  221-block  0
call    0 returned 70
call    1 returned 70
      136:  221-block  1
call    2 returned 136
      136:  221-block  2
call    3 returned 136
       69:  222:    tokenDict[positionHandler.getLineNumber()+1].emplace_back(TokenType::EOF_, PositionHandler::nullPos);
       69:  222-block  0
call    0 returned 69
branch  1 taken 69 (fallthrough)
branch  2 taken 0 (throw)
       69:  222-block  1
call    3 returned 69
branch  4 taken 69 (fallthrough)
branch  5 taken 0 (throw)
       69:  222-block  2
call    6 returned 69
branch  7 taken 69 (fallthrough)
branch  8 taken 0 (throw)
    $$$$$:  222-block  3
    $$$$$:  222-block  4
       69:  223:    return tokenDict;
       69:  223-block  0
       69:  223-block  1
      136:  224:}
      136:  224-block  0
call    0 returned 136
        -:  225:
        -:  226:
