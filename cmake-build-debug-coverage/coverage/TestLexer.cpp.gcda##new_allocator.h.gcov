        -:    0:Source:D:/JetBrains/CLion 2024.1.4/bin/mingw/lib/gcc/x86_64-w64-mingw32/13.1.0/include/c++/bits/new_allocator.h
        -:    0:Graph:D:\Project Workspace\Year3\VIS\cmake-build-debug-coverage\tests\CMakeFiles\vis_tests.dir\TestLexer.cpp.gcno
        -:    0:Data:D:\Project Workspace\Year3\VIS\cmake-build-debug-coverage\tests\CMakeFiles\vis_tests.dir\TestLexer.cpp.gcda
        -:    0:Runs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2023 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/new_allocator.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{memory}
        -:   28: */
        -:   29:
        -:   30:#ifndef _STD_NEW_ALLOCATOR_H
        -:   31:#define _STD_NEW_ALLOCATOR_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#include <new>
        -:   35:#include <bits/functexcept.h>
        -:   36:#include <bits/move.h>
        -:   37:#if __cplusplus >= 201103L
        -:   38:#include <type_traits>
        -:   39:#endif
        -:   40:
        -:   41:namespace std _GLIBCXX_VISIBILITY(default)
        -:   42:{
        -:   43:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   44:
        -:   45:  /**
        -:   46:   * @brief  An allocator that uses global `new`, as per C++03 [20.4.1].
        -:   47:   * @ingroup allocators
        -:   48:   *
        -:   49:   * This is precisely the allocator defined in the C++ Standard.
        -:   50:   *   - all allocation calls `operator new`
        -:   51:   *   - all deallocation calls `operator delete`
        -:   52:   *
        -:   53:   * This is the default base-class implementation of `std::allocator`,
        -:   54:   * and is also the base-class of the `__gnu_cxx::new_allocator` extension.
        -:   55:   * You should use either `std::allocator` or `__gnu_cxx::new_allocator`
        -:   56:   * instead of using this directly.
        -:   57:   *
        -:   58:   * @tparam  _Tp  Type of allocated object.
        -:   59:   *
        -:   60:   * @headerfile memory
        -:   61:   */
        -:   62:  template<typename _Tp>
        -:   63:    class __new_allocator
        -:   64:    {
        -:   65:    public:
        -:   66:      typedef _Tp        value_type;
        -:   67:      typedef std::size_t     size_type;
        -:   68:      typedef std::ptrdiff_t  difference_type;
        -:   69:#if __cplusplus <= 201703L
        -:   70:      typedef _Tp*       pointer;
        -:   71:      typedef const _Tp* const_pointer;
        -:   72:      typedef _Tp&       reference;
        -:   73:      typedef const _Tp& const_reference;
        -:   74:
        -:   75:      template<typename _Tp1>
        -:   76:	struct rebind
        -:   77:	{ typedef __new_allocator<_Tp1> other; };
        -:   78:#endif
        -:   79:
        -:   80:#if __cplusplus >= 201103L
        -:   81:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   82:      // 2103. propagate_on_container_move_assignment
        -:   83:      typedef std::true_type propagate_on_container_move_assignment;
        -:   84:#endif
        -:   85:
        -:   86:      __attribute__((__always_inline__))
        -:   87:      _GLIBCXX20_CONSTEXPR
     702*:   88:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
        7:   88-block  0
        1:   88-block  1
        1:   88-block  2
        6:   88-block  3
        6:   88-block  4
       34:   88-block  5
        1:   88-block  6
       34:   88-block  7
        1:   88-block  8
       34:   88-block  9
        1:   88-block 10
       34:   88-block 11
        1:   88-block 12
       34:   88-block 13
        1:   88-block 14
       34:   88-block 15
        1:   88-block 16
    %%%%%:   88-block 17
    %%%%%:   88-block 18
    %%%%%:   88-block 19
    %%%%%:   88-block 20
    %%%%%:   88-block 21
    %%%%%:   88-block 22
    %%%%%:   88-block 23
    %%%%%:   88-block 24
    %%%%%:   88-block 25
    %%%%%:   88-block 26
    %%%%%:   88-block 27
    %%%%%:   88-block 28
    %%%%%:   88-block 29
    %%%%%:   88-block 30
    %%%%%:   88-block 31
    %%%%%:   88-block 32
    %%%%%:   88-block 33
    %%%%%:   88-block 34
    %%%%%:   88-block 35
    %%%%%:   88-block 36
    %%%%%:   88-block 37
    %%%%%:   88-block 38
    %%%%%:   88-block 39
    %%%%%:   88-block 40
    %%%%%:   88-block 41
    %%%%%:   88-block 42
    %%%%%:   88-block 43
    %%%%%:   88-block 44
    %%%%%:   88-block 45
    %%%%%:   88-block 46
    %%%%%:   88-block 47
    %%%%%:   88-block 48
    %%%%%:   88-block 49
        6:   88-block 50
        6:   88-block 51
        6:   88-block 52
        6:   88-block 53
        6:   88-block 54
        6:   88-block 55
        6:   88-block 56
        6:   88-block 57
        6:   88-block 58
        6:   88-block 59
        6:   88-block 60
        6:   88-block 61
        6:   88-block 62
        6:   88-block 63
        6:   88-block 64
        6:   88-block 65
        6:   88-block 66
        6:   88-block 67
        6:   88-block 68
        6:   88-block 69
        6:   88-block 70
        6:   88-block 71
        6:   88-block 72
        6:   88-block 73
        6:   88-block 74
        6:   88-block 75
        6:   88-block 76
        6:   88-block 77
        6:   88-block 78
        6:   88-block 79
        6:   88-block 80
        6:   88-block 81
        6:   88-block 82
        6:   88-block 83
    %%%%%:   88-block 84
    %%%%%:   88-block 85
        -:   89:
        -:   90:      __attribute__((__always_inline__))
        -:   91:      _GLIBCXX20_CONSTEXPR
      503:   92:      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
       12:   92-block  0
       12:   92-block  1
      479:   92-block  2
        -:   93:
        -:   94:      template<typename _Tp1>
        -:   95:	__attribute__((__always_inline__))
        -:   96:	_GLIBCXX20_CONSTEXPR
        -:   97:	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   98:
        -:   99:#if __cplusplus <= 201703L
    1503*:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev called 6 returned 100% blocks executed 100%
        6:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEED2Ev:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorI5TokenED2Ev:
function _ZNSt15__new_allocatorI5TokenED2Ev called 1211 returned 100% blocks executed 100%
     1211:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIN7testing8internal26ParameterizedTestSuiteInfoI9LexerTestE17InstantiationInfoEED2Ev:
function _ZNSt15__new_allocatorIN7testing8internal26ParameterizedTestSuiteInfoI9LexerTestE17InstantiationInfoEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN7testing8internal26ParameterizedTestSuiteInfoI9LexerTestE8TestInfoEEED2Ev:
function _ZNSt15__new_allocatorISt10shared_ptrIN7testing8internal26ParameterizedTestSuiteInfoI9LexerTestE8TestInfoEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorI10LexerInputED2Ev:
function _ZNSt15__new_allocatorI10LexerInputED2Ev called 36 returned 100% blocks executed 100%
       36:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorI5TokenSaIS4_EEEEED2Ev:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorI5TokenSaIS4_EEEEED2Ev called 250 returned 100% blocks executed 100%
      250:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIcED2Ev:
function _ZNSt15__new_allocatorIcED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:  101:
        -:  102:      pointer
        -:  103:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:  104:      { return std::__addressof(__x); }
        -:  105:
        -:  106:      const_pointer
        -:  107:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:  108:      { return std::__addressof(__x); }
        -:  109:#endif
        -:  110:
        -:  111:#if __has_builtin(__builtin_operator_new) >= 201802L
        -:  112:# define _GLIBCXX_OPERATOR_NEW __builtin_operator_new
        -:  113:# define _GLIBCXX_OPERATOR_DELETE __builtin_operator_delete
        -:  114:#else
        -:  115:# define _GLIBCXX_OPERATOR_NEW ::operator new
        -:  116:# define _GLIBCXX_OPERATOR_DELETE ::operator delete
        -:  117:#endif
        -:  118:
        -:  119:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:  120:      // about what the return value is when __n == 0.
        -:  121:      _GLIBCXX_NODISCARD _Tp*
      222:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
      222:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    #####:  135:	      std::__throw_bad_array_new_length();
    #####:  136:	    std::__throw_bad_alloc();
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
      222:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEyPKv called 204 returned 100% blocks executed 67%
      204:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
      204:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
      204:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 204
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
      204:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      204:  147-block  0
call    0 returned 204
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN7testing8internal26ParameterizedTestSuiteInfoI9LexerTestE8TestInfoEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt10shared_ptrIN7testing8internal26ParameterizedTestSuiteInfoI9LexerTestE8TestInfoEEE8allocateEyPKv called 4 returned 100% blocks executed 67%
        4:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        4:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        4:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        4:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        4:  147-block  0
call    0 returned 4
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN7testing8internal26ParameterizedTestSuiteInfoI9LexerTestE17InstantiationInfoEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN7testing8internal26ParameterizedTestSuiteInfoI9LexerTestE17InstantiationInfoEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEE8allocateEyPKv:
function _ZNSt15__new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorI10LexerInputE8allocateEyPKv:
function _ZNSt15__new_allocatorI10LexerInputE8allocateEyPKv called 12 returned 100% blocks executed 67%
       12:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
       12:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
       12:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
       12:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
       12:  147-block  0
call    0 returned 12
        -:  148:      }
------------------
        -:  149:
        -:  150:      // __p is not permitted to be a null pointer.
        -:  151:      void
    1097*:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    1097*:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS7_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS7_y called 204 returned 100% blocks executed 100%
      204:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
      204:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
      204:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      204:  168-block  0
call    0 returned 204
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEE10deallocateEPSA_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEE10deallocateEPSA_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorI5TokenE10deallocateEPS0_y:
function _ZNSt15__new_allocatorI5TokenE10deallocateEPS0_y called 669 returned 100% blocks executed 100%
      669:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
      669:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
      669:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      669:  168-block  0
call    0 returned 669
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorI5TokenSaIS4_EEEEE10deallocateEPS8_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorI5TokenSaIS4_EEEEE10deallocateEPS8_y called 209 returned 100% blocks executed 100%
      209:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
      209:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
      209:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      209:  168-block  0
call    0 returned 209
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN7testing8internal26ParameterizedTestSuiteInfoI9LexerTestE17InstantiationInfoEE10deallocateEPS5_y:
function _ZNSt15__new_allocatorIN7testing8internal26ParameterizedTestSuiteInfoI9LexerTestE17InstantiationInfoEE10deallocateEPS5_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN7testing8internal26ParameterizedTestSuiteInfoI9LexerTestE8TestInfoEEE10deallocateEPS7_y:
function _ZNSt15__new_allocatorISt10shared_ptrIN7testing8internal26ParameterizedTestSuiteInfoI9LexerTestE8TestInfoEEE10deallocateEPS7_y called 3 returned 100% blocks executed 100%
        3:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        3:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        3:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        3:  168-block  0
call    0 returned 3
        -:  169:      }
------------------
_ZNSt15__new_allocatorI10LexerInputE10deallocateEPS0_y:
function _ZNSt15__new_allocatorI10LexerInputE10deallocateEPS0_y called 12 returned 100% blocks executed 100%
       12:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
       12:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
       12:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
       12:  168-block  0
call    0 returned 12
        -:  169:      }
------------------
_ZNSt15__new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEE10deallocateEPS3_y:
function _ZNSt15__new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEE10deallocateEPS3_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
        -:  170:
        -:  171:#undef _GLIBCXX_SIZED_DEALLOC
        -:  172:#undef _GLIBCXX_OPERATOR_DELETE
        -:  173:#undef _GLIBCXX_OPERATOR_NEW
        -:  174:
        -:  175:#if __cplusplus <= 201703L
        -:  176:      __attribute__((__always_inline__))
        -:  177:      size_type
        -:  178:      max_size() const _GLIBCXX_USE_NOEXCEPT
       24:  179:      { return _M_max_size(); }
        8:  179-block  0
        8:  179-block  1
        2:  179-block  2
        2:  179-block  3
        2:  179-block  4
        2:  179-block  5
       12:  179-block  6
       12:  179-block  7
        -:  180:
        -:  181:#if __cplusplus >= 201103L
        -:  182:      template<typename _Up, typename... _Args>
        -:  183:	__attribute__((__always_inline__))
        -:  184:	void
        -:  185:	construct(_Up* __p, _Args&&... __args)
        -:  186:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
     219*:  187:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
call    0 returned 204
call    1 returned 204
call    2 returned 204
branch  3 taken 204 (fallthrough)
branch  4 taken 0 (throw)
      204:  187-block  0
    $$$$$:  187-block  1
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$:  187-block  2
call    7 never executed
call    8 returned 7
call    9 returned 7
call   10 returned 7
call   11 never executed
call   12 never executed
call   13 never executed
call   14 returned 4
call   15 returned 4
call   16 returned 4
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 2
call   23 returned 2
call   24 returned 2
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -:  188:
        -:  189:      template<typename _Up>
        -:  190:	__attribute__((__always_inline__))
        -:  191:	void
        -:  192:	destroy(_Up* __p)
        -:  193:	noexcept(std::is_nothrow_destructible<_Up>::value)
     420*:  194:	{ __p->~_Up(); }
call    0 returned 204
call    1 never executed
call    2 returned 7
call    3 never executed
call    4 returned 209
        -:  195:#else
        -:  196:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  197:      // 402. wrong new expression in [some_] allocator::construct
        -:  198:      __attribute__((__always_inline__))
        -:  199:      void
        -:  200:      construct(pointer __p, const _Tp& __val)
        -:  201:      { ::new((void *)__p) _Tp(__val); }
        -:  202:
        -:  203:      __attribute__((__always_inline__))
        -:  204:      void
        -:  205:      destroy(pointer __p) { __p->~_Tp(); }
        -:  206:#endif
        -:  207:#endif // ! C++20
        -:  208:
        -:  209:      template<typename _Up>
        -:  210:	friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR bool
        -:  211:	operator==(const __new_allocator&, const __new_allocator<_Up>&)
        -:  212:	_GLIBCXX_NOTHROW
        -:  213:	{ return true; }
        -:  214:
        -:  215:#if __cpp_impl_three_way_comparison < 201907L
        -:  216:      template<typename _Up>
        -:  217:	friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR bool
        -:  218:	operator!=(const __new_allocator&, const __new_allocator<_Up>&)
        -:  219:	_GLIBCXX_NOTHROW
        -:  220:	{ return false; }
        -:  221:#endif
        -:  222:
        -:  223:    private:
        -:  224:      __attribute__((__always_inline__))
        -:  225:      _GLIBCXX_CONSTEXPR size_type
        -:  226:      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
        -:  227:      {
        -:  228:#if __PTRDIFF_MAX__ < __SIZE_MAX__
      246:  229:	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
      204:  229-block  0
        4:  229-block  1
        8:  229-block  2
        1:  229-block  3
        2:  229-block  4
        1:  229-block  5
        2:  229-block  6
       12:  229-block  7
       12:  229-block  8
        -:  230:#else
        -:  231:	return std::size_t(-1) / sizeof(_Tp);
        -:  232:#endif
        -:  233:      }
        -:  234:    };
        -:  235:
        -:  236:_GLIBCXX_END_NAMESPACE_VERSION
        -:  237:} // namespace
        -:  238:
        -:  239:#endif
