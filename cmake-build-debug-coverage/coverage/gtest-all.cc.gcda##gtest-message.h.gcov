        -:    0:Source:D:/Project Workspace/Year3/VIS/googletest/googletest/include/gtest/gtest-message.h
        -:    0:Graph:D:\Project Workspace\Year3\VIS\cmake-build-debug-coverage\googletest-build\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:D:\Project Workspace\Year3\VIS\cmake-build-debug-coverage\googletest-build\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   31://
        -:   32:// This header file defines the Message class.
        -:   33://
        -:   34:// IMPORTANT NOTE: Due to limitation of the C++ language, we have to
        -:   35:// leave some internal implementation details in this header file.
        -:   36:// They are clearly marked by comments like this:
        -:   37://
        -:   38://   // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
        -:   39://
        -:   40:// Such code is NOT meant to be used by a user directly, and is subject
        -:   41:// to CHANGE WITHOUT NOTICE.  Therefore DO NOT DEPEND ON IT in a user
        -:   42:// program!
        -:   43:
        -:   44:// IWYU pragma: private, include "gtest/gtest.h"
        -:   45:// IWYU pragma: friend gtest/.*
        -:   46:// IWYU pragma: friend gmock/.*
        -:   47:
        -:   48:#ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_MESSAGE_H_
        -:   49:#define GOOGLETEST_INCLUDE_GTEST_GTEST_MESSAGE_H_
        -:   50:
        -:   51:#include <limits>
        -:   52:#include <memory>
        -:   53:#include <ostream>
        -:   54:#include <sstream>
        -:   55:#include <string>
        -:   56:
        -:   57:#include "gtest/internal/gtest-port.h"
        -:   58:
        -:   59:#ifdef GTEST_HAS_ABSL
        -:   60:#include <type_traits>
        -:   61:
        -:   62:#include "absl/strings/internal/has_absl_stringify.h"
        -:   63:#include "absl/strings/str_cat.h"
        -:   64:#endif  // GTEST_HAS_ABSL
        -:   65:
        -:   66:GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \
        -:   67:/* class A needs to have dll-interface to be used by clients of class B */)
        -:   68:
        -:   69:// Ensures that there is at least one operator<< in the global namespace.
        -:   70:// See Message& operator<<(...) below for why.
        -:   71:void operator<<(const testing::internal::Secret&, int);
        -:   72:
        -:   73:namespace testing {
        -:   74:
        -:   75:// The Message class works like an ostream repeater.
        -:   76://
        -:   77:// Typical usage:
        -:   78://
        -:   79://   1. You stream a bunch of values to a Message object.
        -:   80://      It will remember the text in a stringstream.
        -:   81://   2. Then you stream the Message object to an ostream.
        -:   82://      This causes the text in the Message to be streamed
        -:   83://      to the ostream.
        -:   84://
        -:   85:// For example;
        -:   86://
        -:   87://   testing::Message foo;
        -:   88://   foo << 1 << " != " << 2;
        -:   89://   std::cout << foo;
        -:   90://
        -:   91:// will print "1 != 2".
        -:   92://
        -:   93:// Message is not intended to be inherited from.  In particular, its
        -:   94:// destructor is not virtual.
        -:   95://
        -:   96:// Note that stringstream behaves differently in gcc and in MSVC.  You
        -:   97:// can stream a NULL char pointer to it in the former, but not in the
        -:   98:// latter (it causes an access violation if you do).  The Message
        -:   99:// class hides this difference by treating a NULL char pointer as
        -:  100:// "(null)".
        -:  101:class GTEST_API_ Message {
        -:  102: private:
        -:  103:  // The type of basic IO manipulators (endl, ends, and flush) for
        -:  104:  // narrow streams.
        -:  105:  typedef std::ostream& (*BasicNarrowIoManip)(std::ostream&);
        -:  106:
        -:  107: public:
        -:  108:  // Constructs an empty Message.
        -:  109:  Message();
        -:  110:
        -:  111:  // Copy constructor.
function _ZN7testing7MessageC1ERKS0_ called 0 returned 0% blocks executed 0%
    #####:  112:  Message(const Message& msg) : ss_(new ::std::stringstream) {  // NOLINT
    %%%%%:  112-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  112-block  1
call    4 never executed
    $$$$$:  112-block  2
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$:  112-block  3
call    7 never executed
    #####:  113:    *ss_ << msg.GetString();
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  113-block  0
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  113-block  1
call    7 never executed
    $$$$$:  113-block  2
call    8 never executed
    $$$$$:  113-block  3
    #####:  114:  }
    $$$$$:  114-block  0
call    0 never executed
        -:  115:
        -:  116:  // Constructs a Message from a C-string.
        -:  117:  explicit Message(const char* str) : ss_(new ::std::stringstream) {
        -:  118:    *ss_ << str;
        -:  119:  }
        -:  120:
        -:  121:  // Streams a non-pointer value to this object. If building a version of
        -:  122:  // GoogleTest with ABSL, this overload is only enabled if the value does not
        -:  123:  // have an AbslStringify definition.
        -:  124:  template <typename T
        -:  125:#ifdef GTEST_HAS_ABSL
        -:  126:            ,
        -:  127:            typename std::enable_if<
        -:  128:                !absl::strings_internal::HasAbslStringify<T>::value,  // NOLINT
        -:  129:                int>::type = 0
        -:  130:#endif  // GTEST_HAS_ABSL
        -:  131:            >
     675*:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
     675*:  148:    *ss_ << val;
     675*:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA30_cEERS0_RKT_:
function _ZN7testing7MessagelsIA30_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA15_cEERS0_RKT_:
function _ZN7testing7MessagelsIA15_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA6_cEERS0_RKT_:
function _ZN7testing7MessagelsIA6_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA22_cEERS0_RKT_:
function _ZN7testing7MessagelsIA22_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA20_cEERS0_RKT_:
function _ZN7testing7MessagelsIA20_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA12_cEERS0_RKT_:
function _ZN7testing7MessagelsIA12_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA50_cEERS0_RKT_:
function _ZN7testing7MessagelsIA50_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIS0_EERS0_RKT_:
function _ZN7testing7MessagelsIS0_EERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA10_cEERS0_RKT_:
function _ZN7testing7MessagelsIA10_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA7_cEERS0_RKT_:
function _ZN7testing7MessagelsIA7_cEERS0_RKT_ called 21 returned 100% blocks executed 100%
       21:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
       21:  148:    *ss_ << val;
       21:  148-block  0
call    0 returned 21
call    1 returned 21
       21:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA18_cEERS0_RKT_:
function _ZN7testing7MessagelsIA18_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA38_cEERS0_RKT_:
function _ZN7testing7MessagelsIA38_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA3_cEERS0_RKT_:
function _ZN7testing7MessagelsIA3_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIcEERS0_RKT_:
function _ZN7testing7MessagelsIcEERS0_RKT_ called 414 returned 100% blocks executed 100%
      414:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
      414:  148:    *ss_ << val;
      414:  148-block  0
call    0 returned 414
call    1 returned 414
      414:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA27_cEERS0_RKT_:
function _ZN7testing7MessagelsIA27_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA35_cEERS0_RKT_:
function _ZN7testing7MessagelsIA35_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA4_cEERS0_RKT_:
function _ZN7testing7MessagelsIA4_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA32_cEERS0_RKT_:
function _ZN7testing7MessagelsIA32_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA23_cEERS0_RKT_:
function _ZN7testing7MessagelsIA23_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA51_cEERS0_RKT_:
function _ZN7testing7MessagelsIA51_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA47_cEERS0_RKT_:
function _ZN7testing7MessagelsIA47_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA33_cEERS0_RKT_:
function _ZN7testing7MessagelsIA33_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS0_RKT_:
function _ZN7testing7MessagelsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA28_cEERS0_RKT_:
function _ZN7testing7MessagelsIA28_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA2_cEERS0_RKT_:
function _ZN7testing7MessagelsIA2_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA13_cEERS0_RKT_:
function _ZN7testing7MessagelsIA13_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA256_cEERS0_RKT_:
function _ZN7testing7MessagelsIA256_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIiEERS0_RKT_:
function _ZN7testing7MessagelsIiEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA25_cEERS0_RKT_:
function _ZN7testing7MessagelsIA25_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA17_cEERS0_RKT_:
function _ZN7testing7MessagelsIA17_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA4096_cEERS0_RKT_:
function _ZN7testing7MessagelsIA4096_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA29_cEERS0_RKT_:
function _ZN7testing7MessagelsIA29_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA106_cEERS0_RKT_:
function _ZN7testing7MessagelsIA106_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA100_cEERS0_RKT_:
function _ZN7testing7MessagelsIA100_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIdEERS0_RKT_:
function _ZN7testing7MessagelsIdEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA24_cEERS0_RKT_:
function _ZN7testing7MessagelsIA24_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA14_cEERS0_RKT_:
function _ZN7testing7MessagelsIA14_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIyEERS0_RKT_:
function _ZN7testing7MessagelsIyEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIjEERS0_RKT_:
function _ZN7testing7MessagelsIjEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA21_cEERS0_RKT_:
function _ZN7testing7MessagelsIA21_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA48_cEERS0_RKT_:
function _ZN7testing7MessagelsIA48_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA9_cEERS0_RKT_:
function _ZN7testing7MessagelsIA9_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA19_cEERS0_RKT_:
function _ZN7testing7MessagelsIA19_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIxEERS0_RKT_:
function _ZN7testing7MessagelsIxEERS0_RKT_ called 240 returned 100% blocks executed 100%
      240:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
      240:  148:    *ss_ << val;
      240:  148-block  0
call    0 returned 240
call    1 returned 240
      240:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA41_cEERS0_RKT_:
function _ZN7testing7MessagelsIA41_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA8_cEERS0_RKT_:
function _ZN7testing7MessagelsIA8_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA68_cEERS0_RKT_:
function _ZN7testing7MessagelsIA68_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA63_cEERS0_RKT_:
function _ZN7testing7MessagelsIA63_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA62_cEERS0_RKT_:
function _ZN7testing7MessagelsIA62_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA39_cEERS0_RKT_:
function _ZN7testing7MessagelsIA39_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA60_cEERS0_RKT_:
function _ZN7testing7MessagelsIA60_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA65_cEERS0_RKT_:
function _ZN7testing7MessagelsIA65_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA40_cEERS0_RKT_:
function _ZN7testing7MessagelsIA40_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA5_cEERS0_RKT_:
function _ZN7testing7MessagelsIA5_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA16_cEERS0_RKT_:
function _ZN7testing7MessagelsIA16_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsINS_14TestPartResultEEERS0_RKT_:
function _ZN7testing7MessagelsINS_14TestPartResultEEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
_ZN7testing7MessagelsIA11_cEERS0_RKT_:
function _ZN7testing7MessagelsIA11_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####:  132:  inline Message& operator<<(const T& val) {
        -:  133:        // Some libraries overload << for STL containers.  These
        -:  134:    // overloads are defined in the global namespace instead of ::std.
        -:  135:    //
        -:  136:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  137:    // overloads are visible in either the std namespace or the global
        -:  138:    // namespace, but not other namespaces, including the testing
        -:  139:    // namespace which Google Test's Message class is in.
        -:  140:    //
        -:  141:    // To allow STL containers (and other types that has a << operator
        -:  142:    // defined in the global namespace) to be used in Google Test
        -:  143:    // assertions, testing::Message must access the custom << operator
        -:  144:    // from the global namespace.  With this using declaration,
        -:  145:    // overloads of << defined in the global namespace and those
        -:  146:    // visible via Koenig lookup are both exposed in this function.
        -:  147:    using ::operator<<;
    #####:  148:    *ss_ << val;
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:    return *this;
        -:  150:  }
------------------
        -:  151:
        -:  152:#ifdef GTEST_HAS_ABSL
        -:  153:  // Streams a non-pointer value with an AbslStringify definition to this
        -:  154:  // object.
        -:  155:  template <typename T,
        -:  156:            typename std::enable_if<
        -:  157:                absl::strings_internal::HasAbslStringify<T>::value,  // NOLINT
        -:  158:                int>::type = 0>
        -:  159:  inline Message& operator<<(const T& val) {
        -:  160:    // ::operator<< is needed here for a similar reason as with the non-Abseil
        -:  161:    // version above
        -:  162:    using ::operator<<;
        -:  163:    *ss_ << absl::StrCat(val);
        -:  164:    return *this;
        -:  165:  }
        -:  166:#endif  // GTEST_HAS_ABSL
        -:  167:
        -:  168:  // Streams a pointer value to this object.
        -:  169:  //
        -:  170:  // This function is an overload of the previous one.  When you
        -:  171:  // stream a pointer to a Message, this definition will be used as it
        -:  172:  // is more specialized.  (The C++ Standard, section
        -:  173:  // [temp.func.order].)  If you stream a non-pointer, then the
        -:  174:  // previous definition will be used.
        -:  175:  //
        -:  176:  // The reason for this overload is that streaming a NULL pointer to
        -:  177:  // ostream is undefined behavior.  Depending on the compiler, you
        -:  178:  // may get "0", "(nil)", "(null)", or an access violation.  To
        -:  179:  // ensure consistent result across compilers, we always treat NULL
        -:  180:  // as "(null)".
        -:  181:  template <typename T>
       1*:  182:  inline Message& operator<<(T* const& pointer) {  // NOLINT
       1*:  183:    if (pointer == nullptr) {
    #####:  184:      *ss_ << "(null)";
        -:  185:    } else {
       1*:  186:      *ss_ << pointer;
        -:  187:    }
       1*:  188:    return *this;
        -:  189:  }
------------------
_ZN7testing7MessagelsIcEERS0_RKPT_:
function _ZN7testing7MessagelsIcEERS0_RKPT_ called 1 returned 100% blocks executed 71%
        1:  182:  inline Message& operator<<(T* const& pointer) {  // NOLINT
        1:  183:    if (pointer == nullptr) {
        1:  183-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  184:      *ss_ << "(null)";
    %%%%%:  184-block  0
call    0 never executed
call    1 never executed
        -:  185:    } else {
        1:  186:      *ss_ << pointer;
        1:  186-block  0
call    0 returned 1
call    1 returned 1
        -:  187:    }
        1:  188:    return *this;
        1:  188-block  0
        -:  189:  }
------------------
_ZN7testing7MessagelsIKcEERS0_RKPT_:
function _ZN7testing7MessagelsIKcEERS0_RKPT_ called 0 returned 0% blocks executed 0%
    #####:  182:  inline Message& operator<<(T* const& pointer) {  // NOLINT
    #####:  183:    if (pointer == nullptr) {
    %%%%%:  183-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  184:      *ss_ << "(null)";
    %%%%%:  184-block  0
call    0 never executed
call    1 never executed
        -:  185:    } else {
    #####:  186:      *ss_ << pointer;
    %%%%%:  186-block  0
call    0 never executed
call    1 never executed
        -:  187:    }
    #####:  188:    return *this;
    %%%%%:  188-block  0
        -:  189:  }
------------------
        -:  190:
        -:  191:  // Since the basic IO manipulators are overloaded for both narrow
        -:  192:  // and wide streams, we have to provide this specialized definition
        -:  193:  // of operator <<, even though its body is the same as the
        -:  194:  // templatized version above.  Without this definition, streaming
        -:  195:  // endl or other basic IO manipulators to Message will confuse the
        -:  196:  // compiler.
        -:  197:  Message& operator<<(BasicNarrowIoManip val) {
        -:  198:    *ss_ << val;
        -:  199:    return *this;
        -:  200:  }
        -:  201:
        -:  202:  // Instead of 1/0, we want to see true/false for bool values.
        -:  203:  Message& operator<<(bool b) { return *this << (b ? "true" : "false"); }
        -:  204:
        -:  205:  // These two overloads allow streaming a wide C string to a Message
        -:  206:  // using the UTF-8 encoding.
        -:  207:  Message& operator<<(const wchar_t* wide_c_str);
        -:  208:  Message& operator<<(wchar_t* wide_c_str);
        -:  209:
        -:  210:#if GTEST_HAS_STD_WSTRING
        -:  211:  // Converts the given wide string to a narrow string using the UTF-8
        -:  212:  // encoding, and streams the result to this Message object.
        -:  213:  Message& operator<<(const ::std::wstring& wstr);
        -:  214:#endif  // GTEST_HAS_STD_WSTRING
        -:  215:
        -:  216:  // Gets the text streamed to this object so far as an std::string.
        -:  217:  // Each '\0' character in the buffer is replaced with "\\0".
        -:  218:  //
        -:  219:  // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
        -:  220:  std::string GetString() const;
        -:  221:
        -:  222: private:
        -:  223:  // We'll hold the text streamed to this object here.
        -:  224:  const std::unique_ptr< ::std::stringstream> ss_;
        -:  225:
        -:  226:  // We declare (but don't implement) this to prevent the compiler
        -:  227:  // from implementing the assignment operator.
        -:  228:  void operator=(const Message&);
        -:  229:};
        -:  230:
        -:  231:// Streams a Message to an ostream.
function _ZN7testinglsERSoRKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####:  232:inline std::ostream& operator<<(std::ostream& os, const Message& sb) {
    #####:  233:  return os << sb.GetString();
    %%%%%:  233-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  233-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  233-block  2
    %%%%%:  233-block  3
call    6 never executed
    %%%%%:  233-block  4
    $$$$$:  233-block  5
call    7 never executed
        -:  234:}
        -:  235:
        -:  236:namespace internal {
        -:  237:
        -:  238:// Converts a streamable value to an std::string.  A NULL pointer is
        -:  239:// converted to "(null)".  When the input value is a ::string,
        -:  240:// ::std::string, ::wstring, or ::std::wstring object, each NUL
        -:  241:// character in it is replaced with "\\0".
        -:  242:template <typename T>
     258*:  243:std::string StreamableToString(const T& streamable) {
     258*:  244:  return (Message() << streamable).GetString();
        -:  245:}
        -:  246:
        -:  247:}  // namespace internal
        -:  248:}  // namespace testing
        -:  249:
        -:  250:GTEST_DISABLE_MSC_WARNINGS_POP_()  //  4251
        -:  251:
        -:  252:#endif  // GOOGLETEST_INCLUDE_GTEST_GTEST_MESSAGE_H_
