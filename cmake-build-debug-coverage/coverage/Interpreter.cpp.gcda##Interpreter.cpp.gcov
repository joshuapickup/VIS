        -:    0:Source:D:/Project Workspace/Year3/VIS/src/Interpreter.cpp
        -:    0:Graph:D:\Project Workspace\Year3\VIS\cmake-build-debug-coverage\tests\CMakeFiles\vis_tests.dir\__\src\Interpreter.cpp.gcno
        -:    0:Data:D:\Project Workspace\Year3\VIS\cmake-build-debug-coverage\tests\CMakeFiles\vis_tests.dir\__\src\Interpreter.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by joshu on 29/10/2024.
        -:    3://
        -:    4:
        -:    5:#include <error.h>
        -:    6:#include <fstream>
        -:    7:#include <iostream>
        -:    8:
        -:    9:#include "Interpreter.h"
        -:   10:#include "PositionHandler.h"
        -:   11:#include "Lexer.h"
        -:   12:#include "Parser.h"
        -:   13:#include "Literal.h"
        -:   14:
        -:   15:
function _Z11printTokensRKSt3mapIiSt6vectorI5TokenSaIS1_EESt4lessIiESaISt4pairIKiS3_EEE called 1 returned 100% blocks executed 96%
        1:   16:void printTokens(const std::map<int, std::vector<Token>>& tokenMap) {
        3:   17:    for (const auto& [lineNumber, tokens] : tokenMap) {
        1:   17-block  0
call    0 returned 1
call    1 returned 1
        2:   17-block  1
call    2 returned 2
call    3 returned 2
call    4 returned 2
        2:   17-block  2
call    5 returned 2
        3:   17-block  3
call    6 returned 3
branch  7 taken 2
branch  8 taken 1 (fallthrough)
        2:   18:        std::cout << "Line " << lineNumber << ":" << std::endl;
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   18-block  0
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:   18-block  1
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
        2:   18-block  2
call    9 returned 2
branch 10 taken 2 (fallthrough)
branch 11 taken 0 (throw)
        5:   19:        for (const Token& token : tokens) {
        2:   19-block  0
call    0 returned 2
call    1 returned 2
        3:   19-block  1
call    2 returned 3
        3:   19-block  2
call    3 returned 3
        5:   19-block  3
call    4 returned 5
branch  5 taken 3
branch  6 taken 2 (fallthrough)
        3:   20:            std::cout << token << std::endl;
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   20-block  0
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        -:   21:        }
        2:   22:        std::cout << std::endl;
        2:   22-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   23:    }
        1:   24:}
        1:   24-block  0
        -:   25:
        -:   26:
        -:   27://RETURN SIGNAL DEFINITION
function _ZN12ReturnSignalC2ESt10unique_ptrI7LiteralSt14default_deleteIS1_EE called 1 returned 100% blocks executed 100%
        1:   28:ReturnSignal::ReturnSignal(std::unique_ptr<Literal> value) : returnValue(std::move(value)) {}
        1:   28-block  0
call    0 returned 1
call    1 returned 1
function _ZN12ReturnSignal8getValueEv called 1 returned 100% blocks executed 100%
        1:   29:std::unique_ptr<Literal> ReturnSignal::getValue() {return std::move(returnValue);}
        1:   29-block  0
call    0 returned 1
call    1 returned 1
        -:   30:
        -:   31:
        -:   32:
        -:   33://INTERPRETER DEFINTITION
function _ZN11InterpreterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:   34:Interpreter::Interpreter(const std::string &filename, const bool verboseFlag) {
    #####:   35:    interpretFile(filename, verboseFlag);
    %%%%%:   35-block  0
call    0 never executed
    #####:   36:};
        -:   37:
function _ZN11Interpreter13interpretFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 1 returned 100% blocks executed 42%
        1:   38:void Interpreter::interpretFile(const std::string &filename, bool verboseFlag) {
        1:   39:    std::ifstream inputFile(filename);
        1:   39-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   40:    if (!inputFile.is_open()) {throw std::runtime_error("Error: Could not open file: " + filename);}
        1:   40-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   40-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:   40-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:   40-block  3
call   10 never executed
call   11 never executed
    $$$$$:   40-block  4
call   12 never executed
    $$$$$:   40-block  5
    $$$$$:   40-block  6
call   13 never executed
        1:   41:    PositionHandler positionHandler(filename, inputFile);
        1:   41-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   41-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   41-block  2
call    6 returned 1
    $$$$$:   41-block  3
call    7 never executed
    $$$$$:   41-block  4
        1:   42:    SymbolTable globalSymbolTable = SymbolTable();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:   43:    globalSymbolTable.set("null", std::make_unique<BoolLiteral>(false));
        1:   43-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   43-block  1
call    3 returned 1
        1:   43-block  2
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   43-block  3
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:   43-block  4
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:   43-block  5
call   13 never executed
    $$$$$:   43-block  6
    $$$$$:   43-block  7
    $$$$$:   43-block  8
call   14 never executed
    $$$$$:   43-block  9
call   15 never executed
    $$$$$:   43-block 10
    $$$$$:   43-block 11
    $$$$$:   43-block 12
        3:   44:    globalSymbolTable.set("true", std::make_unique<BoolLiteral>(true));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   44-block  0
call    3 returned 1
        1:   44-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   44-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:   44-block  3
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:   44-block  4
call   13 never executed
    $$$$$:   44-block  5
    $$$$$:   44-block  6
    $$$$$:   44-block  7
call   14 never executed
    $$$$$:   44-block  8
call   15 never executed
    $$$$$:   44-block  9
    $$$$$:   44-block 10
    $$$$$:   44-block 11
        3:   45:    globalSymbolTable.set("false", std::make_unique<BoolLiteral>(false));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   45-block  0
call    3 returned 1
        1:   45-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   45-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:   45-block  3
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:   45-block  4
call   13 never executed
    $$$$$:   45-block  5
    $$$$$:   45-block  6
    $$$$$:   45-block  7
call   14 never executed
    $$$$$:   45-block  8
call   15 never executed
    $$$$$:   45-block  9
    $$$$$:   45-block 10
    $$$$$:   45-block 11
        1:   46:    Context globalContext = Context(filename);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   46-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   46-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   46-block  2
call    9 returned 1
call   10 returned 1
    $$$$$:   46-block  3
call   11 never executed
    $$$$$:   46-block  4
    $$$$$:   46-block  5
call   12 never executed
    $$$$$:   46-block  6
        1:   47:    globalContext.setSymbolTable(std::move(globalSymbolTable));
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -:   48:
        1:   49:    Lexer lexer(positionHandler);
        1:   49-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   50:    std::map<int, std::vector<Token>> tokenList = lexer.tokenise();
        1:   50-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   51:    if (verboseFlag) {printTokens(tokenList);} // print tokens
        1:   51-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   51-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        1:   52:    Parser parser(tokenList);
        1:   52-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   52-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   52-block  2
call    6 returned 1
    $$$$$:   52-block  3
call    7 never executed
    $$$$$:   52-block  4
        1:   53:    std::unique_ptr<Node> nodeTree;
        -:   54:    do {
        3:   55:        nodeTree = parser.parse();
        3:   55-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   55-block  1
call    3 returned 3
call    4 returned 3
    $$$$$:   55-block  2
        3:   56:        if (nodeTree) {  // only process non-null nodes
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
        3:   57:            if (nodeTree->getType() == NodeType::EndOfFile) {
        3:   57-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:   57-block  1
branch  4 taken 1 (fallthrough)
branch  5 taken 2
        1:   58:                break; // exit if we get an EndOfFile node
        -:   59:            }
       2*:   60:            if (verboseFlag) {std::cout << *nodeTree << std::endl << std::endl;} // print node
        2:   60-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:   60-block  1
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:   60-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   60-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        2:   61:            std::unique_ptr<Literal> returnLiteral = visit(nodeTree, &globalContext);
        2:   61-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:   62:            if (verboseFlag) { if (returnLiteral) {
        2:   62-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:   62-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:   63:                std::cout << *returnLiteral << std::endl << std::string(100, '-') << std::endl;
    %%%%%:   63-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   63-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:   63-block  2
    %%%%%:   63-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:   63-block  4
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   63-block  5
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   63-block  6
call   16 never executed
    $$$$$:   63-block  7
call   17 never executed
    $$$$$:   63-block  8
    $$$$$:   63-block  9
        -:   64:            } } // print visited literal return
        2:   65:        }
        2:   65-block  0
call    0 returned 2
    $$$$$:   65-block  1
call    1 never executed
        2:   66:    }
        2:   66-block  0
        -:   67:    while (true);
        1:   68:}
        1:   68-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
    $$$$$:   68-block  1
call    7 never executed
    $$$$$:   68-block  2
call    8 never executed
    $$$$$:   68-block  3
call    9 never executed
    $$$$$:   68-block  4
call   10 never executed
    $$$$$:   68-block  5
call   11 never executed
    $$$$$:   68-block  6
call   12 never executed
    $$$$$:   68-block  7
call   13 never executed
        -:   69:
function _ZN11Interpreter5visitERKSt10unique_ptrI4NodeSt14default_deleteIS1_EEP7Context called 115 returned 99% blocks executed 64%
      115:   70:std::unique_ptr<Literal> Interpreter::visit(const std::unique_ptr<Node> &node, Context *context) {
      115:   71:    switch (node->getType()) {
      115:   71-block  0
call    0 returned 115
call    1 returned 115
branch  2 taken 52
branch  3 taken 1
branch  4 taken 28
branch  5 taken 2
branch  6 taken 13
branch  7 taken 1
branch  8 taken 11
branch  9 taken 1
branch 10 taken 1
branch 11 taken 1
branch 12 taken 1
branch 13 taken 0
branch 14 taken 1
branch 15 taken 1
branch 16 taken 1
branch 17 taken 0
       52:   72:        case NodeType::Number:
      52*:   73:            return visitNumberNode(dynamic_cast<Number*>(node.get()), context);
       52:   73-block  0
call    0 returned 52
branch  1 taken 52 (fallthrough)
branch  2 taken 0
       52:   73-block  1
    %%%%%:   73-block  2
       52:   73-block  3
call    3 returned 52
        1:   74:        case NodeType::String:
       1*:   75:            return visitStringNode(dynamic_cast<StringNode*>(node.get()), context);
        1:   75-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   75-block  1
    %%%%%:   75-block  2
        1:   75-block  3
call    3 returned 1
       28:   76:        case NodeType::BinaryOperator:
      28*:   77:            return visitBinaryOpNode(dynamic_cast<BinaryOperator*>(node.get()), context);
       28:   77-block  0
call    0 returned 28
branch  1 taken 28 (fallthrough)
branch  2 taken 0
       28:   77-block  1
    %%%%%:   77-block  2
       28:   77-block  3
call    3 returned 28
        2:   78:        case NodeType::UnaryOperator:
       2*:   79:            return visitUnaryOpNode(dynamic_cast<UnaryOperator*>(node.get()), context);
        2:   79-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2:   79-block  1
    %%%%%:   79-block  2
        2:   79-block  3
call    3 returned 2
       13:   80:        case NodeType::VarAccess:
      13*:   81:            return visitVarAccessNode(dynamic_cast<VarAccess*>(node.get()), context);
       13:   81-block  0
call    0 returned 13
branch  1 taken 13 (fallthrough)
branch  2 taken 0
       13:   81-block  1
    %%%%%:   81-block  2
       13:   81-block  3
call    3 returned 13
        1:   82:        case NodeType::VarAssgnment:
       1*:   83:            return visitVarAssignNode(dynamic_cast<VarAssignment*>(node.get()), context);
        1:   83-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   83-block  1
    %%%%%:   83-block  2
        1:   83-block  3
call    3 returned 1
       11:   84:        case NodeType::VarIncrement:
      11*:   85:            return visitVarIncrementNode(dynamic_cast<VarIncrement*>(node.get()), context);
       11:   85-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0
       11:   85-block  1
    %%%%%:   85-block  2
       11:   85-block  3
call    3 returned 11
        1:   86:        case NodeType::VarDecrement:
       1*:   87:            return visitVarDecrementNode(dynamic_cast<VarDecrement*>(node.get()), context);
        1:   87-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   87-block  1
    %%%%%:   87-block  2
        1:   87-block  3
call    3 returned 1
        1:   88:        case NodeType::LibCall:
       1*:   89:            return visitLibCallNode(dynamic_cast<LibCall*>(node.get()), context);
        1:   89-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   89-block  1
    %%%%%:   89-block  2
        1:   89-block  3
call    3 returned 1
        1:   90:        case NodeType::IfStmt:
       1*:   91:            return visitIfStmtNode(dynamic_cast<IfStmt*>(node.get()), context);
        1:   91-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   91-block  1
    %%%%%:   91-block  2
        1:   91-block  3
call    3 returned 1
        1:   92:        case NodeType::WhileStmt:
       1*:   93:            return visitWhileStmtNode(dynamic_cast<WhileStmt*>(node.get()), context);
        1:   93-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   93-block  1
    %%%%%:   93-block  2
        1:   93-block  3
call    3 returned 1
    #####:   94:        case NodeType::ForStmt:
    #####:   95:            return visitForStmtNode(dynamic_cast<ForStmt*>(node.get()), context);
    %%%%%:   95-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:   95-block  1
    %%%%%:   95-block  2
    %%%%%:   95-block  3
call    3 never executed
        1:   96:        case NodeType::FuncDef:
       1*:   97:            return visitFuncDefNode(dynamic_cast<FuncDef*>(node.get()), context);
        1:   97-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   97-block  1
    %%%%%:   97-block  2
        1:   97-block  3
call    3 returned 1
        1:   98:        case NodeType::FuncCall:
       1*:   99:            return visitFuncCallNode(dynamic_cast<FuncCall*>(node.get()), context);
        1:   99-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   99-block  1
    %%%%%:   99-block  2
        1:   99-block  3
call    3 returned 1
        1:  100:        case NodeType::ReturnCall:
       1*:  101:            return visitReturnCallNode(dynamic_cast<ReturnCall*>(node.get()), context);
        1:  101-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  101-block  1
    %%%%%:  101-block  2
        1:  101-block  3
call    3 returned 0
    #####:  102:        default:
    #####:  103:            throw VisRunTimeError("visit node method not defined");
    %%%%%:  103-block  0
call    0 never executed
    %%%%%:  103-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  103-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  103-block  3
call    7 never executed
call    8 never executed
    $$$$$:  103-block  4
call    9 never executed
    $$$$$:  103-block  5
    $$$$$:  103-block  6
    $$$$$:  103-block  7
call   10 never executed
        -:  104:    }
        -:  105:}
        -:  106:
function _ZN11Interpreter15visitNumberNodeEPK6NumberP7Context called 52 returned 100% blocks executed 45%
       52:  107:std::unique_ptr<Literal> Interpreter::visitNumberNode(const Number* node, Context* context) {
       52:  108:    const Token token = node->getToken();
       52:  108-block  0
call    0 returned 52
branch  1 taken 52 (fallthrough)
branch  2 taken 0 (throw)
       52:  109:    const TokenType type = token.getType();
       52:  109-block  0
call    0 returned 52
branch  1 taken 52 (fallthrough)
branch  2 taken 0 (throw)
       52:  110:    std::unique_ptr<Literal> numberLiteral = nullptr;
       52:  110-block  0
call    0 returned 52
       52:  111:    if (type == TokenType::INT) {
branch  0 taken 51 (fallthrough)
branch  1 taken 1
       51:  112:        const int value = std::get<int>(token.getValue());
       51:  112-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51:  112-block  1
call    3 returned 51
branch  4 taken 51 (fallthrough)
branch  5 taken 0 (throw)
       51:  112-block  2
call    6 returned 51
    $$$$$:  112-block  3
call    7 never executed
    $$$$$:  112-block  4
       51:  113:        numberLiteral = std::make_unique<IntLiteral>(value);
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51:  113-block  0
call    3 returned 51
call    4 returned 51
    $$$$$:  113-block  1
        -:  114:    }
        1:  115:    else if (type == TokenType::FLOAT) {
        1:  115-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  116:        const float value = std::get<float>(token.getValue());
        1:  116-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  116-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  116-block  2
call    6 returned 1
    $$$$$:  116-block  3
call    7 never executed
    $$$$$:  116-block  4
        1:  117:        numberLiteral = std::make_unique<FloatLiteral>(value);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  117-block  0
call    3 returned 1
call    4 returned 1
    $$$$$:  117-block  1
        -:  118:    }
        -:  119:    else {
    #####:  120:        throw VisRunTimeError("When visiting number node was provided token of type <" + tokenTypeToStr(type) +
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  120-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  120-block  2
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$:  120-block  3
call    9 never executed
    $$$$$:  120-block  4
call   10 never executed
    $$$$$:  120-block  5
call   11 never executed
    $$$$$:  120-block  6
    $$$$$:  120-block  7
    $$$$$:  120-block  8
    #####:  121:            "> instead of INT or FLOAT");
    %%%%%:  121-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  121-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
    $$$$$:  121-block  2
call    8 never executed
        -:  122:    }
       52:  123:    numberLiteral->setPosition(token.getPos());
       52:  123-block  0
call    0 returned 52
call    1 returned 52
branch  2 taken 52 (fallthrough)
branch  3 taken 0 (throw)
       52:  123-block  1
call    4 returned 52
branch  5 taken 52 (fallthrough)
branch  6 taken 0 (throw)
       52:  123-block  2
call    7 returned 52
    $$$$$:  123-block  3
call    8 never executed
    $$$$$:  123-block  4
       52:  124:    numberLiteral->setContext(context);
call    0 returned 52
call    1 returned 52
branch  2 taken 52 (fallthrough)
branch  3 taken 0 (throw)
      104:  125:    return numberLiteral;
       52:  125-block  0
       52:  125-block  1
       52:  126:}
       52:  126-block  0
call    0 returned 52
    $$$$$:  126-block  1
call    1 never executed
    $$$$$:  126-block  2
call    2 never executed
        -:  127:
function _ZN11Interpreter15visitStringNodeEPK10StringNodeP7Context called 1 returned 100% blocks executed 61%
        1:  128:std::unique_ptr<Literal> Interpreter::visitStringNode(const StringNode* node, Context* context) {
        1:  129:    const Token token = node->getToken();
        1:  129-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  130:    const std::string value = std::get<std::string>(token.getValue());
        1:  130-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  130-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  130-block  2
call    6 returned 1
call    7 returned 1
    $$$$$:  130-block  3
call    8 never executed
    $$$$$:  130-block  4
        1:  131:    std::unique_ptr<Literal> stringLiteral = std::make_unique<StringLiteral>(value);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  131-block  0
call    3 returned 1
call    4 returned 1
    $$$$$:  131-block  1
        1:  132:    stringLiteral->setPosition(token.getPos());
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  132-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  132-block  1
call    7 returned 1
    $$$$$:  132-block  2
call    8 never executed
    $$$$$:  132-block  3
        1:  133:    stringLiteral->setContext(context);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2:  134:    return stringLiteral;
        1:  134-block  0
        1:  134-block  1
        1:  135:}
        1:  135-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:  135-block  1
call    2 never executed
    $$$$$:  135-block  2
call    3 never executed
    $$$$$:  135-block  3
call    4 never executed
        -:  136:
function _ZN11Interpreter17visitBinaryOpNodeEPK14BinaryOperatorP7Context called 28 returned 100% blocks executed 62%
       28:  137:std::unique_ptr<Literal> Interpreter::visitBinaryOpNode(const BinaryOperator *node, Context *context) {
       28:  138:    const Token token = node->getToken();
       28:  138-block  0
call    0 returned 28
branch  1 taken 28 (fallthrough)
branch  2 taken 0 (throw)
       28:  139:    const std::unique_ptr<Node> &left = node->getLeftNode();
       28:  139-block  0
call    0 returned 28
branch  1 taken 28 (fallthrough)
branch  2 taken 0 (throw)
       28:  140:    const Operator operatorNode = node->getOperatorNode();
       28:  140-block  0
call    0 returned 28
branch  1 taken 28 (fallthrough)
branch  2 taken 0 (throw)
       28:  141:    const std::unique_ptr<Node> &right = node->getRightNode();
       28:  141-block  0
call    0 returned 28
branch  1 taken 28 (fallthrough)
branch  2 taken 0 (throw)
       28:  142:    const std::unique_ptr<Literal> leftvalue = visit(left, context);
       28:  142-block  0
call    0 returned 28
branch  1 taken 28 (fallthrough)
branch  2 taken 0 (throw)
       28:  143:    const std::unique_ptr<Literal> rightvalue = visit(right, context);
       28:  143-block  0
call    0 returned 28
branch  1 taken 28 (fallthrough)
branch  2 taken 0 (throw)
       28:  144:    std::unique_ptr<Literal> uniqueLiteral;
       28:  145:    switch (operatorNode.getToken().getType()) {
       28:  145-block  0
call    0 returned 28
branch  1 taken 28 (fallthrough)
branch  2 taken 0 (throw)
       28:  145-block  1
call    3 returned 28
branch  4 taken 28 (fallthrough)
branch  5 taken 0 (throw)
       28:  145-block  2
call    6 returned 28
branch  7 taken 2
branch  8 taken 1
branch  9 taken 1
branch 10 taken 1
branch 11 taken 1
branch 12 taken 1
branch 13 taken 1
branch 14 taken 13
branch 15 taken 1
branch 16 taken 1
branch 17 taken 1
branch 18 taken 4
branch 19 taken 0
    $$$$$:  145-block  3
call   20 never executed
    $$$$$:  145-block  4
        2:  146:        case TokenType::PLUS:
        2:  147:            uniqueLiteral = leftvalue->add(*rightvalue);
        2:  147-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2:  147-block  1
call    5 returned 2
call    6 returned 2
    $$$$$:  147-block  2
        2:  148:            break;
        1:  149:        case TokenType::MINUS:
        1:  150:            uniqueLiteral = leftvalue->subtract(*rightvalue);
        1:  150-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  150-block  1
call    5 returned 1
call    6 returned 1
    $$$$$:  150-block  2
        1:  151:            break;
        1:  152:        case TokenType::MUL:
        1:  153:            uniqueLiteral = leftvalue->multiply(*rightvalue);
        1:  153-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  153-block  1
call    5 returned 1
call    6 returned 1
    $$$$$:  153-block  2
        1:  154:            break;
        1:  155:        case TokenType::DIV:
        1:  156:            uniqueLiteral = leftvalue->divide(*rightvalue);
        1:  156-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  156-block  1
call    5 returned 1
call    6 returned 1
    $$$$$:  156-block  2
        1:  157:            break;
        1:  158:        case TokenType::MOD:
        1:  159:            uniqueLiteral = leftvalue->modulo(*rightvalue);
        1:  159-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  159-block  1
call    5 returned 1
call    6 returned 1
    $$$$$:  159-block  2
        1:  160:            break;
        1:  161:        case TokenType::TRUEEQUALS:
        1:  162:            uniqueLiteral = leftvalue->compareTE(*rightvalue);
        1:  162-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  162-block  1
call    5 returned 1
call    6 returned 1
    $$$$$:  162-block  2
        1:  163:            break;
        1:  164:        case TokenType::NOTEQUAL:
        1:  165:            uniqueLiteral = leftvalue->compareNE(*rightvalue);
        1:  165-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  165-block  1
call    5 returned 1
call    6 returned 1
    $$$$$:  165-block  2
        1:  166:            break;
       13:  167:        case TokenType::LESSTHAN:
       13:  168:            uniqueLiteral = leftvalue->compareLT(*rightvalue);
       13:  168-block  0
call    0 returned 13
call    1 returned 13
call    2 returned 13
branch  3 taken 13 (fallthrough)
branch  4 taken 0 (throw)
       13:  168-block  1
call    5 returned 13
call    6 returned 13
    $$$$$:  168-block  2
       13:  169:            break;
        1:  170:        case TokenType::LESSEQUAL:
        1:  171:            uniqueLiteral = leftvalue->compareLTE(*rightvalue);
        1:  171-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  171-block  1
call    5 returned 1
call    6 returned 1
    $$$$$:  171-block  2
        1:  172:            break;
        1:  173:        case TokenType::GREATERTHAN:
        1:  174:            uniqueLiteral = leftvalue->compareGT(*rightvalue);
        1:  174-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  174-block  1
call    5 returned 1
call    6 returned 1
    $$$$$:  174-block  2
        1:  175:            break;
        1:  176:        case TokenType::GREATEREQUAL:
        1:  177:            uniqueLiteral = leftvalue->compareGTE(*rightvalue);
        1:  177-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  177-block  1
call    5 returned 1
call    6 returned 1
    $$$$$:  177-block  2
        1:  178:            break;
        4:  179:        case TokenType::KEYWORD:
       12:  180:            if (operatorNode.getToken().matches(TokenType::KEYWORD, "and")) {
        4:  180-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  180-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4:  180-block  2
call    6 returned 4
branch  7 taken 4 (fallthrough)
branch  8 taken 0 (throw)
        4:  180-block  3
call    9 returned 4
call   10 returned 4
branch 11 taken 2 (fallthrough)
branch 12 taken 2
    $$$$$:  180-block  4
call   13 never executed
    $$$$$:  180-block  5
    $$$$$:  180-block  6
    $$$$$:  180-block  7
call   14 never executed
    $$$$$:  180-block  8
        2:  181:                uniqueLiteral = leftvalue->andWith(*rightvalue);
        2:  181-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2:  181-block  1
call    5 returned 2
call    6 returned 2
    $$$$$:  181-block  2
        2:  182:                break;
        -:  183:            }
        6:  184:            else if (operatorNode.getToken().matches(TokenType::KEYWORD, "or")) {
        2:  184-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  184-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  184-block  2
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
        2:  184-block  3
call    9 returned 2
call   10 returned 2
branch 11 taken 2 (fallthrough)
branch 12 taken 0
    $$$$$:  184-block  4
call   13 never executed
    $$$$$:  184-block  5
    $$$$$:  184-block  6
    $$$$$:  184-block  7
call   14 never executed
    $$$$$:  184-block  8
        2:  185:                uniqueLiteral = leftvalue->orWith(*rightvalue);
        2:  185-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2:  185-block  1
call    5 returned 2
call    6 returned 2
    $$$$$:  185-block  2
        2:  186:                break;
        -:  187:            }
        -:  188:        default:
        -:  189:            throw ParseError("did not recognise token <"
    #####:  190:                + tokenTypeToStr(operatorNode.getToken().getType())
    %%%%%:  190-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  190-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  190-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$:  190-block  3
call   12 never executed
    $$$$$:  190-block  4
call   13 never executed
    $$$$$:  190-block  5
call   14 never executed
    $$$$$:  190-block  6
    $$$$$:  190-block  7
    $$$$$:  190-block  8
    #####:  191:                + "> inside binary opertaion instead expected: PLUS, MINUS, MUL, DIV");
    %%%%%:  191-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  191-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  191-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  191-block  3
call   10 never executed
call   11 never executed
    $$$$$:  191-block  4
call   12 never executed
    $$$$$:  191-block  5
    $$$$$:  191-block  6
call   13 never executed
        -:  192:    }
       28:  193:    uniqueLiteral->setPosition(token.getPos());
       28:  193-block  0
call    0 returned 28
call    1 returned 28
branch  2 taken 28 (fallthrough)
branch  3 taken 0 (throw)
       28:  193-block  1
call    4 returned 28
branch  5 taken 28 (fallthrough)
branch  6 taken 0 (throw)
       28:  193-block  2
call    7 returned 28
    $$$$$:  193-block  3
call    8 never executed
    $$$$$:  193-block  4
       28:  194:    uniqueLiteral->setContext(context);
call    0 returned 28
call    1 returned 28
branch  2 taken 28 (fallthrough)
branch  3 taken 0 (throw)
       56:  195:    return uniqueLiteral;
       28:  195-block  0
       28:  195-block  1
       28:  196:}
       28:  196-block  0
call    0 returned 28
call    1 returned 28
call    2 returned 28
call    3 returned 28
    $$$$$:  196-block  1
call    4 never executed
    $$$$$:  196-block  2
call    5 never executed
    $$$$$:  196-block  3
call    6 never executed
    $$$$$:  196-block  4
call    7 never executed
    $$$$$:  196-block  5
call    8 never executed
        -:  197:
function _ZN11Interpreter16visitUnaryOpNodeEPK13UnaryOperatorP7Context called 2 returned 100% blocks executed 44%
        2:  198:std::unique_ptr<Literal> Interpreter::visitUnaryOpNode(const UnaryOperator* node, Context* context) {
        2:  199:    const Token token = node->getToken();
        2:  199-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  200:    const Operator operatorNode = node->getOperator();
        2:  200-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  201:    const std::unique_ptr<Literal> valueLiteral = visit(node->getValue(), context);
        2:  201-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  201-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  202:    std::unique_ptr<Literal> returnLiteral;
        2:  203:    if(operatorNode.getToken().getType() == TokenType::MINUS) {
        2:  203-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  203-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  203-block  2
call    6 returned 2
branch  7 taken 1 (fallthrough)
branch  8 taken 1
    $$$$$:  203-block  3
call    9 never executed
    $$$$$:  203-block  4
        1:  204:        returnLiteral = valueLiteral->multiply(IntLiteral(-1));
        1:  204-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  204-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  204-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$:  204-block  3
call   10 never executed
    $$$$$:  204-block  4
    $$$$$:  204-block  5
        -:  205:    }
        3:  206:    else if (operatorNode.getToken().matches(TokenType::KEYWORD, "not")) {
        1:  206-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  206-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  206-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  206-block  3
call    9 returned 1
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0
    $$$$$:  206-block  4
call   13 never executed
    $$$$$:  206-block  5
    $$$$$:  206-block  6
    $$$$$:  206-block  7
call   14 never executed
    $$$$$:  206-block  8
        1:  207:        returnLiteral = valueLiteral->notSelf();
        1:  207-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  207-block  1
call    4 returned 1
call    5 returned 1
    $$$$$:  207-block  2
        -:  208:    }
        -:  209:    else {
        -:  210:        throw ParseError("unknown operator <"
    #####:  211:                + tokenTypeToStr(operatorNode.getToken().getType())
    %%%%%:  211-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  211-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  211-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$:  211-block  3
call   12 never executed
    $$$$$:  211-block  4
call   13 never executed
    $$$$$:  211-block  5
call   14 never executed
    $$$$$:  211-block  6
    $$$$$:  211-block  7
    $$$$$:  211-block  8
    #####:  212:                + "> for unary operation, expected MINUS or KEYWORD<not>");
    %%%%%:  212-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  212-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  212-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  212-block  3
call   10 never executed
call   11 never executed
    $$$$$:  212-block  4
call   12 never executed
    $$$$$:  212-block  5
    $$$$$:  212-block  6
call   13 never executed
        -:  213:    }
        2:  214:    returnLiteral->setPosition(token.getPos());
        2:  214-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  214-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2:  214-block  2
call    7 returned 2
    $$$$$:  214-block  3
call    8 never executed
    $$$$$:  214-block  4
        2:  215:    returnLiteral->setContext(context);
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        4:  216:    return returnLiteral;
        2:  216-block  0
        2:  216-block  1
        2:  217:}
        2:  217-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
    $$$$$:  217-block  1
call    3 never executed
    $$$$$:  217-block  2
call    4 never executed
    $$$$$:  217-block  3
call    5 never executed
    $$$$$:  217-block  4
call    6 never executed
        -:  218:
function _ZN11Interpreter18visitVarAssignNodeEPK13VarAssignmentP7Context called 1 returned 100% blocks executed 58%
        1:  219:std::unique_ptr<Literal> Interpreter::visitVarAssignNode(const VarAssignment *node, Context *context) {
        1:  220:    const std::string varName = std::get<std::string>(node->getToken().getValue());
        1:  220-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  220-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  220-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  220-block  3
call    9 returned 1
call   10 returned 1
call   11 returned 1
    $$$$$:  220-block  4
call   12 never executed
    $$$$$:  220-block  5
call   13 never executed
    $$$$$:  220-block  6
    $$$$$:  220-block  7
        1:  221:    auto literalValue = std::unique_ptr(visit(node->getValue(), context));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  221-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  222:    std::unique_ptr<Literal> clonedValue = literalValue->clone();
        1:  222-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  223:    context->getSymbolTable().set(varName, std::move(literalValue));
        1:  223-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  223-block  1
call    3 returned 1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:  223-block  2
call    8 returned 1
    $$$$$:  223-block  3
call    9 never executed
    $$$$$:  223-block  4
        2:  224:    return clonedValue;
        1:  224-block  0
        1:  225:}
        1:  225-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:  225-block  1
call    2 never executed
    $$$$$:  225-block  2
call    3 never executed
    $$$$$:  225-block  3
call    4 never executed
        -:  226:
function _ZN11Interpreter18visitVarAccessNodeEPK9VarAccessP7Context called 13 returned 100% blocks executed 44%
       13:  227:std::unique_ptr<Literal> Interpreter::visitVarAccessNode(const VarAccess *node, Context* context) {
       13:  228:    const std::string varName = std::get<std::string>(node->getToken().getValue());
       13:  228-block  0
call    0 returned 13
branch  1 taken 13 (fallthrough)
branch  2 taken 0 (throw)
       13:  228-block  1
call    3 returned 13
branch  4 taken 13 (fallthrough)
branch  5 taken 0 (throw)
       13:  228-block  2
call    6 returned 13
branch  7 taken 13 (fallthrough)
branch  8 taken 0 (throw)
       13:  228-block  3
call    9 returned 13
call   10 returned 13
call   11 returned 13
    $$$$$:  228-block  4
call   12 never executed
    $$$$$:  228-block  5
call   13 never executed
    $$$$$:  228-block  6
    $$$$$:  228-block  7
       13:  229:    std::unique_ptr<Literal> value = context->getSymbolTable().getLiteral(varName)->clone();
call    0 returned 13
branch  1 taken 13 (fallthrough)
branch  2 taken 0 (throw)
       13:  229-block  0
call    3 returned 13
branch  4 taken 13 (fallthrough)
branch  5 taken 0 (throw)
       13:  229-block  1
call    6 returned 13
branch  7 taken 13 (fallthrough)
branch  8 taken 0 (throw)
       13:  230:    if (not value) {
       13:  230-block  0
call    0 returned 13
branch  1 taken 0 (fallthrough)
branch  2 taken 13
    #####:  231:        throw VisRunTimeError("unknown variable " + varName);
    %%%%%:  231-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  231-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  231-block  2
call    7 never executed
call    8 never executed
    $$$$$:  231-block  3
call    9 never executed
    $$$$$:  231-block  4
    $$$$$:  231-block  5
call   10 never executed
        -:  232:    }
       26:  233:    return value;
       13:  233-block  0
       13:  233-block  1
       13:  234:}
       13:  234-block  0
call    0 returned 13
    $$$$$:  234-block  1
call    1 never executed
    $$$$$:  234-block  2
call    2 never executed
        -:  235:
function _ZN11Interpreter21visitVarIncrementNodeEPK12VarIncrementP7Context called 11 returned 100% blocks executed 51%
       11:  236:std::unique_ptr<Literal> Interpreter::visitVarIncrementNode(const VarIncrement *node, Context* context) {
       11:  237:    const std::string varName = std::get<std::string>(node->getToken().getValue());
       11:  237-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:  237-block  1
call    3 returned 11
branch  4 taken 11 (fallthrough)
branch  5 taken 0 (throw)
       11:  237-block  2
call    6 returned 11
branch  7 taken 11 (fallthrough)
branch  8 taken 0 (throw)
       11:  237-block  3
call    9 returned 11
call   10 returned 11
call   11 returned 11
    $$$$$:  237-block  4
call   12 never executed
    $$$$$:  237-block  5
call   13 never executed
    $$$$$:  237-block  6
    $$$$$:  237-block  7
       11:  238:    std::unique_ptr<Literal> value = context->getSymbolTable().getLiteral(varName)->clone();
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:  238-block  0
call    3 returned 11
branch  4 taken 11 (fallthrough)
branch  5 taken 0 (throw)
       11:  238-block  1
call    6 returned 11
branch  7 taken 11 (fallthrough)
branch  8 taken 0 (throw)
      11*:  239:    if (not value) {throw VisRunTimeError("unknown variable " + varName);}
       11:  239-block  0
call    0 returned 11
branch  1 taken 0 (fallthrough)
branch  2 taken 11
    %%%%%:  239-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  239-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  239-block  3
call   10 never executed
call   11 never executed
    $$$$$:  239-block  4
call   12 never executed
    $$$$$:  239-block  5
    $$$$$:  239-block  6
call   13 never executed
       11:  240:    value = value->add(IntLiteral(1));
       11:  240-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
       11:  240-block  1
call    4 returned 11
branch  5 taken 11 (fallthrough)
branch  6 taken 0 (throw)
       11:  240-block  2
call    7 returned 11
call    8 returned 11
call    9 returned 11
    $$$$$:  240-block  3
call   10 never executed
    $$$$$:  240-block  4
    $$$$$:  240-block  5
       11:  241:    std::unique_ptr<Literal> clonedValue = value->clone();
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
       11:  242:    context->getSymbolTable().set(varName, std::move(value));
       11:  242-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:  242-block  1
call    3 returned 11
call    4 returned 11
call    5 returned 11
branch  6 taken 11 (fallthrough)
branch  7 taken 0 (throw)
       11:  242-block  2
call    8 returned 11
    $$$$$:  242-block  3
call    9 never executed
    $$$$$:  242-block  4
       22:  243:    return clonedValue;
       11:  243-block  0
       11:  244:}
       11:  244-block  0
call    0 returned 11
call    1 returned 11
    $$$$$:  244-block  1
call    2 never executed
    $$$$$:  244-block  2
call    3 never executed
    $$$$$:  244-block  3
call    4 never executed
        -:  245:
function _ZN11Interpreter21visitVarDecrementNodeEPK12VarDecrementP7Context called 1 returned 100% blocks executed 51%
        1:  246:std::unique_ptr<Literal> Interpreter::visitVarDecrementNode(const VarDecrement *node, Context* context) {
        1:  247:    const std::string varName = std::get<std::string>(node->getToken().getValue());
        1:  247-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  247-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  247-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  247-block  3
call    9 returned 1
call   10 returned 1
call   11 returned 1
    $$$$$:  247-block  4
call   12 never executed
    $$$$$:  247-block  5
call   13 never executed
    $$$$$:  247-block  6
    $$$$$:  247-block  7
        1:  248:    std::unique_ptr<Literal> value = context->getSymbolTable().getLiteral(varName)->clone();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  248-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  248-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
       1*:  249:    if (not value) {throw VisRunTimeError("unknown variable " + varName);}
        1:  249-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  249-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  249-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  249-block  3
call   10 never executed
call   11 never executed
    $$$$$:  249-block  4
call   12 never executed
    $$$$$:  249-block  5
    $$$$$:  249-block  6
call   13 never executed
        1:  250:    value = value->subtract(IntLiteral(1));
        1:  250-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  250-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  250-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$:  250-block  3
call   10 never executed
    $$$$$:  250-block  4
    $$$$$:  250-block  5
        1:  251:    std::unique_ptr<Literal> clonedValue = value->clone();
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  252:    context->getSymbolTable().set(varName, std::move(value));
        1:  252-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  252-block  1
call    3 returned 1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:  252-block  2
call    8 returned 1
    $$$$$:  252-block  3
call    9 never executed
    $$$$$:  252-block  4
        2:  253:    return clonedValue;
        1:  253-block  0
        1:  254:}
        1:  254-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:  254-block  1
call    2 never executed
    $$$$$:  254-block  2
call    3 never executed
    $$$$$:  254-block  3
call    4 never executed
        -:  255:
function _ZN11Interpreter16visitLibCallNodeEPK7LibCallP7Context called 1 returned 100% blocks executed 56%
        1:  256:std::unique_ptr<Literal> Interpreter::visitLibCallNode(const LibCall *node, Context *context) {
        1:  257:    const std::string &libFunc = std::get<std::string>(node->getToken().getValue());
        1:  257-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  257-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  257-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  257-block  3
call    9 returned 1
call   10 returned 1
    $$$$$:  257-block  4
call   11 never executed
    $$$$$:  257-block  5
call   12 never executed
    $$$$$:  257-block  6
    $$$$$:  257-block  7
call   13 never executed
        1:  258:    if (libFunc == "out") {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        2:  259:        for (const auto& argumentNode : node->getArgumentNodes()) {
        1:  259-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  259-block  1
call    3 returned 1
call    4 returned 1
        1:  259-block  2
call    5 returned 1
call    6 returned 1
        2:  259-block  3
call    7 returned 2
branch  8 taken 1
branch  9 taken 1 (fallthrough)
        1:  260:            if (const std::unique_ptr<Literal> returnLiteral = visit(argumentNode, context)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  260-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  261:                std::cout << returnLiteral->getStringValue() << " ";
        1:  261-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  261-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  261-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  261-block  3
call   10 returned 1
    $$$$$:  261-block  4
call   11 never executed
    $$$$$:  261-block  5
        1:  262:            }
        1:  262-block  0
call    0 returned 1
    $$$$$:  262-block  1
call    1 never executed
        -:  263:        }
        1:  264:        std::cout << std::endl;
        1:  264-block  0
call    0 returned 1
        -:  265:    } else {
    #####:  266:        throw VisRunTimeError("libCall was made to an unknown function: " + libFunc);
    %%%%%:  266-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  266-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  266-block  2
call    7 never executed
call    8 never executed
    $$$$$:  266-block  3
call    9 never executed
    $$$$$:  266-block  4
    $$$$$:  266-block  5
call   10 never executed
        -:  267:    }
        1:  268:    return nullptr;
call    0 returned 1
        -:  269:}
        -:  270:
function _ZN11Interpreter15visitIfStmtNodeEPK6IfStmtP7Context called 1 returned 100% blocks executed 78%
        1:  271:std::unique_ptr<Literal> Interpreter::visitIfStmtNode(const IfStmt* node, Context* context) {
        1:  272:    std::unique_ptr<Literal> comparisonResult = visit(node->getComparison(), context);
        1:  272-block  0
call    0 returned 1
call    1 returned 1
        -:  273:    const std::vector<std::unique_ptr<Node>>& executableNodes =
       1*:  274:        comparisonResult->getBoolValue() ? node->getIfBlock() : node->getElseBlock();
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  274-block  0
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  274-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  274-block  2
    %%%%%:  274-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  274-block  4
        2:  275:    for (const std::unique_ptr<Node>& executableNode : executableNodes) {
        1:  275-block  0
call    0 returned 1
call    1 returned 1
        1:  275-block  1
call    2 returned 1
        2:  275-block  2
call    3 returned 2
branch  4 taken 1
branch  5 taken 1 (fallthrough)
        1:  276:        visit(executableNode, context);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  276-block  0
call    3 returned 1
call    4 returned 1
    $$$$$:  276-block  1
        -:  277:    }
        1:  278:    return comparisonResult;
        1:  278-block  0
        1:  278-block  1
    =====:  279:}
    $$$$$:  279-block  0
call    0 never executed
        -:  280:
function _ZN11Interpreter18visitWhileStmtNodeEPK9WhileStmtP7Context called 1 returned 100% blocks executed 79%
        1:  281:std::unique_ptr<Literal> Interpreter::visitWhileStmtNode(const WhileStmt* node, Context* context) {
        1:  282:    std::unique_ptr<Literal> comparisonResult = visit(node->getComparison(), context);
        1:  282-block  0
call    0 returned 1
call    1 returned 1
        1:  283:    const std::vector<std::unique_ptr<Node>>& executableNodes = node->getWhileBlock();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       11:  284:    while (visit(node->getComparison(), context)->getBoolValue()) {
        1:  284-block  0
       11:  284-block  1
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:  284-block  2
call    3 returned 11
branch  4 taken 11 (fallthrough)
branch  5 taken 0 (throw)
       11:  284-block  3
call    6 returned 11
call    7 returned 11
branch  8 taken 11 (fallthrough)
branch  9 taken 0 (throw)
       11:  284-block  4
call   10 returned 11
branch 11 taken 10
branch 12 taken 1 (fallthrough)
    $$$$$:  284-block  5
call   13 never executed
    $$$$$:  284-block  6
       20:  285:        for (const std::unique_ptr<Node>& executableNode : executableNodes) {
       10:  285-block  0
call    0 returned 10
call    1 returned 10
       10:  285-block  1
call    2 returned 10
       20:  285-block  2
call    3 returned 20
branch  4 taken 10
branch  5 taken 10 (fallthrough)
       10:  286:            visit(executableNode, context);
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:  286-block  0
call    3 returned 10
call    4 returned 10
    $$$$$:  286-block  1
        -:  287:        }
        -:  288:    }
        1:  289:    return comparisonResult;
        1:  289-block  0
        1:  289-block  1
    =====:  290:}
    $$$$$:  290-block  0
call    0 never executed
        -:  291:
function _ZN11Interpreter16visitForStmtNodeEPK7ForStmtP7Context called 0 returned 0% blocks executed 0%
    #####:  292:std::unique_ptr<Literal> Interpreter::visitForStmtNode(const ForStmt* node, Context* context) {
    #####:  293:    visit(node->getVarDeclare(), context);
    %%%%%:  293-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  293-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  293-block  2
call    6 never executed
    $$$$$:  293-block  3
call    7 never executed
    #####:  294:    std::unique_ptr<Literal> comparisonResult = visit(node->getCondition(), context);
call    0 never executed
call    1 never executed
    #####:  295:    const std::vector<std::unique_ptr<Node>>& executableNodes = node->getForBlock();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  296:    while (visit(node->getCondition(), context)->getBoolValue()) {
    %%%%%:  296-block  0
    %%%%%:  296-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  296-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  296-block  3
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  296-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed (fallthrough)
    $$$$$:  296-block  5
call   13 never executed
    $$$$$:  296-block  6
    #####:  297:        for (const std::unique_ptr<Node>& executableNode : executableNodes) {
    %%%%%:  297-block  0
call    0 never executed
call    1 never executed
    %%%%%:  297-block  1
call    2 never executed
    %%%%%:  297-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####:  298:            visit(executableNode, context);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  298-block  0
call    3 never executed
call    4 never executed
    $$$$$:  298-block  1
        -:  299:        }
    #####:  300:        visit(node->getStep(), context);
    %%%%%:  300-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  300-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  300-block  2
call    6 never executed
    $$$$$:  300-block  3
        -:  301:    }
    #####:  302:    return comparisonResult;
    %%%%%:  302-block  0
    %%%%%:  302-block  1
    =====:  303:}
    $$$$$:  303-block  0
call    0 never executed
        -:  304:
function _ZN11Interpreter16visitFuncDefNodeEPK7FuncDefP7Context called 1 returned 100% blocks executed 63%
        1:  305:std::unique_ptr<Literal> Interpreter::visitFuncDefNode(const FuncDef* node, Context* context) {
        1:  306:    auto contextForFunc = std::make_unique<Context>(node->getName());
        1:  306-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  306-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  306-block  2
call    6 returned 1
    $$$$$:  306-block  3
call    7 never executed
    $$$$$:  306-block  4
        1:  307:    contextForFunc->setParentContext(context);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  308:    contextForFunc->setSymbolTable(SymbolTable(&context->getSymbolTable()));
        1:  308-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  308-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  308-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  308-block  3
call   10 returned 1
    $$$$$:  308-block  4
call   11 never executed
    $$$$$:  308-block  5
        -:  309:    // Clone arguments and body
        1:  310:    std::vector<Token> clonedArgs;
call    0 returned 1
        2:  311:    for (const Token& token : node->getArguments()) {clonedArgs.push_back(token.clone());}
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  311-block  0
call    3 returned 1
call    4 returned 1
        1:  311-block  1
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  311-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  311-block  3
call   12 returned 1
call   13 returned 1
        2:  311-block  4
call   14 returned 2
branch 15 taken 1
branch 16 taken 1 (fallthrough)
    $$$$$:  311-block  5
call   17 never executed
    $$$$$:  311-block  6
        1:  312:    std::vector<std::unique_ptr<Node>> clonedBody = Node::cloneNodeVector(node->getFunctionBody());
        1:  312-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  312-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -:  313:    std::unique_ptr<FunctionLiteral> funcLiteral = std::make_unique<FunctionLiteral>(
        2:  314:        node->getName(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  314-block  0
call    3 returned 1
    $$$$$:  314-block  1
call    4 never executed
    $$$$$:  314-block  2
        1:  315:        std::move(clonedArgs),
call    0 returned 1
        1:  316:        std::move(clonedBody),
call    0 returned 1
        1:  317:        std::move(contextForFunc)
        1:  317-block  0
call    0 returned 1
        1:  318:        );
        1:  318-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  319:    funcLiteral->setContext(context);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  320:    funcLiteral->setPosition(node->getToken().getPos());
        1:  320-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  320-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  320-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  320-block  3
call   10 returned 1
call   11 returned 1
    $$$$$:  320-block  4
call   12 never executed
    $$$$$:  320-block  5
call   13 never executed
    $$$$$:  320-block  6
    $$$$$:  320-block  7
        1:  321:    std::cout << *funcLiteral->getScopeContext() << std::endl;
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  321-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:  321-block  1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1:  322:    const std::string funcName = funcLiteral->getName();
        1:  322-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  323:    auto clonedFunc = funcLiteral->clone();
        1:  323-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  324:    clonedFunc->setContext(context);
        1:  324-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  325:    clonedFunc->setPosition(node->getToken().getPos());
        1:  325-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  325-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  325-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  325-block  3
call   10 returned 1
call   11 returned 1
    $$$$$:  325-block  4
call   12 never executed
    $$$$$:  325-block  5
call   13 never executed
    $$$$$:  325-block  6
    $$$$$:  325-block  7
        1:  326:    context->getSymbolTable().set(funcName, std::move(funcLiteral));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  326-block  0
call    3 returned 1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:  326-block  1
call    8 returned 1
    $$$$$:  326-block  2
call    9 never executed
    $$$$$:  326-block  3
        2:  327:    return clonedFunc;
        1:  327-block  0
        1:  328:}
        1:  328-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
    $$$$$:  328-block  1
call    5 never executed
    $$$$$:  328-block  2
call    6 never executed
    $$$$$:  328-block  3
call    7 never executed
    $$$$$:  328-block  4
call    8 never executed
    $$$$$:  328-block  5
call    9 never executed
    $$$$$:  328-block  6
call   10 never executed
        -:  329:
function _ZN11Interpreter17visitFuncCallNodeEPK8FuncCallP7Context called 1 returned 100% blocks executed 47%
        1:  330:std::unique_ptr<Literal> Interpreter::visitFuncCallNode(const FuncCall* node, Context* context) {
        1:  331:    const std::string name = node->getName();
        1:  331-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  332:    Literal* func = context->getSymbolTable().getLiteral(name);
        1:  332-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  332-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
       1*:  333:    const FunctionLiteral* funcLiteral = dynamic_cast<FunctionLiteral*>(func);
        1:  333-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  333-block  1
    %%%%%:  333-block  2
        1:  334:    if (!funcLiteral) {
        1:  334-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  335:        throw VisRunTimeError("function >>> " + name + " <<< called but does not point to a function");
    %%%%%:  335-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  335-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  335-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  335-block  3
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  335-block  4
call   13 never executed
    $$$$$:  335-block  5
call   14 never executed
    $$$$$:  335-block  6
    $$$$$:  335-block  7
    $$$$$:  335-block  8
call   15 never executed
        -:  336:    }
        1:  337:    const std::unique_ptr<Literal> funcClone = funcLiteral->clone();
        1:  337-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  338:    FunctionLiteral* concreteFunc = dynamic_cast<FunctionLiteral*>(funcClone.get());
        1:  338-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  338-block  1
    %%%%%:  338-block  2
        1:  339:    concreteFunc->setContext(funcLiteral->getContext());
        1:  339-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  339-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  340:    concreteFunc->setPosition(funcLiteral->getPosition());
        1:  340-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  340-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  340-block  2
call    6 returned 1
    $$$$$:  340-block  3
call    7 never executed
    $$$$$:  340-block  4
        1:  341:    const auto& funcArgs = funcLiteral->getArgs();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  342:    const auto& passedArgs = node->getArguments();
        1:  342-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  343:    if (funcArgs.size() != passedArgs.size()) {
        1:  343-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  344:        throw VisRunTimeError("function >>> " + name + " <<< was called with incorrect arguments");
    %%%%%:  344-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  344-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  344-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  344-block  3
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  344-block  4
call   13 never executed
    $$$$$:  344-block  5
call   14 never executed
    $$$$$:  344-block  6
    $$$$$:  344-block  7
    $$$$$:  344-block  8
call   15 never executed
        -:  345:    }
        2:  346:    for (int i = 0; i < funcArgs.size(); i++) {
        1:  346-block  0
        2:  346-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1:  347:        std::string argName = std::get<std::string>(funcArgs[i].getValue());
        1:  347-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  347-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  347-block  2
call    7 returned 1
call    8 returned 1
    $$$$$:  347-block  3
call    9 never executed
    $$$$$:  347-block  4
        1:  348:        std::unique_ptr<Literal> value = visit(passedArgs[i], context);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
       1*:  349:        if (!value) {throw InterpretError("function argument evaluated to a null ptr");}
        1:  349-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  349-block  1
call    3 never executed
    %%%%%:  349-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  349-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  349-block  4
call   10 never executed
call   11 never executed
    $$$$$:  349-block  5
call   12 never executed
    $$$$$:  349-block  6
    $$$$$:  349-block  7
    $$$$$:  349-block  8
call   13 never executed
        1:  350:        concreteFunc->getScopeContext()->getSymbolTable().set(argName, std::move(value));
        1:  350-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  350-block  1
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  350-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  350-block  3
call   12 returned 1
    $$$$$:  350-block  4
call   13 never executed
    $$$$$:  350-block  5
        1:  351:    }
call    0 returned 1
call    1 returned 1
    $$$$$:  351-block  0
call    2 never executed
    $$$$$:  351-block  1
call    3 never executed
        -:  352:    try {
       1*:  353:        for (const std::unique_ptr<Node>& bodyNode : funcLiteral->getBody()) {
        1:  353-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  353-block  1
call    3 returned 1
call    4 returned 1
        1:  353-block  2
call    5 returned 1
        1:  353-block  3
call    6 returned 1
branch  7 taken 1
branch  8 taken 0 (fallthrough)
       1*:  354:            visit(bodyNode, concreteFunc->getScopeContext().get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  354-block  0
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1 (throw)
    %%%%%:  354-block  1
call    7 never executed
call    8 never executed
        1:  354-block  2
        -:  355:        }
        -:  356:    }
        1:  357:    catch (ReturnSignal& returnSignal) {
        1:  357-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  357-block  1
call    2 returned 1
        1:  358:        return returnSignal.getValue();
call    0 returned 1
        1:  359:    }
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    #####:  360:    return nullptr;
    %%%%%:  360-block  0
call    0 never executed
        1:  361:}
        1:  361-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:  361-block  1
call    2 never executed
    $$$$$:  361-block  2
call    3 never executed
        -:  362:
function _ZN11Interpreter19visitReturnCallNodeEPK10ReturnCallP7Context called 1 returned 0% blocks executed 100%
        1:  363:std::unique_ptr<Literal> Interpreter::visitReturnCallNode(const ReturnCall* node, Context* context) {
        1:  364:    std::unique_ptr<Literal> returnValue = visit(node->getExpression(), context);
        1:  364-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  364-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  365:    throw ReturnSignal(std::move(returnValue));
        1:  365-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
        1:  366:}
        1:  366-block  0
call    0 returned 1
        -:  367:
        -:  368:
        -:  369:
        -:  370:
