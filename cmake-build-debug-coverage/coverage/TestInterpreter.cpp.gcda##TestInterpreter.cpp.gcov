        -:    0:Source:D:/Project Workspace/Year3/VIS/tests/TestInterpreter.cpp
        -:    0:Graph:D:\Project Workspace\Year3\VIS\cmake-build-debug-coverage\tests\CMakeFiles\vis_tests.dir\TestInterpreter.cpp.gcno
        -:    0:Data:D:\Project Workspace\Year3\VIS\cmake-build-debug-coverage\tests\CMakeFiles\vis_tests.dir\TestInterpreter.cpp.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:#include <fstream>
        -:    3:#include <gtest/gtest.h>
        -:    4:#include <sstream>
        -:    5:#include "Interpreter.h"
        -:    6:#include "TestHelpers.h"
        -:    7:#include "Parser.h"
        -:    8:#include "Literal.h"
        -:    9:#include "Context.h"
        -:   10:
        -:   11:
        4:   12:TEST(HelperFunctionsTest, testPrintTokens) {
        -:   13:    std::map<int, std::vector<Token>> tokenMap = {
    #####:   14:        {0, {
        -:   15:            Token(TokenType::KEYWORD, dummyPos, "func"),
        -:   16:            Token(TokenType::IDENTIFIER, dummyPos, "myFunc")
        -:   17:        }},
    #####:   18:        {1, {
    #####:   19:            Token(TokenType::INT, dummyPos, 42)
        -:   20:        }}
        8:   21:    };
        1:   22:    std::stringstream buffer;
        1:   23:    std::streambuf* oldCout = std::cout.rdbuf(buffer.rdbuf());
        1:   24:    printTokens(tokenMap);
        1:   25:    std::cout.rdbuf(oldCout);
        1:   26:    std::string output = buffer.str();
       1*:   27:    EXPECT_NE(output.find("Line 0:"), std::string::npos);
       1*:   28:    EXPECT_NE(output.find("func"), std::string::npos);
       1*:   29:    EXPECT_NE(output.find("myFunc"), std::string::npos);
       1*:   30:    EXPECT_NE(output.find("Line 1:"), std::string::npos);
       1*:   31:    EXPECT_NE(output.find("42"), std::string::npos);
        9:   32:}
------------------
_ZN40HelperFunctionsTest_testPrintTokens_TestC1Ev:
function _ZN40HelperFunctionsTest_testPrintTokens_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   12:TEST(HelperFunctionsTest, testPrintTokens) {
        1:   12-block  0
call    0 returned 1
------------------
_ZN40HelperFunctionsTest_testPrintTokens_TestD0Ev:
function _ZN40HelperFunctionsTest_testPrintTokens_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   12:TEST(HelperFunctionsTest, testPrintTokens) {
        1:   12-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN40HelperFunctionsTest_testPrintTokens_TestD1Ev:
function _ZN40HelperFunctionsTest_testPrintTokens_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   12:TEST(HelperFunctionsTest, testPrintTokens) {
        1:   12-block  0
call    0 returned 1
------------------
_ZN40HelperFunctionsTest_testPrintTokens_Test8TestBodyEv:
function _ZN40HelperFunctionsTest_testPrintTokens_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1:   12:TEST(HelperFunctionsTest, testPrintTokens) {
        -:   13:    std::map<int, std::vector<Token>> tokenMap = {
    #####:   14:        {0, {
    $$$$$:   14-block  0
        -:   15:            Token(TokenType::KEYWORD, dummyPos, "func"),
        -:   16:            Token(TokenType::IDENTIFIER, dummyPos, "myFunc")
        -:   17:        }},
    #####:   18:        {1, {
    $$$$$:   18-block  0
    #####:   19:            Token(TokenType::INT, dummyPos, 42)
    $$$$$:   19-block  0
        -:   20:        }}
        8:   21:    };
        1:   21-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:   21-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:   21-block  2
call    5 returned 2
        1:   21-block  3
call    6 returned 1
        2:   21-block  4
call    7 returned 2
    $$$$$:   21-block  5
    $$$$$:   21-block  6
    $$$$$:   21-block  7
    $$$$$:   21-block  8
branch  8 never executed (fallthrough)
branch  9 never executed
    $$$$$:   21-block  9
call   10 never executed
    $$$$$:   21-block 10
    $$$$$:   21-block 11
call   11 never executed
    $$$$$:   21-block 12
    $$$$$:   21-block 13
call   12 never executed
    $$$$$:   21-block 14
        1:   22:    std::stringstream buffer;
        1:   23:    std::streambuf* oldCout = std::cout.rdbuf(buffer.rdbuf());
        1:   23-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   24:    printTokens(tokenMap);
        1:   24-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   25:    std::cout.rdbuf(oldCout);
        1:   25-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   26:    std::string output = buffer.str();
        1:   26-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   27:    EXPECT_NE(output.find("Line 0:"), std::string::npos);
        1:   27-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   27-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   27-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:   27-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:   27-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   27-block  5
call   17 never executed
call   18 never executed
        1:   27-block  6
call   19 returned 1
    $$$$$:   27-block  7
    $$$$$:   27-block  8
call   20 never executed
    $$$$$:   27-block  9
    $$$$$:   27-block 10
call   21 never executed
    $$$$$:   27-block 11
    $$$$$:   27-block 12
call   22 never executed
       1*:   28:    EXPECT_NE(output.find("func"), std::string::npos);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   28-block  0
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   28-block  1
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:   28-block  2
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:   28-block  3
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   28-block  4
call   17 never executed
call   18 never executed
        1:   28-block  5
call   19 returned 1
    $$$$$:   28-block  6
    $$$$$:   28-block  7
call   20 never executed
    $$$$$:   28-block  8
    $$$$$:   28-block  9
call   21 never executed
    $$$$$:   28-block 10
    $$$$$:   28-block 11
call   22 never executed
       1*:   29:    EXPECT_NE(output.find("myFunc"), std::string::npos);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   29-block  0
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   29-block  1
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:   29-block  2
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:   29-block  3
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   29-block  4
call   17 never executed
call   18 never executed
        1:   29-block  5
call   19 returned 1
    $$$$$:   29-block  6
    $$$$$:   29-block  7
call   20 never executed
    $$$$$:   29-block  8
    $$$$$:   29-block  9
call   21 never executed
    $$$$$:   29-block 10
    $$$$$:   29-block 11
call   22 never executed
       1*:   30:    EXPECT_NE(output.find("Line 1:"), std::string::npos);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   30-block  0
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   30-block  1
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:   30-block  2
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:   30-block  3
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   30-block  4
call   17 never executed
call   18 never executed
        1:   30-block  5
call   19 returned 1
    $$$$$:   30-block  6
    $$$$$:   30-block  7
call   20 never executed
    $$$$$:   30-block  8
    $$$$$:   30-block  9
call   21 never executed
    $$$$$:   30-block 10
    $$$$$:   30-block 11
call   22 never executed
       1*:   31:    EXPECT_NE(output.find("42"), std::string::npos);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   31-block  0
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   31-block  1
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:   31-block  2
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:   31-block  3
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   31-block  4
call   17 never executed
call   18 never executed
        1:   31-block  5
call   19 returned 1
    $$$$$:   31-block  6
    $$$$$:   31-block  7
call   20 never executed
    $$$$$:   31-block  8
    $$$$$:   31-block  9
call   21 never executed
    $$$$$:   31-block 10
    $$$$$:   31-block 11
call   22 never executed
        9:   32:}
        1:   32-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   32-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   32-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   32-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   32-block  4
        1:   32-block  5
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
        1:   32-block  6
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1:   32-block  7
call   18 returned 1
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0 (throw)
        1:   32-block  8
call   22 returned 1
branch 23 taken 1 (fallthrough)
branch 24 taken 0 (throw)
        1:   32-block  9
call   25 returned 1
branch 26 taken 1 (fallthrough)
branch 27 taken 0 (throw)
        1:   32-block 10
        1:   32-block 11
call   28 returned 1
        2:   32-block 12
branch 29 taken 1 (fallthrough)
branch 30 taken 1
        1:   32-block 13
call   31 returned 1
call   32 returned 1
        3:   32-block 14
branch 33 taken 2 (fallthrough)
branch 34 taken 1
        1:   32-block 15
call   35 returned 1
call   36 returned 1
call   37 returned 1
branch 38 taken 1 (fallthrough)
branch 39 taken 0 (throw)
call   40 returned 1
call   41 returned 1
call   42 returned 1
    $$$$$:   32-block 16
call   43 never executed
    $$$$$:   32-block 17
branch 44 never executed (fallthrough)
branch 45 never executed
    $$$$$:   32-block 18
call   46 never executed
    $$$$$:   32-block 19
    $$$$$:   32-block 20
branch 47 never executed (fallthrough)
branch 48 never executed
    $$$$$:   32-block 21
    $$$$$:   32-block 22
branch 49 never executed (fallthrough)
branch 50 never executed
    $$$$$:   32-block 23
call   51 never executed
    $$$$$:   32-block 24
    $$$$$:   32-block 25
    $$$$$:   32-block 26
call   52 never executed
    $$$$$:   32-block 27
    $$$$$:   32-block 28
branch 53 never executed (fallthrough)
branch 54 never executed
    $$$$$:   32-block 29
call   55 never executed
    $$$$$:   32-block 30
    $$$$$:   32-block 31
call   56 never executed
    $$$$$:   32-block 32
    $$$$$:   32-block 33
branch 57 never executed (fallthrough)
branch 58 never executed
    $$$$$:   32-block 34
    $$$$$:   32-block 35
branch 59 never executed (fallthrough)
branch 60 never executed
    $$$$$:   32-block 36
call   61 never executed
    $$$$$:   32-block 37
    $$$$$:   32-block 38
    $$$$$:   32-block 39
branch 62 never executed (fallthrough)
branch 63 never executed
    $$$$$:   32-block 40
    $$$$$:   32-block 41
branch 64 never executed (fallthrough)
branch 65 never executed
    $$$$$:   32-block 42
call   66 never executed
    $$$$$:   32-block 43
call   67 never executed
    $$$$$:   32-block 44
call   68 never executed
    $$$$$:   32-block 45
call   69 never executed
------------------
        -:   33:
        4:   34:TEST(InterpreterTest, testInterpretFileFunction) {
        2:   35:    std::string filename = "temp_test.vis";
        1:   36:    std::string source = "var x = 10\nx + 10\n";
        1:   37:    std::ofstream tempFile(filename);
       1*:   38:    ASSERT_TRUE(tempFile.is_open());
        1:   39:    tempFile << source;
        1:   40:    tempFile.close();
       1*:   41:    EXPECT_NO_THROW({Interpreter::interpretFile(filename, false);});
        1:   42:    std::remove(filename.c_str());
        1:   43:}
------------------
_ZN46InterpreterTest_testInterpretFileFunction_TestC1Ev:
function _ZN46InterpreterTest_testInterpretFileFunction_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   34:TEST(InterpreterTest, testInterpretFileFunction) {
        1:   34-block  0
call    0 returned 1
------------------
_ZN46InterpreterTest_testInterpretFileFunction_TestD0Ev:
function _ZN46InterpreterTest_testInterpretFileFunction_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   34:TEST(InterpreterTest, testInterpretFileFunction) {
        1:   34-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN46InterpreterTest_testInterpretFileFunction_TestD1Ev:
function _ZN46InterpreterTest_testInterpretFileFunction_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   34:TEST(InterpreterTest, testInterpretFileFunction) {
        1:   34-block  0
call    0 returned 1
------------------
_ZN46InterpreterTest_testInterpretFileFunction_Test8TestBodyEv:
function _ZN46InterpreterTest_testInterpretFileFunction_Test8TestBodyEv called 1 returned 100% blocks executed 34%
        1:   34:TEST(InterpreterTest, testInterpretFileFunction) {
        1:   34-block  0
        2:   35:    std::string filename = "temp_test.vis";
        1:   35-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:   35-block  1
        1:   36:    std::string source = "var x = 10\nx + 10\n";
        1:   36-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:   36-block  1
        1:   37:    std::ofstream tempFile(filename);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   38:    ASSERT_TRUE(tempFile.is_open());
        1:   38-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   38-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:   38-block  2
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%:   38-block  3
call   11 never executed
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%:   38-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%:   38-block  5
call   18 never executed
call   19 never executed
call   20 never executed
        1:   38-block  6
        1:   38-block  7
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0
        1:   38-block  8
    $$$$$:   38-block  9
call   24 never executed
    $$$$$:   38-block 10
call   25 never executed
    $$$$$:   38-block 11
    $$$$$:   38-block 12
    $$$$$:   38-block 13
call   26 never executed
    $$$$$:   38-block 14
    $$$$$:   38-block 15
call   27 never executed
        1:   39:    tempFile << source;
        1:   39-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   40:    tempFile.close();
        1:   40-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   41:    EXPECT_NO_THROW({Interpreter::interpretFile(filename, false);});
        1:   41-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   41-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   41-block  2
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:   41-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
    %%%%%:   41-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%:   41-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%:   41-block  6
call   18 never executed
call   19 never executed
branch 20 never executed (fallthrough)
branch 21 never executed (throw)
    %%%%%:   41-block  7
call   22 never executed
branch 23 never executed (fallthrough)
branch 24 never executed (throw)
    %%%%%:   41-block  8
call   25 never executed
call   26 never executed
call   27 never executed
        1:   41-block  9
call   28 returned 1
    $$$$$:   41-block 10
branch 29 never executed
branch 30 never executed
    $$$$$:   41-block 11
call   31 never executed
call   32 never executed
branch 33 never executed (fallthrough)
branch 34 never executed (throw)
    $$$$$:   41-block 12
call   35 never executed
branch 36 never executed (fallthrough)
branch 37 never executed (throw)
    $$$$$:   41-block 13
call   38 never executed
branch 39 never executed (fallthrough)
branch 40 never executed (throw)
    $$$$$:   41-block 14
call   41 never executed
call   42 never executed
branch 43 never executed (fallthrough)
branch 44 never executed (throw)
    $$$$$:   41-block 15
call   45 never executed
call   46 never executed
branch 47 never executed (fallthrough)
branch 48 never executed (throw)
    $$$$$:   41-block 16
call   49 never executed
branch 50 never executed (fallthrough)
branch 51 never executed (throw)
    $$$$$:   41-block 17
    $$$$$:   41-block 18
call   52 never executed
    $$$$$:   41-block 19
call   53 never executed
call   54 never executed
branch 55 never executed (fallthrough)
branch 56 never executed (throw)
    $$$$$:   41-block 20
    $$$$$:   41-block 21
call   57 never executed
branch 58 never executed (fallthrough)
branch 59 never executed (throw)
    $$$$$:   41-block 22
call   60 never executed
    $$$$$:   41-block 23
    $$$$$:   41-block 24
call   61 never executed
    $$$$$:   41-block 25
call   62 never executed
    $$$$$:   41-block 26
call   63 never executed
    $$$$$:   41-block 27
call   64 never executed
    $$$$$:   41-block 28
    $$$$$:   41-block 29
    $$$$$:   41-block 30
call   65 never executed
    $$$$$:   41-block 31
    $$$$$:   41-block 32
call   66 never executed
        1:   42:    std::remove(filename.c_str());
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   43:}
        1:   43-block  0
        1:   43-block  1
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   43-block  2
        1:   43-block  3
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:   43-block  4
        1:   43-block  5
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0
    $$$$$:   43-block  6
call    9 never executed
    $$$$$:   43-block  7
call   10 never executed
    $$$$$:   43-block  8
call   11 never executed
------------------
        -:   44:
        4:   45:TEST(InterpreterTest, testVisitNumber) {
        1:   46:    auto context = makeMockContext();
        1:   47:    const std::unique_ptr<Node> mockNode = makeNumbernode(6);
        1:   48:    std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
       1*:   49:    ASSERT_NE(result, nullptr);
       1*:   50:    auto* intLiteral = dynamic_cast<IntLiteral*>(result.get());
       1*:   51:    ASSERT_NE(intLiteral, nullptr);
       1*:   52:    EXPECT_EQ(intLiteral->getNumberValue(), 6);
        1:   53:}
------------------
_ZN36InterpreterTest_testVisitNumber_TestC1Ev:
function _ZN36InterpreterTest_testVisitNumber_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   45:TEST(InterpreterTest, testVisitNumber) {
        1:   45-block  0
call    0 returned 1
------------------
_ZN36InterpreterTest_testVisitNumber_TestD0Ev:
function _ZN36InterpreterTest_testVisitNumber_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   45:TEST(InterpreterTest, testVisitNumber) {
        1:   45-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN36InterpreterTest_testVisitNumber_TestD1Ev:
function _ZN36InterpreterTest_testVisitNumber_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   45:TEST(InterpreterTest, testVisitNumber) {
        1:   45-block  0
call    0 returned 1
------------------
_ZN36InterpreterTest_testVisitNumber_Test8TestBodyEv:
function _ZN36InterpreterTest_testVisitNumber_Test8TestBodyEv called 1 returned 100% blocks executed 37%
        1:   45:TEST(InterpreterTest, testVisitNumber) {
        1:   46:    auto context = makeMockContext();
        1:   46-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   47:    const std::unique_ptr<Node> mockNode = makeNumbernode(6);
        1:   47-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   48:    std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
        1:   48-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   49:    ASSERT_NE(result, nullptr);
        1:   49-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   49-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   49-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   49-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   49-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   49-block  5
call   16 never executed
call   17 never executed
        1:   49-block  6
        1:   49-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:   49-block  8
    $$$$$:   49-block  9
    $$$$$:   49-block 10
call   21 never executed
    $$$$$:   49-block 11
    $$$$$:   49-block 12
call   22 never executed
    $$$$$:   49-block 13
    $$$$$:   49-block 14
call   23 never executed
       1*:   50:    auto* intLiteral = dynamic_cast<IntLiteral*>(result.get());
        1:   50-block  0
call    0 returned 1
branch  1 taken 1
branch  2 taken 0
        1:   50-block  1
    %%%%%:   50-block  2
       1*:   51:    ASSERT_NE(intLiteral, nullptr);
        1:   51-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   51-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   51-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   51-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   51-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   51-block  5
call   16 never executed
call   17 never executed
        1:   51-block  6
        1:   51-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:   51-block  8
    $$$$$:   51-block  9
    $$$$$:   51-block 10
call   21 never executed
    $$$$$:   51-block 11
    $$$$$:   51-block 12
call   22 never executed
    $$$$$:   51-block 13
    $$$$$:   51-block 14
call   23 never executed
       1*:   52:    EXPECT_EQ(intLiteral->getNumberValue(), 6);
        1:   52-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   52-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   52-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   52-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   52-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   52-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   52-block  6
call   19 never executed
call   20 never executed
        1:   52-block  7
call   21 returned 1
    $$$$$:   52-block  8
    $$$$$:   52-block  9
    $$$$$:   52-block 10
call   22 never executed
    $$$$$:   52-block 11
    $$$$$:   52-block 12
call   23 never executed
    $$$$$:   52-block 13
    $$$$$:   52-block 14
call   24 never executed
        1:   53:}
        1:   53-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   53-block  1
        1:   53-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:   53-block  3
        1:   53-block  4
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0
    $$$$$:   53-block  5
call    9 never executed
    $$$$$:   53-block  6
call   10 never executed
    $$$$$:   53-block  7
call   11 never executed
------------------
        -:   54:
        4:   55:TEST(InterpreterTest, testVisitString) {
        1:   56:    auto context = makeMockContext();
        1:   57:    const std::unique_ptr<Node> mockNode = std::make_unique<StringNode>(Token(TokenType::STRING, dummyPos, "testString"));
        1:   58:    std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
       1*:   59:    ASSERT_NE(result, nullptr);
       1*:   60:    auto* intLiteral = dynamic_cast<StringLiteral*>(result.get());
       1*:   61:    ASSERT_NE(intLiteral, nullptr);
       1*:   62:    EXPECT_EQ(intLiteral->getStringValue(), "testString");
        1:   63:}
------------------
_ZN36InterpreterTest_testVisitString_TestC1Ev:
function _ZN36InterpreterTest_testVisitString_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   55:TEST(InterpreterTest, testVisitString) {
        1:   55-block  0
call    0 returned 1
------------------
_ZN36InterpreterTest_testVisitString_TestD0Ev:
function _ZN36InterpreterTest_testVisitString_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   55:TEST(InterpreterTest, testVisitString) {
        1:   55-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN36InterpreterTest_testVisitString_TestD1Ev:
function _ZN36InterpreterTest_testVisitString_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   55:TEST(InterpreterTest, testVisitString) {
        1:   55-block  0
call    0 returned 1
------------------
_ZN36InterpreterTest_testVisitString_Test8TestBodyEv:
function _ZN36InterpreterTest_testVisitString_Test8TestBodyEv called 1 returned 100% blocks executed 38%
        1:   55:TEST(InterpreterTest, testVisitString) {
        1:   56:    auto context = makeMockContext();
        1:   56-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   57:    const std::unique_ptr<Node> mockNode = std::make_unique<StringNode>(Token(TokenType::STRING, dummyPos, "testString"));
        1:   57-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   57-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   57-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   57-block  3
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:   57-block  4
call   13 never executed
    $$$$$:   57-block  5
call   14 never executed
    $$$$$:   57-block  6
    $$$$$:   57-block  7
    $$$$$:   57-block  8
        1:   58:    std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   59:    ASSERT_NE(result, nullptr);
        1:   59-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   59-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   59-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   59-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   59-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   59-block  5
call   16 never executed
call   17 never executed
        1:   59-block  6
        1:   59-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:   59-block  8
    $$$$$:   59-block  9
    $$$$$:   59-block 10
call   21 never executed
    $$$$$:   59-block 11
    $$$$$:   59-block 12
call   22 never executed
    $$$$$:   59-block 13
    $$$$$:   59-block 14
call   23 never executed
       1*:   60:    auto* intLiteral = dynamic_cast<StringLiteral*>(result.get());
        1:   60-block  0
call    0 returned 1
branch  1 taken 1
branch  2 taken 0
        1:   60-block  1
    %%%%%:   60-block  2
       1*:   61:    ASSERT_NE(intLiteral, nullptr);
        1:   61-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   61-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   61-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   61-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   61-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   61-block  5
call   16 never executed
call   17 never executed
        1:   61-block  6
        1:   61-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:   61-block  8
    $$$$$:   61-block  9
    $$$$$:   61-block 10
call   21 never executed
    $$$$$:   61-block 11
    $$$$$:   61-block 12
call   22 never executed
    $$$$$:   61-block 13
    $$$$$:   61-block 14
call   23 never executed
       1*:   62:    EXPECT_EQ(intLiteral->getStringValue(), "testString");
        1:   62-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   62-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   62-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   62-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   62-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   62-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:   62-block  6
call   20 never executed
call   21 never executed
        1:   62-block  7
call   22 returned 1
    $$$$$:   62-block  8
call   23 never executed
    $$$$$:   62-block  9
    $$$$$:   62-block 10
call   24 never executed
    $$$$$:   62-block 11
    $$$$$:   62-block 12
call   25 never executed
    $$$$$:   62-block 13
    $$$$$:   62-block 14
call   26 never executed
        1:   63:}
        1:   63-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   63-block  1
        1:   63-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:   63-block  3
        1:   63-block  4
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0
    $$$$$:   63-block  5
call    9 never executed
    $$$$$:   63-block  6
call   10 never executed
    $$$$$:   63-block  7
call   11 never executed
------------------
        -:   64:
        4:   65:TEST(InterpreterTest, testVisitBinaryOpNode) {
        1:   66:    auto context = makeMockContext();
        -:   67:
        -:   68:    struct TestCase {
        -:   69:        TokenType opType;
        -:   70:        std::optional<std::string> keywordValue; // used when opType == KEYWORD
        -:   71:        int left;
        -:   72:        int right;
        -:   73:        std::variant<int, bool> expectedResult; // expected result
        -:   74:    };
        -:   75:
        -:   76:    std::vector<TestCase> testCases = {
        -:   77:        {TokenType::PLUS, std::nullopt, 10, 20, 30},
        -:   78:        {TokenType::MINUS, std::nullopt, 20, 5, 15},
        -:   79:        {TokenType::MUL, std::nullopt, 3, 4, 12},
        -:   80:        {TokenType::DIV, std::nullopt, 20, 5, 4},
        -:   81:        {TokenType::MOD, std::nullopt, 20, 6, 2},
        -:   82:        {TokenType::TRUEEQUALS, std::nullopt, 10, 10, true},
        -:   83:        {TokenType::NOTEQUAL, std::nullopt, 10, 5, true},
        -:   84:        {TokenType::LESSTHAN, std::nullopt, 5, 10, true},
        -:   85:        {TokenType::LESSEQUAL, std::nullopt, 10, 10, true},
        -:   86:        {TokenType::GREATERTHAN, std::nullopt, 10, 5, true},
        -:   87:        {TokenType::GREATEREQUAL, std::nullopt, 10, 10, true},
        -:   88:        {TokenType::KEYWORD, "or", 0, 1, true},
        -:   89:        {TokenType::KEYWORD, "or", 0, 0, false},
        -:   90:        {TokenType::KEYWORD, "and", 1, 1, true},
        -:   91:        {TokenType::KEYWORD, "and", 1, 0, false}
       17:   92:    };
        -:   93:
       16:   94:    for (const auto& testCase : testCases) {
       15:   95:        std::unique_ptr<Node> mockLeftNode = makeNumbernode(testCase.left);
       15:   96:        Token opToken = (testCase.opType == TokenType::KEYWORD)
       15:   97:            ? Token(TokenType::KEYWORD, dummyPos, testCase.keywordValue.value()) : Token(testCase.opType, dummyPos);
       15:   98:        Operator mockOperatorNode(opToken);
       15:   99:        std::unique_ptr<Node> mockRightNode = makeNumbernode(testCase.right);
        -:  100:
       30:  101:        std::unique_ptr<Node> mockNode = std::make_unique<BinaryOperator>(
       15:  102:            std::move(mockLeftNode),
        -:  103:            mockOperatorNode,
       15:  104:            std::move(mockRightNode)
       15:  105:        );
        -:  106:
       15:  107:        std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
      15*:  108:        ASSERT_NE(result, nullptr);
        -:  109:
       15:  110:        if (std::holds_alternative<int>(testCase.expectedResult)) {
       5*:  111:            auto* intLiteral = dynamic_cast<IntLiteral*>(result.get());
       5*:  112:            ASSERT_NE(intLiteral, nullptr) << "Expected IntLiteral for operator " << static_cast<int>(testCase.opType);
       5*:  113:            EXPECT_EQ(intLiteral->getNumberValue(), std::get<int>(testCase.expectedResult));
        -:  114:        }
        -:  115:        else {
      10*:  116:            auto* boolLiteral = dynamic_cast<BoolLiteral*>(result.get());
      10*:  117:            ASSERT_NE(boolLiteral, nullptr) << "Expected BoolLiteral for operator " << static_cast<int>(testCase.opType);
      10*:  118:            EXPECT_EQ(boolLiteral->getBoolValue(), std::get<bool>(testCase.expectedResult));
        -:  119:        }
       15:  120:    }
        2:  121:}
------------------
_ZN42InterpreterTest_testVisitBinaryOpNode_TestC1Ev:
function _ZN42InterpreterTest_testVisitBinaryOpNode_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   65:TEST(InterpreterTest, testVisitBinaryOpNode) {
        1:   65-block  0
call    0 returned 1
------------------
_ZN42InterpreterTest_testVisitBinaryOpNode_TestD0Ev:
function _ZN42InterpreterTest_testVisitBinaryOpNode_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   65:TEST(InterpreterTest, testVisitBinaryOpNode) {
        1:   65-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN42InterpreterTest_testVisitBinaryOpNode_TestD1Ev:
function _ZN42InterpreterTest_testVisitBinaryOpNode_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   65:TEST(InterpreterTest, testVisitBinaryOpNode) {
        1:   65-block  0
call    0 returned 1
------------------
_ZN42InterpreterTest_testVisitBinaryOpNode_Test8TestBodyEv:
function _ZN42InterpreterTest_testVisitBinaryOpNode_Test8TestBodyEv called 1 returned 100% blocks executed 41%
        1:   65:TEST(InterpreterTest, testVisitBinaryOpNode) {
        1:   66:    auto context = makeMockContext();
        1:   66-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   67:
        -:   68:    struct TestCase {
        -:   69:        TokenType opType;
        -:   70:        std::optional<std::string> keywordValue; // used when opType == KEYWORD
        -:   71:        int left;
        -:   72:        int right;
        -:   73:        std::variant<int, bool> expectedResult; // expected result
        -:   74:    };
        -:   75:
        -:   76:    std::vector<TestCase> testCases = {
        -:   77:        {TokenType::PLUS, std::nullopt, 10, 20, 30},
        -:   78:        {TokenType::MINUS, std::nullopt, 20, 5, 15},
        -:   79:        {TokenType::MUL, std::nullopt, 3, 4, 12},
        -:   80:        {TokenType::DIV, std::nullopt, 20, 5, 4},
        -:   81:        {TokenType::MOD, std::nullopt, 20, 6, 2},
        -:   82:        {TokenType::TRUEEQUALS, std::nullopt, 10, 10, true},
        -:   83:        {TokenType::NOTEQUAL, std::nullopt, 10, 5, true},
        -:   84:        {TokenType::LESSTHAN, std::nullopt, 5, 10, true},
        -:   85:        {TokenType::LESSEQUAL, std::nullopt, 10, 10, true},
        -:   86:        {TokenType::GREATERTHAN, std::nullopt, 10, 5, true},
        -:   87:        {TokenType::GREATEREQUAL, std::nullopt, 10, 10, true},
        -:   88:        {TokenType::KEYWORD, "or", 0, 1, true},
        -:   89:        {TokenType::KEYWORD, "or", 0, 0, false},
        -:   90:        {TokenType::KEYWORD, "and", 1, 1, true},
        -:   91:        {TokenType::KEYWORD, "and", 1, 0, false}
       17:   92:    };
        1:   92-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       16:   92-block  1
branch  3 taken 15 (fallthrough)
branch  4 taken 1
       15:   92-block  2
call    5 returned 15
    $$$$$:   92-block  3
    $$$$$:   92-block  4
    $$$$$:   92-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:   92-block  6
call    8 never executed
    $$$$$:   92-block  7
        -:   93:
       16:   94:    for (const auto& testCase : testCases) {
        1:   94-block  0
call    0 returned 1
call    1 returned 1
       15:   94-block  1
call    2 returned 15
       15:   94-block  2
call    3 returned 15
       16:   94-block  3
call    4 returned 16
branch  5 taken 15
branch  6 taken 1 (fallthrough)
       15:   95:        std::unique_ptr<Node> mockLeftNode = makeNumbernode(testCase.left);
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       15:   96:        Token opToken = (testCase.opType == TokenType::KEYWORD)
       15:   97:            ? Token(TokenType::KEYWORD, dummyPos, testCase.keywordValue.value()) : Token(testCase.opType, dummyPos);
       15:   97-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 11
        4:   97-block  1
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
        4:   97-block  2
call    5 returned 4
branch  6 taken 4 (fallthrough)
branch  7 taken 0 (throw)
        4:   97-block  3
call    8 returned 4
branch  9 taken 4 (fallthrough)
branch 10 taken 0 (throw)
       11:   97-block  4
call   11 returned 11
call   12 returned 11
branch 13 taken 11 (fallthrough)
branch 14 taken 0 (throw)
       15:   97-block  5
branch 15 taken 11 (fallthrough)
branch 16 taken 4
       11:   97-block  6
call   17 returned 11
       15:   97-block  7
branch 18 taken 4 (fallthrough)
branch 19 taken 11
        4:   97-block  8
call   20 returned 4
    $$$$$:   97-block  9
branch 21 never executed (fallthrough)
branch 22 never executed
    $$$$$:   97-block 10
call   23 never executed
    $$$$$:   97-block 11
    $$$$$:   97-block 12
    $$$$$:   97-block 13
branch 24 never executed (fallthrough)
branch 25 never executed
    $$$$$:   97-block 14
call   26 never executed
    $$$$$:   97-block 15
       15:   98:        Operator mockOperatorNode(opToken);
       15:   98-block  0
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       15:   99:        std::unique_ptr<Node> mockRightNode = makeNumbernode(testCase.right);
       15:   99-block  0
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
        -:  100:
       30:  101:        std::unique_ptr<Node> mockNode = std::make_unique<BinaryOperator>(
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 15
    $$$$$:  101-block  0
       15:  102:            std::move(mockLeftNode),
call    0 returned 15
        -:  103:            mockOperatorNode,
       15:  104:            std::move(mockRightNode)
       15:  104-block  0
call    0 returned 15
       15:  105:        );
       15:  105-block  0
call    0 returned 15
        -:  106:
       15:  107:        std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
      15*:  108:        ASSERT_NE(result, nullptr);
       15:  108-block  0
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       15:  108-block  1
call    3 returned 15
branch  4 taken 0 (fallthrough)
branch  5 taken 15
    %%%%%:  108-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  108-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  108-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  108-block  5
call   16 never executed
call   17 never executed
       15:  108-block  6
       15:  108-block  7
call   18 returned 15
branch 19 taken 15 (fallthrough)
branch 20 taken 0
       15:  108-block  8
    $$$$$:  108-block  9
    $$$$$:  108-block 10
call   21 never executed
    $$$$$:  108-block 11
    $$$$$:  108-block 12
call   22 never executed
    $$$$$:  108-block 13
    $$$$$:  108-block 14
call   23 never executed
        -:  109:
       15:  110:        if (std::holds_alternative<int>(testCase.expectedResult)) {
       15:  110-block  0
call    0 returned 15
branch  1 taken 5
branch  2 taken 10
       5*:  111:            auto* intLiteral = dynamic_cast<IntLiteral*>(result.get());
        5:  111-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0
        5:  111-block  1
    %%%%%:  111-block  2
       5*:  112:            ASSERT_NE(intLiteral, nullptr) << "Expected IntLiteral for operator " << static_cast<int>(testCase.opType);
        5:  112-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  112-block  1
call    3 returned 5
branch  4 taken 0 (fallthrough)
branch  5 taken 5
    %%%%%:  112-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  112-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  112-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%:  112-block  5
call   15 never executed
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  112-block  6
call   19 never executed
branch 20 never executed (fallthrough)
branch 21 never executed (throw)
    %%%%%:  112-block  7
call   22 never executed
call   23 never executed
        5:  112-block  8
        5:  112-block  9
call   24 returned 5
branch 25 taken 5 (fallthrough)
branch 26 taken 0
        5:  112-block 10
    $$$$$:  112-block 11
    $$$$$:  112-block 12
call   27 never executed
    $$$$$:  112-block 13
    $$$$$:  112-block 14
    $$$$$:  112-block 15
call   28 never executed
    $$$$$:  112-block 16
    $$$$$:  112-block 17
call   29 never executed
       5*:  113:            EXPECT_EQ(intLiteral->getNumberValue(), std::get<int>(testCase.expectedResult));
        5:  113-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  113-block  1
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5:  113-block  2
call    6 returned 5
branch  7 taken 5 (fallthrough)
branch  8 taken 0 (throw)
        5:  113-block  3
call    9 returned 5
branch 10 taken 0 (fallthrough)
branch 11 taken 5
    %%%%%:  113-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%:  113-block  5
call   15 never executed
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  113-block  6
call   19 never executed
branch 20 never executed (fallthrough)
branch 21 never executed (throw)
    %%%%%:  113-block  7
call   22 never executed
call   23 never executed
        5:  113-block  8
call   24 returned 5
    $$$$$:  113-block  9
    $$$$$:  113-block 10
call   25 never executed
    $$$$$:  113-block 11
    $$$$$:  113-block 12
call   26 never executed
    $$$$$:  113-block 13
    $$$$$:  113-block 14
call   27 never executed
        -:  114:        }
        -:  115:        else {
      10*:  116:            auto* boolLiteral = dynamic_cast<BoolLiteral*>(result.get());
       10:  116-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0
       10:  116-block  1
    %%%%%:  116-block  2
      10*:  117:            ASSERT_NE(boolLiteral, nullptr) << "Expected BoolLiteral for operator " << static_cast<int>(testCase.opType);
       10:  117-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:  117-block  1
call    3 returned 10
branch  4 taken 0 (fallthrough)
branch  5 taken 10
    %%%%%:  117-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  117-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  117-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%:  117-block  5
call   15 never executed
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  117-block  6
call   19 never executed
branch 20 never executed (fallthrough)
branch 21 never executed (throw)
    %%%%%:  117-block  7
call   22 never executed
call   23 never executed
       10:  117-block  8
       10:  117-block  9
call   24 returned 10
branch 25 taken 10 (fallthrough)
branch 26 taken 0
       10:  117-block 10
    $$$$$:  117-block 11
    $$$$$:  117-block 12
call   27 never executed
    $$$$$:  117-block 13
    $$$$$:  117-block 14
    $$$$$:  117-block 15
call   28 never executed
    $$$$$:  117-block 16
    $$$$$:  117-block 17
call   29 never executed
      10*:  118:            EXPECT_EQ(boolLiteral->getBoolValue(), std::get<bool>(testCase.expectedResult));
       10:  118-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:  118-block  1
call    3 returned 10
branch  4 taken 10 (fallthrough)
branch  5 taken 0 (throw)
       10:  118-block  2
call    6 returned 10
branch  7 taken 10 (fallthrough)
branch  8 taken 0 (throw)
       10:  118-block  3
call    9 returned 10
branch 10 taken 0 (fallthrough)
branch 11 taken 10
    %%%%%:  118-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%:  118-block  5
call   15 never executed
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  118-block  6
call   19 never executed
branch 20 never executed (fallthrough)
branch 21 never executed (throw)
    %%%%%:  118-block  7
call   22 never executed
call   23 never executed
       10:  118-block  8
call   24 returned 10
    $$$$$:  118-block  9
    $$$$$:  118-block 10
call   25 never executed
    $$$$$:  118-block 11
    $$$$$:  118-block 12
call   26 never executed
    $$$$$:  118-block 13
    $$$$$:  118-block 14
call   27 never executed
        -:  119:        }
       15:  120:    }
       15:  120-block  0
       15:  120-block  1
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0
       15:  120-block  2
       15:  120-block  3
call    3 returned 15
branch  4 taken 15 (fallthrough)
branch  5 taken 0
       15:  120-block  4
       15:  120-block  5
call    6 returned 15
branch  7 taken 15 (fallthrough)
branch  8 taken 0
       15:  120-block  6
       15:  120-block  7
call    9 returned 15
branch 10 taken 15 (fallthrough)
branch 11 taken 0
       15:  120-block  8
       15:  120-block  9
call   12 returned 15
branch 13 taken 15 (fallthrough)
branch 14 taken 0
       15:  120-block 10
       15:  120-block 11
call   15 returned 15
branch 16 taken 15 (fallthrough)
branch 17 taken 0
    $$$$$:  120-block 12
call   18 never executed
    $$$$$:  120-block 13
call   19 never executed
    $$$$$:  120-block 14
call   20 never executed
    $$$$$:  120-block 15
call   21 never executed
    $$$$$:  120-block 16
call   22 never executed
    $$$$$:  120-block 17
call   23 never executed
        2:  121:}
        1:  121-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  121-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  121-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  121-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  121-block  4
        1:  121-block  5
        1:  121-block  6
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0
        1:  121-block  7
        1:  121-block  8
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0
    $$$$$:  121-block  9
branch 18 never executed (fallthrough)
branch 19 never executed
    $$$$$:  121-block 10
call   20 never executed
    $$$$$:  121-block 11
branch 21 never executed (fallthrough)
branch 22 never executed
    $$$$$:  121-block 12
call   23 never executed
    $$$$$:  121-block 13
branch 24 never executed (fallthrough)
branch 25 never executed
    $$$$$:  121-block 14
call   26 never executed
    $$$$$:  121-block 15
branch 27 never executed (fallthrough)
branch 28 never executed
    $$$$$:  121-block 16
call   29 never executed
    $$$$$:  121-block 17
branch 30 never executed (fallthrough)
branch 31 never executed
    $$$$$:  121-block 18
    $$$$$:  121-block 19
branch 32 never executed (fallthrough)
branch 33 never executed
    $$$$$:  121-block 20
call   34 never executed
    $$$$$:  121-block 21
call   35 never executed
    $$$$$:  121-block 22
call   36 never executed
------------------
        -:  122:
        4:  123:TEST(InterpreterTest, testVisitUnaryOpNode) {
        1:  124:    auto context = makeMockContext();
        -:  125:
        1:  126:    Operator mockOperatorNode = Operator(Token(TokenType::MINUS, dummyPos));
        1:  127:    std::unique_ptr<Node> mockValueNode = makeNumbernode(20);
        -:  128:
        1:  129:    Operator mockOperatorNode2 = Operator(Token(TokenType::KEYWORD, dummyPos, "not"));
        1:  130:    std::unique_ptr<Node> mockValueNode2 = makeNumbernode(20);
        -:  131:
        1:  132:    const std::unique_ptr<Node> mockNode = std::make_unique<UnaryOperator>(mockOperatorNode, std::move(mockValueNode));
        1:  133:    const std::unique_ptr<Node> mockNode2 = std::make_unique<UnaryOperator>(mockOperatorNode2, std::move(mockValueNode2));
        -:  134:
        1:  135:    const std::unique_ptr<Literal> result1 = Interpreter::visit(mockNode, &context);
        1:  136:    const std::unique_ptr<Literal> result2 = Interpreter::visit(mockNode2, &context);
       1*:  137:    ASSERT_NE(result1, nullptr);
       1*:  138:    ASSERT_NE(result2, nullptr);
        -:  139:
       1*:  140:    auto* intLiteral = dynamic_cast<IntLiteral*>(result1.get());
       1*:  141:    auto* boolLiteral = dynamic_cast<BoolLiteral*>(result2.get());
       1*:  142:    ASSERT_NE(intLiteral, nullptr);
       1*:  143:    ASSERT_NE(boolLiteral, nullptr);
       1*:  144:    EXPECT_EQ(intLiteral->getNumberValue(), -20);
       1*:  145:    EXPECT_EQ(boolLiteral->getBoolValue(), false);
        1:  146:}
------------------
_ZN41InterpreterTest_testVisitUnaryOpNode_TestC1Ev:
function _ZN41InterpreterTest_testVisitUnaryOpNode_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  123:TEST(InterpreterTest, testVisitUnaryOpNode) {
        1:  123-block  0
call    0 returned 1
------------------
_ZN41InterpreterTest_testVisitUnaryOpNode_TestD0Ev:
function _ZN41InterpreterTest_testVisitUnaryOpNode_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  123:TEST(InterpreterTest, testVisitUnaryOpNode) {
        1:  123-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN41InterpreterTest_testVisitUnaryOpNode_TestD1Ev:
function _ZN41InterpreterTest_testVisitUnaryOpNode_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  123:TEST(InterpreterTest, testVisitUnaryOpNode) {
        1:  123-block  0
call    0 returned 1
------------------
_ZN41InterpreterTest_testVisitUnaryOpNode_Test8TestBodyEv:
function _ZN41InterpreterTest_testVisitUnaryOpNode_Test8TestBodyEv called 1 returned 100% blocks executed 39%
        1:  123:TEST(InterpreterTest, testVisitUnaryOpNode) {
        1:  124:    auto context = makeMockContext();
        1:  124-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  125:
        1:  126:    Operator mockOperatorNode = Operator(Token(TokenType::MINUS, dummyPos));
        1:  126-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  126-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  126-block  2
call    7 returned 1
call    8 returned 1
    $$$$$:  126-block  3
call    9 never executed
    $$$$$:  126-block  4
call   10 never executed
    $$$$$:  126-block  5
    $$$$$:  126-block  6
    $$$$$:  126-block  7
        1:  127:    std::unique_ptr<Node> mockValueNode = makeNumbernode(20);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  128:
        1:  129:    Operator mockOperatorNode2 = Operator(Token(TokenType::KEYWORD, dummyPos, "not"));
        1:  129-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  129-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  129-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  129-block  3
call    9 returned 1
call   10 returned 1
    $$$$$:  129-block  4
call   11 never executed
    $$$$$:  129-block  5
call   12 never executed
    $$$$$:  129-block  6
    $$$$$:  129-block  7
        1:  130:    std::unique_ptr<Node> mockValueNode2 = makeNumbernode(20);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  131:
        1:  132:    const std::unique_ptr<Node> mockNode = std::make_unique<UnaryOperator>(mockOperatorNode, std::move(mockValueNode));
        1:  132-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  132-block  1
call    4 returned 1
call    5 returned 1
    $$$$$:  132-block  2
        1:  133:    const std::unique_ptr<Node> mockNode2 = std::make_unique<UnaryOperator>(mockOperatorNode2, std::move(mockValueNode2));
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  133-block  0
call    4 returned 1
call    5 returned 1
    $$$$$:  133-block  1
        -:  134:
        1:  135:    const std::unique_ptr<Literal> result1 = Interpreter::visit(mockNode, &context);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  136:    const std::unique_ptr<Literal> result2 = Interpreter::visit(mockNode2, &context);
        1:  136-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  137:    ASSERT_NE(result1, nullptr);
        1:  137-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  137-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  137-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  137-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  137-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  137-block  5
call   16 never executed
call   17 never executed
        1:  137-block  6
        1:  137-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  137-block  8
    $$$$$:  137-block  9
    $$$$$:  137-block 10
call   21 never executed
    $$$$$:  137-block 11
    $$$$$:  137-block 12
call   22 never executed
    $$$$$:  137-block 13
    $$$$$:  137-block 14
call   23 never executed
       1*:  138:    ASSERT_NE(result2, nullptr);
        1:  138-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  138-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  138-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  138-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  138-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  138-block  5
call   16 never executed
call   17 never executed
        1:  138-block  6
        1:  138-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  138-block  8
    $$$$$:  138-block  9
    $$$$$:  138-block 10
call   21 never executed
    $$$$$:  138-block 11
    $$$$$:  138-block 12
call   22 never executed
    $$$$$:  138-block 13
    $$$$$:  138-block 14
call   23 never executed
        -:  139:
       1*:  140:    auto* intLiteral = dynamic_cast<IntLiteral*>(result1.get());
        1:  140-block  0
call    0 returned 1
branch  1 taken 1
branch  2 taken 0
        1:  140-block  1
    %%%%%:  140-block  2
       1*:  141:    auto* boolLiteral = dynamic_cast<BoolLiteral*>(result2.get());
        1:  141-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  141-block  1
    %%%%%:  141-block  2
       1*:  142:    ASSERT_NE(intLiteral, nullptr);
        1:  142-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  142-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  142-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  142-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  142-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  142-block  5
call   16 never executed
call   17 never executed
        1:  142-block  6
        1:  142-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  142-block  8
    $$$$$:  142-block  9
    $$$$$:  142-block 10
call   21 never executed
    $$$$$:  142-block 11
    $$$$$:  142-block 12
call   22 never executed
    $$$$$:  142-block 13
    $$$$$:  142-block 14
call   23 never executed
       1*:  143:    ASSERT_NE(boolLiteral, nullptr);
        1:  143-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  143-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  143-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  143-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  143-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  143-block  5
call   16 never executed
call   17 never executed
        1:  143-block  6
        1:  143-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  143-block  8
    $$$$$:  143-block  9
    $$$$$:  143-block 10
call   21 never executed
    $$$$$:  143-block 11
    $$$$$:  143-block 12
call   22 never executed
    $$$$$:  143-block 13
    $$$$$:  143-block 14
call   23 never executed
       1*:  144:    EXPECT_EQ(intLiteral->getNumberValue(), -20);
        1:  144-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  144-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  144-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  144-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  144-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  144-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  144-block  6
call   19 never executed
call   20 never executed
        1:  144-block  7
call   21 returned 1
    $$$$$:  144-block  8
    $$$$$:  144-block  9
    $$$$$:  144-block 10
call   22 never executed
    $$$$$:  144-block 11
    $$$$$:  144-block 12
call   23 never executed
    $$$$$:  144-block 13
    $$$$$:  144-block 14
call   24 never executed
       1*:  145:    EXPECT_EQ(boolLiteral->getBoolValue(), false);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  145-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  145-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  145-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  145-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  145-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  145-block  5
call   19 never executed
call   20 never executed
        1:  145-block  6
call   21 returned 1
    $$$$$:  145-block  7
    $$$$$:  145-block  8
    $$$$$:  145-block  9
call   22 never executed
    $$$$$:  145-block 10
    $$$$$:  145-block 11
call   23 never executed
    $$$$$:  145-block 12
    $$$$$:  145-block 13
call   24 never executed
        1:  146:}
        1:  146-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  146-block  1
        1:  146-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  146-block  3
        1:  146-block  4
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  146-block  5
        1:  146-block  6
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0
        1:  146-block  7
        1:  146-block  8
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0
        1:  146-block  9
        1:  146-block 10
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0
        1:  146-block 11
        1:  146-block 12
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  146-block 13
        1:  146-block 14
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0
        1:  146-block 15
        1:  146-block 16
call   24 returned 1
branch 25 taken 1 (fallthrough)
branch 26 taken 0
    $$$$$:  146-block 17
call   27 never executed
    $$$$$:  146-block 18
call   28 never executed
    $$$$$:  146-block 19
call   29 never executed
    $$$$$:  146-block 20
call   30 never executed
    $$$$$:  146-block 21
call   31 never executed
    $$$$$:  146-block 22
call   32 never executed
    $$$$$:  146-block 23
call   33 never executed
    $$$$$:  146-block 24
call   34 never executed
    $$$$$:  146-block 25
call   35 never executed
------------------
        -:  147:
        4:  148:TEST(InterpreterTest, testVisitIncrementNode) {
        1:  149:    auto context = makeMockContext();
        3:  150:    context.getSymbolTable().set("x", std::make_unique<IntLiteral>(10));
        1:  151:    const std::unique_ptr<Node> mockNode = std::make_unique<VarIncrement>(Token(TokenType::IDENTIFIER, dummyPos, "x"));
        -:  152:
        1:  153:    const std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
       1*:  154:    ASSERT_NE(result, nullptr);
       1*:  155:    auto* intLiteral = dynamic_cast<IntLiteral*>(result.get());
       1*:  156:    ASSERT_NE(intLiteral, nullptr);
       1*:  157:    EXPECT_EQ(intLiteral->getNumberValue(), 11);
        1:  158:}
------------------
_ZN43InterpreterTest_testVisitIncrementNode_TestC1Ev:
function _ZN43InterpreterTest_testVisitIncrementNode_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  148:TEST(InterpreterTest, testVisitIncrementNode) {
        1:  148-block  0
call    0 returned 1
------------------
_ZN43InterpreterTest_testVisitIncrementNode_TestD0Ev:
function _ZN43InterpreterTest_testVisitIncrementNode_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  148:TEST(InterpreterTest, testVisitIncrementNode) {
        1:  148-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN43InterpreterTest_testVisitIncrementNode_TestD1Ev:
function _ZN43InterpreterTest_testVisitIncrementNode_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  148:TEST(InterpreterTest, testVisitIncrementNode) {
        1:  148-block  0
call    0 returned 1
------------------
_ZN43InterpreterTest_testVisitIncrementNode_Test8TestBodyEv:
function _ZN43InterpreterTest_testVisitIncrementNode_Test8TestBodyEv called 1 returned 100% blocks executed 40%
        1:  148:TEST(InterpreterTest, testVisitIncrementNode) {
        1:  149:    auto context = makeMockContext();
        1:  149-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:  150:    context.getSymbolTable().set("x", std::make_unique<IntLiteral>(10));
        1:  150-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  150-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  150-block  2
call    6 returned 1
        1:  150-block  3
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  150-block  4
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1:  150-block  5
call   13 returned 1
call   14 returned 1
call   15 returned 1
    $$$$$:  150-block  6
call   16 never executed
    $$$$$:  150-block  7
    $$$$$:  150-block  8
    $$$$$:  150-block  9
call   17 never executed
    $$$$$:  150-block 10
call   18 never executed
    $$$$$:  150-block 11
    $$$$$:  150-block 12
    $$$$$:  150-block 13
        1:  151:    const std::unique_ptr<Node> mockNode = std::make_unique<VarIncrement>(Token(TokenType::IDENTIFIER, dummyPos, "x"));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  151-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  151-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  151-block  2
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  151-block  3
call   13 never executed
    $$$$$:  151-block  4
call   14 never executed
    $$$$$:  151-block  5
    $$$$$:  151-block  6
    $$$$$:  151-block  7
        -:  152:
        1:  153:    const std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  154:    ASSERT_NE(result, nullptr);
        1:  154-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  154-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  154-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  154-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  154-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  154-block  5
call   16 never executed
call   17 never executed
        1:  154-block  6
        1:  154-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  154-block  8
    $$$$$:  154-block  9
    $$$$$:  154-block 10
call   21 never executed
    $$$$$:  154-block 11
    $$$$$:  154-block 12
call   22 never executed
    $$$$$:  154-block 13
    $$$$$:  154-block 14
call   23 never executed
       1*:  155:    auto* intLiteral = dynamic_cast<IntLiteral*>(result.get());
        1:  155-block  0
call    0 returned 1
branch  1 taken 1
branch  2 taken 0
        1:  155-block  1
    %%%%%:  155-block  2
       1*:  156:    ASSERT_NE(intLiteral, nullptr);
        1:  156-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  156-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  156-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  156-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  156-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  156-block  5
call   16 never executed
call   17 never executed
        1:  156-block  6
        1:  156-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  156-block  8
    $$$$$:  156-block  9
    $$$$$:  156-block 10
call   21 never executed
    $$$$$:  156-block 11
    $$$$$:  156-block 12
call   22 never executed
    $$$$$:  156-block 13
    $$$$$:  156-block 14
call   23 never executed
       1*:  157:    EXPECT_EQ(intLiteral->getNumberValue(), 11);
        1:  157-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  157-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  157-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  157-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  157-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  157-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  157-block  6
call   19 never executed
call   20 never executed
        1:  157-block  7
call   21 returned 1
    $$$$$:  157-block  8
    $$$$$:  157-block  9
    $$$$$:  157-block 10
call   22 never executed
    $$$$$:  157-block 11
    $$$$$:  157-block 12
call   23 never executed
    $$$$$:  157-block 13
    $$$$$:  157-block 14
call   24 never executed
        1:  158:}
        1:  158-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  158-block  1
        1:  158-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  158-block  3
        1:  158-block  4
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0
    $$$$$:  158-block  5
call    9 never executed
    $$$$$:  158-block  6
call   10 never executed
    $$$$$:  158-block  7
call   11 never executed
------------------
        -:  159:
        4:  160:TEST(InterpreterTest, testVisitDecrementtNode) {
        1:  161:    auto context = makeMockContext();
        3:  162:    context.getSymbolTable().set("x", std::make_unique<IntLiteral>(10));
        1:  163:    const std::unique_ptr<Node> mockNode = std::make_unique<VarDecrement>(Token(TokenType::IDENTIFIER, dummyPos, "x"));
        -:  164:
        1:  165:    const std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
       1*:  166:    ASSERT_NE(result, nullptr);
       1*:  167:    auto* intLiteral = dynamic_cast<IntLiteral*>(result.get());
       1*:  168:    ASSERT_NE(intLiteral, nullptr);
       1*:  169:    EXPECT_EQ(intLiteral->getNumberValue(), 9);
        1:  170:}
------------------
_ZN44InterpreterTest_testVisitDecrementtNode_TestC1Ev:
function _ZN44InterpreterTest_testVisitDecrementtNode_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  160:TEST(InterpreterTest, testVisitDecrementtNode) {
        1:  160-block  0
call    0 returned 1
------------------
_ZN44InterpreterTest_testVisitDecrementtNode_TestD0Ev:
function _ZN44InterpreterTest_testVisitDecrementtNode_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  160:TEST(InterpreterTest, testVisitDecrementtNode) {
        1:  160-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN44InterpreterTest_testVisitDecrementtNode_TestD1Ev:
function _ZN44InterpreterTest_testVisitDecrementtNode_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  160:TEST(InterpreterTest, testVisitDecrementtNode) {
        1:  160-block  0
call    0 returned 1
------------------
_ZN44InterpreterTest_testVisitDecrementtNode_Test8TestBodyEv:
function _ZN44InterpreterTest_testVisitDecrementtNode_Test8TestBodyEv called 1 returned 100% blocks executed 40%
        1:  160:TEST(InterpreterTest, testVisitDecrementtNode) {
        1:  161:    auto context = makeMockContext();
        1:  161-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:  162:    context.getSymbolTable().set("x", std::make_unique<IntLiteral>(10));
        1:  162-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  162-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  162-block  2
call    6 returned 1
        1:  162-block  3
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  162-block  4
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1:  162-block  5
call   13 returned 1
call   14 returned 1
call   15 returned 1
    $$$$$:  162-block  6
call   16 never executed
    $$$$$:  162-block  7
    $$$$$:  162-block  8
    $$$$$:  162-block  9
call   17 never executed
    $$$$$:  162-block 10
call   18 never executed
    $$$$$:  162-block 11
    $$$$$:  162-block 12
    $$$$$:  162-block 13
        1:  163:    const std::unique_ptr<Node> mockNode = std::make_unique<VarDecrement>(Token(TokenType::IDENTIFIER, dummyPos, "x"));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  163-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  163-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  163-block  2
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  163-block  3
call   13 never executed
    $$$$$:  163-block  4
call   14 never executed
    $$$$$:  163-block  5
    $$$$$:  163-block  6
    $$$$$:  163-block  7
        -:  164:
        1:  165:    const std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  166:    ASSERT_NE(result, nullptr);
        1:  166-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  166-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  166-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  166-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  166-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  166-block  5
call   16 never executed
call   17 never executed
        1:  166-block  6
        1:  166-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  166-block  8
    $$$$$:  166-block  9
    $$$$$:  166-block 10
call   21 never executed
    $$$$$:  166-block 11
    $$$$$:  166-block 12
call   22 never executed
    $$$$$:  166-block 13
    $$$$$:  166-block 14
call   23 never executed
       1*:  167:    auto* intLiteral = dynamic_cast<IntLiteral*>(result.get());
        1:  167-block  0
call    0 returned 1
branch  1 taken 1
branch  2 taken 0
        1:  167-block  1
    %%%%%:  167-block  2
       1*:  168:    ASSERT_NE(intLiteral, nullptr);
        1:  168-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  168-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  168-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  168-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  168-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  168-block  5
call   16 never executed
call   17 never executed
        1:  168-block  6
        1:  168-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  168-block  8
    $$$$$:  168-block  9
    $$$$$:  168-block 10
call   21 never executed
    $$$$$:  168-block 11
    $$$$$:  168-block 12
call   22 never executed
    $$$$$:  168-block 13
    $$$$$:  168-block 14
call   23 never executed
       1*:  169:    EXPECT_EQ(intLiteral->getNumberValue(), 9);
        1:  169-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  169-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  169-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  169-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  169-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  169-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  169-block  6
call   19 never executed
call   20 never executed
        1:  169-block  7
call   21 returned 1
    $$$$$:  169-block  8
    $$$$$:  169-block  9
    $$$$$:  169-block 10
call   22 never executed
    $$$$$:  169-block 11
    $$$$$:  169-block 12
call   23 never executed
    $$$$$:  169-block 13
    $$$$$:  169-block 14
call   24 never executed
        1:  170:}
        1:  170-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  170-block  1
        1:  170-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  170-block  3
        1:  170-block  4
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0
    $$$$$:  170-block  5
call    9 never executed
    $$$$$:  170-block  6
call   10 never executed
    $$$$$:  170-block  7
call   11 never executed
------------------
        -:  171:
        4:  172:TEST(InterpreterTest, testVisitIfStatementNode) {
        1:  173:    auto context = makeMockContext();
        1:  174:    std::unique_ptr<Node> comparison = makeNumbernode(10);
        -:  175:
        1:  176:    std::vector<std::unique_ptr<Node>> ifNodes;
        1:  177:    ifNodes.push_back(std::make_unique<Number>(Token(TokenType::FLOAT, dummyPos, 5.5f)));
        1:  178:    std::vector<std::unique_ptr<Node>> elseNodes;
        1:  179:    elseNodes.push_back(std::make_unique<StringNode>(Token(TokenType::STRING, dummyPos, "testString")));
        -:  180:
        1:  181:    const std::unique_ptr<Node> mockNode = std::make_unique<IfStmt>(std::move(comparison), std::move(ifNodes), std::move(elseNodes));
        1:  182:    std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
       1*:  183:    ASSERT_NE(result, nullptr);
       1*:  184:    auto* boolLiteral = dynamic_cast<IntLiteral*>(result.get());
       1*:  185:    ASSERT_NE(boolLiteral, nullptr);
       1*:  186:    EXPECT_EQ(boolLiteral->getNumberValue(), 10);
        1:  187:}
------------------
_ZN45InterpreterTest_testVisitIfStatementNode_TestC1Ev:
function _ZN45InterpreterTest_testVisitIfStatementNode_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  172:TEST(InterpreterTest, testVisitIfStatementNode) {
        1:  172-block  0
call    0 returned 1
------------------
_ZN45InterpreterTest_testVisitIfStatementNode_TestD0Ev:
function _ZN45InterpreterTest_testVisitIfStatementNode_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  172:TEST(InterpreterTest, testVisitIfStatementNode) {
        1:  172-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN45InterpreterTest_testVisitIfStatementNode_TestD1Ev:
function _ZN45InterpreterTest_testVisitIfStatementNode_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  172:TEST(InterpreterTest, testVisitIfStatementNode) {
        1:  172-block  0
call    0 returned 1
------------------
_ZN45InterpreterTest_testVisitIfStatementNode_Test8TestBodyEv:
function _ZN45InterpreterTest_testVisitIfStatementNode_Test8TestBodyEv called 1 returned 100% blocks executed 42%
        1:  172:TEST(InterpreterTest, testVisitIfStatementNode) {
        1:  173:    auto context = makeMockContext();
        1:  173-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  174:    std::unique_ptr<Node> comparison = makeNumbernode(10);
        1:  174-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  175:
        1:  176:    std::vector<std::unique_ptr<Node>> ifNodes;
        1:  176-block  0
call    0 returned 1
        1:  177:    ifNodes.push_back(std::make_unique<Number>(Token(TokenType::FLOAT, dummyPos, 5.5f)));
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  177-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  177-block  1
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1:  177-block  2
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
    $$$$$:  177-block  3
call   15 never executed
    $$$$$:  177-block  4
call   16 never executed
    $$$$$:  177-block  5
call   17 never executed
    $$$$$:  177-block  6
call   18 never executed
    $$$$$:  177-block  7
    $$$$$:  177-block  8
    $$$$$:  177-block  9
    $$$$$:  177-block 10
    $$$$$:  177-block 11
        1:  178:    std::vector<std::unique_ptr<Node>> elseNodes;
call    0 returned 1
        1:  179:    elseNodes.push_back(std::make_unique<StringNode>(Token(TokenType::STRING, dummyPos, "testString")));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  179-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  179-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  179-block  2
call    9 returned 1
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1:  179-block  3
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
    $$$$$:  179-block  4
call   17 never executed
    $$$$$:  179-block  5
call   18 never executed
    $$$$$:  179-block  6
call   19 never executed
    $$$$$:  179-block  7
call   20 never executed
    $$$$$:  179-block  8
    $$$$$:  179-block  9
    $$$$$:  179-block 10
    $$$$$:  179-block 11
        -:  180:
        1:  181:    const std::unique_ptr<Node> mockNode = std::make_unique<IfStmt>(std::move(comparison), std::move(ifNodes), std::move(elseNodes));
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  181-block  0
call    6 returned 1
call    7 returned 1
    $$$$$:  181-block  1
        1:  182:    std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  183:    ASSERT_NE(result, nullptr);
        1:  183-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  183-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  183-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  183-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  183-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  183-block  5
call   16 never executed
call   17 never executed
        1:  183-block  6
        1:  183-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  183-block  8
    $$$$$:  183-block  9
    $$$$$:  183-block 10
call   21 never executed
    $$$$$:  183-block 11
    $$$$$:  183-block 12
call   22 never executed
    $$$$$:  183-block 13
    $$$$$:  183-block 14
call   23 never executed
       1*:  184:    auto* boolLiteral = dynamic_cast<IntLiteral*>(result.get());
        1:  184-block  0
call    0 returned 1
branch  1 taken 1
branch  2 taken 0
        1:  184-block  1
    %%%%%:  184-block  2
       1*:  185:    ASSERT_NE(boolLiteral, nullptr);
        1:  185-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  185-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  185-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  185-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  185-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  185-block  5
call   16 never executed
call   17 never executed
        1:  185-block  6
        1:  185-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  185-block  8
    $$$$$:  185-block  9
    $$$$$:  185-block 10
call   21 never executed
    $$$$$:  185-block 11
    $$$$$:  185-block 12
call   22 never executed
    $$$$$:  185-block 13
    $$$$$:  185-block 14
call   23 never executed
       1*:  186:    EXPECT_EQ(boolLiteral->getNumberValue(), 10);
        1:  186-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  186-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  186-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  186-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  186-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  186-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  186-block  6
call   19 never executed
call   20 never executed
        1:  186-block  7
call   21 returned 1
    $$$$$:  186-block  8
    $$$$$:  186-block  9
    $$$$$:  186-block 10
call   22 never executed
    $$$$$:  186-block 11
    $$$$$:  186-block 12
call   23 never executed
    $$$$$:  186-block 13
    $$$$$:  186-block 14
call   24 never executed
        1:  187:}
        1:  187-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  187-block  1
        1:  187-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  187-block  3
        1:  187-block  4
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  187-block  5
        1:  187-block  6
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0
        1:  187-block  7
        1:  187-block  8
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0
        1:  187-block  9
        1:  187-block 10
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0
    $$$$$:  187-block 11
call   18 never executed
    $$$$$:  187-block 12
call   19 never executed
    $$$$$:  187-block 13
call   20 never executed
    $$$$$:  187-block 14
call   21 never executed
    $$$$$:  187-block 15
call   22 never executed
    $$$$$:  187-block 16
call   23 never executed
------------------
        -:  188:
        4:  189:TEST(InterpreterTest, testVisitWhileStatementNode) {
        1:  190:    auto context = makeMockContext();
        3:  191:    context.getSymbolTable().set("x", std::make_unique<IntLiteral>(0));
        1:  192:    std::unique_ptr<Node> mockLeftNode = std::make_unique<VarAccess>(Token(TokenType::IDENTIFIER, dummyPos, "x"));
        1:  193:    Operator operatorNode = Operator(Token(TokenType::LESSTHAN, dummyPos));
        1:  194:    std::unique_ptr<Node> mockRightNode = makeNumbernode(10);
        1:  195:    std::unique_ptr<Node> comparison = std::make_unique<BinaryOperator>(std::move(mockLeftNode), operatorNode, std::move(mockRightNode));
        -:  196:
        1:  197:    std::vector<std::unique_ptr<Node>> whileNodes;
        1:  198:    whileNodes.push_back(std::make_unique<VarIncrement>(Token(TokenType::IDENTIFIER, dummyPos, "x")));
        -:  199:
        1:  200:    const std::unique_ptr<Node> mockNode = std::make_unique<WhileStmt>(std::move(comparison), std::move(whileNodes));
        1:  201:    std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
       1*:  202:    ASSERT_NE(result, nullptr);
       1*:  203:    auto* boolLiteral = dynamic_cast<BoolLiteral*>(result.get());
       1*:  204:    ASSERT_NE(boolLiteral, nullptr);
       1*:  205:    EXPECT_EQ(boolLiteral->getNumberValue(), true);
       3*:  206:    EXPECT_EQ(context.getSymbolTable().getLiteral("x")->getNumberValue(), 10);
        1:  207:}
------------------
_ZN48InterpreterTest_testVisitWhileStatementNode_TestC1Ev:
function _ZN48InterpreterTest_testVisitWhileStatementNode_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  189:TEST(InterpreterTest, testVisitWhileStatementNode) {
        1:  189-block  0
call    0 returned 1
------------------
_ZN48InterpreterTest_testVisitWhileStatementNode_TestD0Ev:
function _ZN48InterpreterTest_testVisitWhileStatementNode_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  189:TEST(InterpreterTest, testVisitWhileStatementNode) {
        1:  189-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN48InterpreterTest_testVisitWhileStatementNode_TestD1Ev:
function _ZN48InterpreterTest_testVisitWhileStatementNode_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  189:TEST(InterpreterTest, testVisitWhileStatementNode) {
        1:  189-block  0
call    0 returned 1
------------------
_ZN48InterpreterTest_testVisitWhileStatementNode_Test8TestBodyEv:
function _ZN48InterpreterTest_testVisitWhileStatementNode_Test8TestBodyEv called 1 returned 100% blocks executed 43%
        1:  189:TEST(InterpreterTest, testVisitWhileStatementNode) {
        1:  190:    auto context = makeMockContext();
        1:  190-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:  191:    context.getSymbolTable().set("x", std::make_unique<IntLiteral>(0));
        1:  191-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  191-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  191-block  2
call    6 returned 1
        1:  191-block  3
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  191-block  4
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1:  191-block  5
call   13 returned 1
call   14 returned 1
call   15 returned 1
    $$$$$:  191-block  6
call   16 never executed
    $$$$$:  191-block  7
    $$$$$:  191-block  8
    $$$$$:  191-block  9
call   17 never executed
    $$$$$:  191-block 10
call   18 never executed
    $$$$$:  191-block 11
    $$$$$:  191-block 12
    $$$$$:  191-block 13
        1:  192:    std::unique_ptr<Node> mockLeftNode = std::make_unique<VarAccess>(Token(TokenType::IDENTIFIER, dummyPos, "x"));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  192-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  192-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  192-block  2
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  192-block  3
call   13 never executed
    $$$$$:  192-block  4
call   14 never executed
    $$$$$:  192-block  5
    $$$$$:  192-block  6
    $$$$$:  192-block  7
        1:  193:    Operator operatorNode = Operator(Token(TokenType::LESSTHAN, dummyPos));
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  193-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  193-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:  193-block  2
call    9 never executed
    $$$$$:  193-block  3
call   10 never executed
    $$$$$:  193-block  4
    $$$$$:  193-block  5
    $$$$$:  193-block  6
        1:  194:    std::unique_ptr<Node> mockRightNode = makeNumbernode(10);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  195:    std::unique_ptr<Node> comparison = std::make_unique<BinaryOperator>(std::move(mockLeftNode), operatorNode, std::move(mockRightNode));
        1:  195-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  195-block  1
call    5 returned 1
call    6 returned 1
    $$$$$:  195-block  2
        -:  196:
        1:  197:    std::vector<std::unique_ptr<Node>> whileNodes;
call    0 returned 1
        1:  198:    whileNodes.push_back(std::make_unique<VarIncrement>(Token(TokenType::IDENTIFIER, dummyPos, "x")));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  198-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  198-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  198-block  2
call    9 returned 1
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1:  198-block  3
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
    $$$$$:  198-block  4
call   17 never executed
    $$$$$:  198-block  5
call   18 never executed
    $$$$$:  198-block  6
call   19 never executed
    $$$$$:  198-block  7
call   20 never executed
    $$$$$:  198-block  8
    $$$$$:  198-block  9
    $$$$$:  198-block 10
    $$$$$:  198-block 11
        -:  199:
        1:  200:    const std::unique_ptr<Node> mockNode = std::make_unique<WhileStmt>(std::move(comparison), std::move(whileNodes));
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  200-block  0
call    5 returned 1
call    6 returned 1
    $$$$$:  200-block  1
        1:  201:    std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  202:    ASSERT_NE(result, nullptr);
        1:  202-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  202-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  202-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  202-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  202-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  202-block  5
call   16 never executed
call   17 never executed
        1:  202-block  6
        1:  202-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  202-block  8
    $$$$$:  202-block  9
    $$$$$:  202-block 10
call   21 never executed
    $$$$$:  202-block 11
    $$$$$:  202-block 12
call   22 never executed
    $$$$$:  202-block 13
    $$$$$:  202-block 14
call   23 never executed
       1*:  203:    auto* boolLiteral = dynamic_cast<BoolLiteral*>(result.get());
        1:  203-block  0
call    0 returned 1
branch  1 taken 1
branch  2 taken 0
        1:  203-block  1
    %%%%%:  203-block  2
       1*:  204:    ASSERT_NE(boolLiteral, nullptr);
        1:  204-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  204-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  204-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  204-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  204-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  204-block  5
call   16 never executed
call   17 never executed
        1:  204-block  6
        1:  204-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  204-block  8
    $$$$$:  204-block  9
    $$$$$:  204-block 10
call   21 never executed
    $$$$$:  204-block 11
    $$$$$:  204-block 12
call   22 never executed
    $$$$$:  204-block 13
    $$$$$:  204-block 14
call   23 never executed
       1*:  205:    EXPECT_EQ(boolLiteral->getNumberValue(), true);
        1:  205-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  205-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  205-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  205-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  205-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  205-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  205-block  6
call   19 never executed
call   20 never executed
        1:  205-block  7
call   21 returned 1
    $$$$$:  205-block  8
    $$$$$:  205-block  9
    $$$$$:  205-block 10
call   22 never executed
    $$$$$:  205-block 11
    $$$$$:  205-block 12
call   23 never executed
    $$$$$:  205-block 13
    $$$$$:  205-block 14
call   24 never executed
       3*:  206:    EXPECT_EQ(context.getSymbolTable().getLiteral("x")->getNumberValue(), 10);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  206-block  0
        1:  206-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  206-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  206-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  206-block  4
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
        1:  206-block  5
call   15 returned 1
call   16 returned 1
branch 17 taken 0 (fallthrough)
branch 18 taken 1
    %%%%%:  206-block  6
call   19 never executed
branch 20 never executed (fallthrough)
branch 21 never executed (throw)
    %%%%%:  206-block  7
call   22 never executed
call   23 never executed
branch 24 never executed (fallthrough)
branch 25 never executed (throw)
    %%%%%:  206-block  8
call   26 never executed
branch 27 never executed (fallthrough)
branch 28 never executed (throw)
    %%%%%:  206-block  9
call   29 never executed
call   30 never executed
        1:  206-block 10
call   31 returned 1
    $$$$$:  206-block 11
call   32 never executed
    $$$$$:  206-block 12
    $$$$$:  206-block 13
    $$$$$:  206-block 14
    $$$$$:  206-block 15
    $$$$$:  206-block 16
call   33 never executed
    $$$$$:  206-block 17
    $$$$$:  206-block 18
call   34 never executed
    $$$$$:  206-block 19
    $$$$$:  206-block 20
call   35 never executed
        1:  207:}
        1:  207-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  207-block  1
        1:  207-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  207-block  3
        1:  207-block  4
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  207-block  5
        1:  207-block  6
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0
        1:  207-block  7
        1:  207-block  8
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0
        1:  207-block  9
        1:  207-block 10
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0
        1:  207-block 11
        1:  207-block 12
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  207-block 13
        1:  207-block 14
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0
    $$$$$:  207-block 15
call   24 never executed
    $$$$$:  207-block 16
call   25 never executed
    $$$$$:  207-block 17
call   26 never executed
    $$$$$:  207-block 18
call   27 never executed
    $$$$$:  207-block 19
call   28 never executed
    $$$$$:  207-block 20
call   29 never executed
    $$$$$:  207-block 21
call   30 never executed
    $$$$$:  207-block 22
call   31 never executed
------------------
        -:  208:
        4:  209:TEST(InterpreterTest, testVisitLibCall) {
        1:  210:    auto context = makeMockContext();
        1:  211:    std::vector<std::unique_ptr<Node>> args;
        1:  212:    args.push_back(makeNumbernode(5));
        -:  213:
        2:  214:    const std::unique_ptr<Node> mockNode = std::make_unique<LibCall>(
        2:  215:        Token(TokenType::KEYWORD, dummyPos, "out"),
        1:  216:        std::move(args)
        1:  217:    );
        -:  218:
        -:  219:
        -:  220:
        1:  221:    std::stringstream buffer;
        1:  222:    std::streambuf* oldCoutBuffer = std::cout.rdbuf(buffer.rdbuf());
        -:  223:
        1:  224:    Interpreter::visit(mockNode, &context);
        -:  225:
        1:  226:    std::cout.rdbuf(oldCoutBuffer);
        -:  227:
        1:  228:    std::string output = buffer.str();
       1*:  229:    EXPECT_NE(output.find("5"), std::string::npos);
        1:  230:}
------------------
_ZN37InterpreterTest_testVisitLibCall_TestC1Ev:
function _ZN37InterpreterTest_testVisitLibCall_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  209:TEST(InterpreterTest, testVisitLibCall) {
        1:  209-block  0
call    0 returned 1
------------------
_ZN37InterpreterTest_testVisitLibCall_TestD0Ev:
function _ZN37InterpreterTest_testVisitLibCall_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  209:TEST(InterpreterTest, testVisitLibCall) {
        1:  209-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN37InterpreterTest_testVisitLibCall_TestD1Ev:
function _ZN37InterpreterTest_testVisitLibCall_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  209:TEST(InterpreterTest, testVisitLibCall) {
        1:  209-block  0
call    0 returned 1
------------------
_ZN37InterpreterTest_testVisitLibCall_Test8TestBodyEv:
function _ZN37InterpreterTest_testVisitLibCall_Test8TestBodyEv called 1 returned 100% blocks executed 46%
        1:  209:TEST(InterpreterTest, testVisitLibCall) {
        1:  210:    auto context = makeMockContext();
        1:  210-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  211:    std::vector<std::unique_ptr<Node>> args;
        1:  211-block  0
call    0 returned 1
        1:  212:    args.push_back(makeNumbernode(5));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  212-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  212-block  1
call    6 returned 1
    $$$$$:  212-block  2
call    7 never executed
    $$$$$:  212-block  3
        -:  213:
        2:  214:    const std::unique_ptr<Node> mockNode = std::make_unique<LibCall>(
        1:  214-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  214-block  1
        2:  215:        Token(TokenType::KEYWORD, dummyPos, "out"),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  215-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
call    7 returned 1
    $$$$$:  215-block  1
call    8 never executed
    $$$$$:  215-block  2
call    9 never executed
    $$$$$:  215-block  3
    $$$$$:  215-block  4
        1:  216:        std::move(args)
call    0 returned 1
        1:  217:    );
        1:  217-block  0
call    0 returned 1
        -:  218:
        -:  219:
        -:  220:
        1:  221:    std::stringstream buffer;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  222:    std::streambuf* oldCoutBuffer = std::cout.rdbuf(buffer.rdbuf());
        1:  222-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -:  223:
        1:  224:    Interpreter::visit(mockNode, &context);
        1:  224-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  224-block  1
call    3 returned 1
    $$$$$:  224-block  2
        -:  225:
        1:  226:    std::cout.rdbuf(oldCoutBuffer);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  227:
        1:  228:    std::string output = buffer.str();
        1:  228-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  229:    EXPECT_NE(output.find("5"), std::string::npos);
        1:  229-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  229-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  229-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  229-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  229-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  229-block  5
call   17 never executed
call   18 never executed
        1:  229-block  6
call   19 returned 1
    $$$$$:  229-block  7
    $$$$$:  229-block  8
call   20 never executed
    $$$$$:  229-block  9
    $$$$$:  229-block 10
call   21 never executed
    $$$$$:  229-block 11
    $$$$$:  229-block 12
call   22 never executed
        1:  230:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
    $$$$$:  230-block  0
call    5 never executed
    $$$$$:  230-block  1
call    6 never executed
    $$$$$:  230-block  2
call    7 never executed
    $$$$$:  230-block  3
call    8 never executed
    $$$$$:  230-block  4
call    9 never executed
------------------
        -:  231:
        4:  232:TEST(InterpreterTest, testVisitFuncDefinition) {
        1:  233:    auto context = makeMockContext();
        -:  234:
        1:  235:    std::vector<Token> args;
        1:  236:    args.push_back(Token(TokenType::IDENTIFIER, dummyPos, "argName"));
        1:  237:    std::vector<std::unique_ptr<Node>> body;
        1:  238:    body.push_back(std::make_unique<ReturnCall>(Token(TokenType::KEYWORD, dummyPos, "return"), makeNumbernode(10)));
        -:  239:
        2:  240:    const std::unique_ptr<Node> mockNode = std::make_unique<FuncDef>(
        2:  241:        Token(TokenType::IDENTIFIER, dummyPos, "testFunc"),
        1:  242:        std::move(args),
        1:  243:        std::move(body)
        1:  244:    );
        1:  245:    std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
       1*:  246:    ASSERT_NE(result, nullptr);
       1*:  247:    auto* funcLiteral = dynamic_cast<FunctionLiteral*>(result.get());
       1*:  248:    ASSERT_NE(funcLiteral, nullptr);
        -:  249:
       2*:  250:    auto* symbolFuncLiteral = dynamic_cast<FunctionLiteral*>(context.getSymbolTable().getLiteral("testFunc"));
       1*:  251:    ASSERT_NE(symbolFuncLiteral, nullptr);
        -:  252:
        1:  253:}
------------------
_ZN44InterpreterTest_testVisitFuncDefinition_TestC1Ev:
function _ZN44InterpreterTest_testVisitFuncDefinition_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  232:TEST(InterpreterTest, testVisitFuncDefinition) {
        1:  232-block  0
call    0 returned 1
------------------
_ZN44InterpreterTest_testVisitFuncDefinition_TestD0Ev:
function _ZN44InterpreterTest_testVisitFuncDefinition_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  232:TEST(InterpreterTest, testVisitFuncDefinition) {
        1:  232-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN44InterpreterTest_testVisitFuncDefinition_TestD1Ev:
function _ZN44InterpreterTest_testVisitFuncDefinition_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  232:TEST(InterpreterTest, testVisitFuncDefinition) {
        1:  232-block  0
call    0 returned 1
------------------
_ZN44InterpreterTest_testVisitFuncDefinition_Test8TestBodyEv:
function _ZN44InterpreterTest_testVisitFuncDefinition_Test8TestBodyEv called 1 returned 100% blocks executed 44%
        1:  232:TEST(InterpreterTest, testVisitFuncDefinition) {
        1:  233:    auto context = makeMockContext();
        1:  233-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  234:
        1:  235:    std::vector<Token> args;
        1:  235-block  0
call    0 returned 1
        1:  236:    args.push_back(Token(TokenType::IDENTIFIER, dummyPos, "argName"));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  236-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  236-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  236-block  2
call    9 returned 1
call   10 returned 1
    $$$$$:  236-block  3
call   11 never executed
    $$$$$:  236-block  4
call   12 never executed
    $$$$$:  236-block  5
    $$$$$:  236-block  6
        1:  237:    std::vector<std::unique_ptr<Node>> body;
call    0 returned 1
        1:  238:    body.push_back(std::make_unique<ReturnCall>(Token(TokenType::KEYWORD, dummyPos, "return"), makeNumbernode(10)));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  238-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  238-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  238-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  238-block  3
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:  238-block  4
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
    $$$$$:  238-block  5
call   21 never executed
    $$$$$:  238-block  6
call   22 never executed
    $$$$$:  238-block  7
call   23 never executed
    $$$$$:  238-block  8
call   24 never executed
    $$$$$:  238-block  9
    $$$$$:  238-block 10
    $$$$$:  238-block 11
call   25 never executed
    $$$$$:  238-block 12
    $$$$$:  238-block 13
    $$$$$:  238-block 14
        -:  239:
        2:  240:    const std::unique_ptr<Node> mockNode = std::make_unique<FuncDef>(
        1:  240-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  240-block  1
        2:  241:        Token(TokenType::IDENTIFIER, dummyPos, "testFunc"),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  241-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
call    7 returned 1
    $$$$$:  241-block  1
call    8 never executed
    $$$$$:  241-block  2
call    9 never executed
    $$$$$:  241-block  3
    $$$$$:  241-block  4
        1:  242:        std::move(args),
call    0 returned 1
        1:  243:        std::move(body)
call    0 returned 1
        1:  244:    );
        1:  244-block  0
call    0 returned 1
        1:  245:    std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  246:    ASSERT_NE(result, nullptr);
        1:  246-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  246-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  246-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  246-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  246-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  246-block  5
call   16 never executed
call   17 never executed
        1:  246-block  6
        1:  246-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  246-block  8
    $$$$$:  246-block  9
    $$$$$:  246-block 10
call   21 never executed
    $$$$$:  246-block 11
    $$$$$:  246-block 12
call   22 never executed
    $$$$$:  246-block 13
    $$$$$:  246-block 14
call   23 never executed
       1*:  247:    auto* funcLiteral = dynamic_cast<FunctionLiteral*>(result.get());
        1:  247-block  0
call    0 returned 1
branch  1 taken 1
branch  2 taken 0
        1:  247-block  1
    %%%%%:  247-block  2
       1*:  248:    ASSERT_NE(funcLiteral, nullptr);
        1:  248-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  248-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  248-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  248-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  248-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  248-block  5
call   16 never executed
call   17 never executed
        1:  248-block  6
        1:  248-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  248-block  8
    $$$$$:  248-block  9
    $$$$$:  248-block 10
call   21 never executed
    $$$$$:  248-block 11
    $$$$$:  248-block 12
call   22 never executed
    $$$$$:  248-block 13
    $$$$$:  248-block 14
call   23 never executed
        -:  249:
       2*:  250:    auto* symbolFuncLiteral = dynamic_cast<FunctionLiteral*>(context.getSymbolTable().getLiteral("testFunc"));
        1:  250-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  250-block  1
        1:  250-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  250-block  3
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  250-block  4
branch  9 taken 1 (fallthrough)
branch 10 taken 0
        1:  250-block  5
    %%%%%:  250-block  6
        1:  250-block  7
call   11 returned 1
    $$$$$:  250-block  8
call   12 never executed
    $$$$$:  250-block  9
    $$$$$:  250-block 10
       1*:  251:    ASSERT_NE(symbolFuncLiteral, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  251-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  251-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  251-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  251-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  251-block  4
call   16 never executed
call   17 never executed
        1:  251-block  5
        1:  251-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  251-block  7
    $$$$$:  251-block  8
    $$$$$:  251-block  9
call   21 never executed
    $$$$$:  251-block 10
    $$$$$:  251-block 11
call   22 never executed
    $$$$$:  251-block 12
    $$$$$:  251-block 13
call   23 never executed
        -:  252:
        1:  253:}
        1:  253-block  0
        1:  253-block  1
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  253-block  2
        1:  253-block  3
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  253-block  4
        1:  253-block  5
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  253-block  6
        1:  253-block  7
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0
        1:  253-block  8
        1:  253-block  9
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0
    $$$$$:  253-block 10
call   15 never executed
    $$$$$:  253-block 11
call   16 never executed
    $$$$$:  253-block 12
call   17 never executed
    $$$$$:  253-block 13
call   18 never executed
    $$$$$:  253-block 14
call   19 never executed
------------------
        -:  254:
        4:  255:TEST(InterpreterTest, testVisitFuncCall) {
        1:  256:    auto context = makeMockContext();
        1:  257:    std::unique_ptr<Context> funcContext = std::make_unique<Context>(makeMockContext());
        1:  258:    std::vector<Token> args;
        1:  259:    args.push_back(Token(TokenType::IDENTIFIER, dummyPos, "argName"));
        1:  260:    std::vector<std::unique_ptr<Node>> body;
        1:  261:    body.push_back(std::make_unique<ReturnCall>(Token(TokenType::KEYWORD, dummyPos, "return"), makeNumbernode(10)));
        1:  262:    std::unique_ptr<Literal> mockFunc = std::make_unique<FunctionLiteral>("testFunc", std::move(args), std::move(body), std::move(funcContext));
        1:  263:    mockFunc->setContext(&context);
        1:  264:    mockFunc->setPosition(dummyPos);
        3:  265:    context.getSymbolTable().set("testFunc", std::move(mockFunc));
        -:  266:
        1:  267:    std::vector<std::unique_ptr<Node>> callArgs;
        1:  268:    callArgs.push_back( makeNumbernode(10));
        -:  269:
        2:  270:    const std::unique_ptr<Node> mockNode = std::make_unique<FuncCall>(
        2:  271:        Token(TokenType::IDENTIFIER, dummyPos, "testFunc"),
        1:  272:        std::move(callArgs)
        1:  273:    );
        1:  274:    std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
        -:  275:
       1*:  276:    ASSERT_NE(result, nullptr);
       1*:  277:    auto* numberLiteral = dynamic_cast<NumberLiteral*>(result.get());
       1*:  278:    ASSERT_NE(numberLiteral, nullptr);
        -:  279:
       1*:  280:    ASSERT_EQ(numberLiteral->getNumberValue(), 10);
        1:  281:}
------------------
_ZN38InterpreterTest_testVisitFuncCall_TestC1Ev:
function _ZN38InterpreterTest_testVisitFuncCall_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  255:TEST(InterpreterTest, testVisitFuncCall) {
        1:  255-block  0
call    0 returned 1
------------------
_ZN38InterpreterTest_testVisitFuncCall_TestD0Ev:
function _ZN38InterpreterTest_testVisitFuncCall_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  255:TEST(InterpreterTest, testVisitFuncCall) {
        1:  255-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN38InterpreterTest_testVisitFuncCall_TestD1Ev:
function _ZN38InterpreterTest_testVisitFuncCall_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  255:TEST(InterpreterTest, testVisitFuncCall) {
        1:  255-block  0
call    0 returned 1
------------------
_ZN38InterpreterTest_testVisitFuncCall_Test8TestBodyEv:
function _ZN38InterpreterTest_testVisitFuncCall_Test8TestBodyEv called 1 returned 100% blocks executed 47%
        1:  255:TEST(InterpreterTest, testVisitFuncCall) {
        1:  256:    auto context = makeMockContext();
        1:  256-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  257:    std::unique_ptr<Context> funcContext = std::make_unique<Context>(makeMockContext());
        1:  257-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  257-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  257-block  2
call    6 returned 1
    $$$$$:  257-block  3
call    7 never executed
    $$$$$:  257-block  4
        1:  258:    std::vector<Token> args;
call    0 returned 1
        1:  259:    args.push_back(Token(TokenType::IDENTIFIER, dummyPos, "argName"));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  259-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  259-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  259-block  2
call    9 returned 1
call   10 returned 1
    $$$$$:  259-block  3
call   11 never executed
    $$$$$:  259-block  4
call   12 never executed
    $$$$$:  259-block  5
    $$$$$:  259-block  6
        1:  260:    std::vector<std::unique_ptr<Node>> body;
call    0 returned 1
        1:  261:    body.push_back(std::make_unique<ReturnCall>(Token(TokenType::KEYWORD, dummyPos, "return"), makeNumbernode(10)));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  261-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  261-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  261-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  261-block  3
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:  261-block  4
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
    $$$$$:  261-block  5
call   21 never executed
    $$$$$:  261-block  6
call   22 never executed
    $$$$$:  261-block  7
call   23 never executed
    $$$$$:  261-block  8
call   24 never executed
    $$$$$:  261-block  9
    $$$$$:  261-block 10
    $$$$$:  261-block 11
call   25 never executed
    $$$$$:  261-block 12
    $$$$$:  261-block 13
    $$$$$:  261-block 14
        1:  262:    std::unique_ptr<Literal> mockFunc = std::make_unique<FunctionLiteral>("testFunc", std::move(args), std::move(body), std::move(funcContext));
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  262-block  0
call    6 returned 1
call    7 returned 1
    $$$$$:  262-block  1
        1:  263:    mockFunc->setContext(&context);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  264:    mockFunc->setPosition(dummyPos);
        1:  264-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        3:  265:    context.getSymbolTable().set("testFunc", std::move(mockFunc));
        1:  265-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  265-block  1
call    3 returned 1
call    4 returned 1
        1:  265-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:  265-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1:  265-block  4
call   11 returned 1
call   12 returned 1
    $$$$$:  265-block  5
call   13 never executed
    $$$$$:  265-block  6
    $$$$$:  265-block  7
    $$$$$:  265-block  8
call   14 never executed
    $$$$$:  265-block  9
        -:  266:
        1:  267:    std::vector<std::unique_ptr<Node>> callArgs;
call    0 returned 1
        1:  268:    callArgs.push_back( makeNumbernode(10));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  268-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  268-block  1
call    6 returned 1
    $$$$$:  268-block  2
call    7 never executed
    $$$$$:  268-block  3
        -:  269:
        2:  270:    const std::unique_ptr<Node> mockNode = std::make_unique<FuncCall>(
        1:  270-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  270-block  1
        2:  271:        Token(TokenType::IDENTIFIER, dummyPos, "testFunc"),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  271-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
call    7 returned 1
    $$$$$:  271-block  1
call    8 never executed
    $$$$$:  271-block  2
call    9 never executed
    $$$$$:  271-block  3
    $$$$$:  271-block  4
        1:  272:        std::move(callArgs)
call    0 returned 1
        1:  273:    );
        1:  273-block  0
call    0 returned 1
        1:  274:    std::unique_ptr<Literal> result = Interpreter::visit(mockNode, &context);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  275:
       1*:  276:    ASSERT_NE(result, nullptr);
        1:  276-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  276-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  276-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  276-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  276-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  276-block  5
call   16 never executed
call   17 never executed
        1:  276-block  6
        1:  276-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  276-block  8
    $$$$$:  276-block  9
    $$$$$:  276-block 10
call   21 never executed
    $$$$$:  276-block 11
    $$$$$:  276-block 12
call   22 never executed
    $$$$$:  276-block 13
    $$$$$:  276-block 14
call   23 never executed
       1*:  277:    auto* numberLiteral = dynamic_cast<NumberLiteral*>(result.get());
        1:  277-block  0
call    0 returned 1
branch  1 taken 1
branch  2 taken 0
        1:  277-block  1
    %%%%%:  277-block  2
       1*:  278:    ASSERT_NE(numberLiteral, nullptr);
        1:  278-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  278-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  278-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  278-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  278-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  278-block  5
call   16 never executed
call   17 never executed
        1:  278-block  6
        1:  278-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  278-block  8
    $$$$$:  278-block  9
    $$$$$:  278-block 10
call   21 never executed
    $$$$$:  278-block 11
    $$$$$:  278-block 12
call   22 never executed
    $$$$$:  278-block 13
    $$$$$:  278-block 14
call   23 never executed
        -:  279:
       1*:  280:    ASSERT_EQ(numberLiteral->getNumberValue(), 10);
        1:  280-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  280-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  280-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  280-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  280-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  280-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  280-block  6
call   19 never executed
call   20 never executed
        1:  280-block  7
        1:  280-block  8
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0
        1:  280-block  9
    $$$$$:  280-block 10
    $$$$$:  280-block 11
    $$$$$:  280-block 12
call   24 never executed
    $$$$$:  280-block 13
    $$$$$:  280-block 14
call   25 never executed
    $$$$$:  280-block 15
    $$$$$:  280-block 16
call   26 never executed
        1:  281:}
        1:  281-block  0
        1:  281-block  1
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  281-block  2
        1:  281-block  3
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  281-block  4
        1:  281-block  5
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  281-block  6
        1:  281-block  7
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0
        1:  281-block  8
        1:  281-block  9
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0
        1:  281-block 10
        1:  281-block 11
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0
        1:  281-block 12
        1:  281-block 13
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  281-block 14
        1:  281-block 15
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0
    $$$$$:  281-block 16
call   24 never executed
    $$$$$:  281-block 17
call   25 never executed
    $$$$$:  281-block 18
call   26 never executed
    $$$$$:  281-block 19
call   27 never executed
    $$$$$:  281-block 20
call   28 never executed
    $$$$$:  281-block 21
call   29 never executed
    $$$$$:  281-block 22
call   30 never executed
    $$$$$:  281-block 23
call   31 never executed
------------------
        -:  282:
        -:  283:
