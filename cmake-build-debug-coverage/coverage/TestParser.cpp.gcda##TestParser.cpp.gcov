        -:    0:Source:D:/Project Workspace/Year3/VIS/tests/TestParser.cpp
        -:    0:Graph:D:\Project Workspace\Year3\VIS\cmake-build-debug-coverage\tests\CMakeFiles\vis_tests.dir\TestParser.cpp.gcno
        -:    0:Data:D:\Project Workspace\Year3\VIS\cmake-build-debug-coverage\tests\CMakeFiles\vis_tests.dir\TestParser.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <gmock/gmock.h>
        -:    2:#include <gtest/gtest.h>
        -:    3:#include "TestHelpers.h"
        -:    4:#include "Parser.h"
        -:    5:#include "Token.h"
        -:    6:#include "Node.h"
        -:    7:
        4:    8:TEST(ParserTest, ParsesSimpleVariableAssignment) {
        -:    9:
        -:   10:    std::vector<Token> tokens = {
        -:   11:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:   12:        Token(TokenType::IDENTIFIER, dummyPos, "x"),
        -:   13:        Token(TokenType::EQUALS, dummyPos),
    #####:   14:        Token(TokenType::INT, dummyPos, 42),
        -:   15:        Token(TokenType::EOL, dummyPos)
        7:   16:    };
        -:   17:
        5:   18:    std::map<int, std::vector<Token>> tokenMap = { {0, tokens}, {1, {Token(TokenType::EOF_, dummyPos)}} };
        -:   19:
        1:   20:    Parser parser(tokenMap);
        -:   21:
        -:   22:    // Act: Parse the tokens
        1:   23:    std::unique_ptr<Node> node = parser.parse();
        -:   24:
        -:   25:    // Assert: Check the returned Node
       1*:   26:    ASSERT_NE(node, nullptr);
       1*:   27:    EXPECT_EQ(node->getType(), NodeType::VarAssgnment);
        -:   28:
       1*:   29:    auto* varAssign = dynamic_cast<VarAssignment*>(node.get());
       1*:   30:    ASSERT_NE(varAssign, nullptr);
        -:   31:
       1*:   32:    EXPECT_EQ(std::get<std::string>(varAssign->getToken().getValue()), "x");
        -:   33:
       1*:   34:    auto* valueNode = dynamic_cast<Number*>(varAssign->getValue().get());
       1*:   35:    ASSERT_NE(valueNode, nullptr);
       1*:   36:    EXPECT_EQ(valueNode->getType(), NodeType::Number);
       1*:   37:    EXPECT_EQ(std::get<int>(valueNode->getToken().getValue()), 42);
        7:   38:}
------------------
_ZN46ParserTest_ParsesSimpleVariableAssignment_TestC1Ev:
function _ZN46ParserTest_ParsesSimpleVariableAssignment_TestC1Ev called 1 returned 100% blocks executed 100%
        1:    8:TEST(ParserTest, ParsesSimpleVariableAssignment) {
        1:    8-block  0
call    0 returned 1
------------------
_ZN46ParserTest_ParsesSimpleVariableAssignment_TestD0Ev:
function _ZN46ParserTest_ParsesSimpleVariableAssignment_TestD0Ev called 1 returned 100% blocks executed 100%
        1:    8:TEST(ParserTest, ParsesSimpleVariableAssignment) {
        1:    8-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN46ParserTest_ParsesSimpleVariableAssignment_TestD1Ev:
function _ZN46ParserTest_ParsesSimpleVariableAssignment_TestD1Ev called 1 returned 100% blocks executed 100%
        1:    8:TEST(ParserTest, ParsesSimpleVariableAssignment) {
        1:    8-block  0
call    0 returned 1
------------------
_ZN46ParserTest_ParsesSimpleVariableAssignment_Test8TestBodyEv:
function _ZN46ParserTest_ParsesSimpleVariableAssignment_Test8TestBodyEv called 1 returned 100% blocks executed 35%
        1:    8:TEST(ParserTest, ParsesSimpleVariableAssignment) {
        -:    9:
        -:   10:    std::vector<Token> tokens = {
        -:   11:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:   12:        Token(TokenType::IDENTIFIER, dummyPos, "x"),
        -:   13:        Token(TokenType::EQUALS, dummyPos),
    #####:   14:        Token(TokenType::INT, dummyPos, 42),
    $$$$$:   14-block  0
        -:   15:        Token(TokenType::EOL, dummyPos)
        7:   16:    };
        1:   16-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        6:   16-block  1
branch  3 taken 5 (fallthrough)
branch  4 taken 1
        5:   16-block  2
call    5 returned 5
    $$$$$:   16-block  3
    $$$$$:   16-block  4
    $$$$$:   16-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:   16-block  6
call    8 never executed
    $$$$$:   16-block  7
        -:   17:
        5:   18:    std::map<int, std::vector<Token>> tokenMap = { {0, tokens}, {1, {Token(TokenType::EOF_, dummyPos)}} };
        1:   18-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:   18-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:   18-block  2
call    5 returned 2
        1:   18-block  3
call    6 returned 1
    $$$$$:   18-block  4
    $$$$$:   18-block  5
    $$$$$:   18-block  6
    $$$$$:   18-block  7
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$:   18-block  8
call    9 never executed
    $$$$$:   18-block  9
    $$$$$:   18-block 10
call   10 never executed
    $$$$$:   18-block 11
    $$$$$:   18-block 12
    $$$$$:   18-block 13
        -:   19:
        1:   20:    Parser parser(tokenMap);
        1:   20-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   20-block  1
call    3 returned 1
    $$$$$:   20-block  2
call    4 never executed
    $$$$$:   20-block  3
        -:   21:
        -:   22:    // Act: Parse the tokens
        1:   23:    std::unique_ptr<Node> node = parser.parse();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   24:
        -:   25:    // Assert: Check the returned Node
       1*:   26:    ASSERT_NE(node, nullptr);
        1:   26-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   26-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   26-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   26-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   26-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   26-block  5
call   16 never executed
call   17 never executed
        1:   26-block  6
        1:   26-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:   26-block  8
    $$$$$:   26-block  9
    $$$$$:   26-block 10
call   21 never executed
    $$$$$:   26-block 11
    $$$$$:   26-block 12
call   22 never executed
    $$$$$:   26-block 13
    $$$$$:   26-block 14
call   23 never executed
       1*:   27:    EXPECT_EQ(node->getType(), NodeType::VarAssgnment);
        1:   27-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   27-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   27-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   27-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   27-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   27-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:   27-block  6
call   20 never executed
call   21 never executed
        1:   27-block  7
call   22 returned 1
    $$$$$:   27-block  8
    $$$$$:   27-block  9
    $$$$$:   27-block 10
call   23 never executed
    $$$$$:   27-block 11
    $$$$$:   27-block 12
call   24 never executed
    $$$$$:   27-block 13
    $$$$$:   27-block 14
call   25 never executed
        -:   28:
       1*:   29:    auto* varAssign = dynamic_cast<VarAssignment*>(node.get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   29-block  0
    %%%%%:   29-block  1
       1*:   30:    ASSERT_NE(varAssign, nullptr);
        1:   30-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   30-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   30-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   30-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   30-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   30-block  5
call   16 never executed
call   17 never executed
        1:   30-block  6
        1:   30-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:   30-block  8
    $$$$$:   30-block  9
    $$$$$:   30-block 10
call   21 never executed
    $$$$$:   30-block 11
    $$$$$:   30-block 12
call   22 never executed
    $$$$$:   30-block 13
    $$$$$:   30-block 14
call   23 never executed
        -:   31:
       1*:   32:    EXPECT_EQ(std::get<std::string>(varAssign->getToken().getValue()), "x");
        1:   32-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   32-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   32-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   32-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   32-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:   32-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:   32-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:   32-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:   32-block  8
call   27 never executed
call   28 never executed
        1:   32-block  9
call   29 returned 1
    $$$$$:   32-block 10
call   30 never executed
    $$$$$:   32-block 11
call   31 never executed
    $$$$$:   32-block 12
    $$$$$:   32-block 13
    $$$$$:   32-block 14
call   32 never executed
    $$$$$:   32-block 15
    $$$$$:   32-block 16
call   33 never executed
    $$$$$:   32-block 17
    $$$$$:   32-block 18
call   34 never executed
        -:   33:
       1*:   34:    auto* valueNode = dynamic_cast<Number*>(varAssign->getValue().get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   34-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:   34-block  1
    %%%%%:   34-block  2
       1*:   35:    ASSERT_NE(valueNode, nullptr);
        1:   35-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   35-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   35-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   35-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   35-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   35-block  5
call   16 never executed
call   17 never executed
        1:   35-block  6
        1:   35-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:   35-block  8
    $$$$$:   35-block  9
    $$$$$:   35-block 10
call   21 never executed
    $$$$$:   35-block 11
    $$$$$:   35-block 12
call   22 never executed
    $$$$$:   35-block 13
    $$$$$:   35-block 14
call   23 never executed
       1*:   36:    EXPECT_EQ(valueNode->getType(), NodeType::Number);
        1:   36-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   36-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   36-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   36-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   36-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   36-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   36-block  6
call   19 never executed
call   20 never executed
        1:   36-block  7
call   21 returned 1
    $$$$$:   36-block  8
    $$$$$:   36-block  9
    $$$$$:   36-block 10
call   22 never executed
    $$$$$:   36-block 11
    $$$$$:   36-block 12
call   23 never executed
    $$$$$:   36-block 13
    $$$$$:   36-block 14
call   24 never executed
       1*:   37:    EXPECT_EQ(std::get<int>(valueNode->getToken().getValue()), 42);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   37-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   37-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   37-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   37-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:   37-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:   37-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:   37-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:   37-block  7
call   27 never executed
call   28 never executed
        1:   37-block  8
call   29 returned 1
    $$$$$:   37-block  9
call   30 never executed
    $$$$$:   37-block 10
call   31 never executed
    $$$$$:   37-block 11
    $$$$$:   37-block 12
    $$$$$:   37-block 13
    $$$$$:   37-block 14
call   32 never executed
    $$$$$:   37-block 15
    $$$$$:   37-block 16
call   33 never executed
    $$$$$:   37-block 17
    $$$$$:   37-block 18
call   34 never executed
        7:   38:}
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   38-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   38-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   38-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   38-block  4
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   38-block  5
call   16 returned 1
call   17 returned 1
branch 18 taken 1 (fallthrough)
branch 19 taken 0 (throw)
        1:   38-block  6
call   20 returned 1
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0 (throw)
        1:   38-block  7
        1:   38-block  8
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
branch 30 taken 1 (fallthrough)
branch 31 taken 0 (throw)
        1:   38-block  9
call   32 returned 1
call   33 returned 1
branch 34 taken 1 (fallthrough)
branch 35 taken 0 (throw)
        1:   38-block 10
        1:   38-block 11
call   36 returned 1
branch 37 taken 1 (fallthrough)
branch 38 taken 0 (throw)
        1:   38-block 12
call   39 returned 1
branch 40 taken 1 (fallthrough)
branch 41 taken 0 (throw)
        1:   38-block 13
        1:   38-block 14
call   42 returned 1
        2:   38-block 15
branch 43 taken 1 (fallthrough)
branch 44 taken 1
        1:   38-block 16
call   45 returned 1
call   46 returned 1
branch 47 taken 1 (fallthrough)
branch 48 taken 0 (throw)
        1:   38-block 17
call   49 returned 1
branch 50 taken 1 (fallthrough)
branch 51 taken 0
        1:   38-block 18
        1:   38-block 19
call   52 returned 1
branch 53 taken 1 (fallthrough)
branch 54 taken 0
        1:   38-block 20
        1:   38-block 21
call   55 returned 1
branch 56 taken 1 (fallthrough)
branch 57 taken 0
        1:   38-block 22
        1:   38-block 23
call   58 returned 1
branch 59 taken 1 (fallthrough)
branch 60 taken 0
    $$$$$:   38-block 24
call   61 never executed
    $$$$$:   38-block 25
    $$$$$:   38-block 26
    $$$$$:   38-block 27
call   62 never executed
    $$$$$:   38-block 28
    $$$$$:   38-block 29
call   63 never executed
    $$$$$:   38-block 30
    $$$$$:   38-block 31
    $$$$$:   38-block 32
call   64 never executed
    $$$$$:   38-block 33
    $$$$$:   38-block 34
call   65 never executed
    $$$$$:   38-block 35
    $$$$$:   38-block 36
branch 66 never executed (fallthrough)
branch 67 never executed
    $$$$$:   38-block 37
    $$$$$:   38-block 38
branch 68 never executed (fallthrough)
branch 69 never executed
    $$$$$:   38-block 39
call   70 never executed
    $$$$$:   38-block 40
call   71 never executed
    $$$$$:   38-block 41
    $$$$$:   38-block 42
branch 72 never executed (fallthrough)
branch 73 never executed
    $$$$$:   38-block 43
call   74 never executed
    $$$$$:   38-block 44
    $$$$$:   38-block 45
    $$$$$:   38-block 46
branch 75 never executed (fallthrough)
branch 76 never executed
    $$$$$:   38-block 47
    $$$$$:   38-block 48
branch 77 never executed (fallthrough)
branch 78 never executed
    $$$$$:   38-block 49
call   79 never executed
    $$$$$:   38-block 50
    $$$$$:   38-block 51
    $$$$$:   38-block 52
branch 80 never executed (fallthrough)
branch 81 never executed
    $$$$$:   38-block 53
    $$$$$:   38-block 54
branch 82 never executed (fallthrough)
branch 83 never executed
    $$$$$:   38-block 55
call   84 never executed
    $$$$$:   38-block 56
call   85 never executed
    $$$$$:   38-block 57
call   86 never executed
    $$$$$:   38-block 58
call   87 never executed
    $$$$$:   38-block 59
call   88 never executed
------------------
        -:   39:
        4:   40:TEST(ParserTest, ParsesIncorrectSyntax) {
        -:   41:
        -:   42:    std::vector<Token> tokens = {
        -:   43:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:   44:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:   45:        Token(TokenType::EQUALS, dummyPos),
    #####:   46:        Token(TokenType::INT, dummyPos, 42),
        -:   47:        Token(TokenType::EOL, dummyPos)
        7:   48:    };
        5:   49:    std::map<int, std::vector<Token>> tokenMap = { {0, tokens}, {1, {Token(TokenType::EOF_, dummyPos)}} };
        1:   50:    Parser parser(tokenMap);
        -:   51:
        -:   52:    // Act: Parse the tokens
       1*:   53:    EXPECT_THROW(parser.parse(), InvalidSyntaxError);
        7:   54:}
------------------
_ZN37ParserTest_ParsesIncorrectSyntax_TestC1Ev:
function _ZN37ParserTest_ParsesIncorrectSyntax_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   40:TEST(ParserTest, ParsesIncorrectSyntax) {
        1:   40-block  0
call    0 returned 1
------------------
_ZN37ParserTest_ParsesIncorrectSyntax_TestD0Ev:
function _ZN37ParserTest_ParsesIncorrectSyntax_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   40:TEST(ParserTest, ParsesIncorrectSyntax) {
        1:   40-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN37ParserTest_ParsesIncorrectSyntax_TestD1Ev:
function _ZN37ParserTest_ParsesIncorrectSyntax_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   40:TEST(ParserTest, ParsesIncorrectSyntax) {
        1:   40-block  0
call    0 returned 1
------------------
_ZN37ParserTest_ParsesIncorrectSyntax_Test8TestBodyEv:
function _ZN37ParserTest_ParsesIncorrectSyntax_Test8TestBodyEv called 1 returned 100% blocks executed 35%
        1:   40:TEST(ParserTest, ParsesIncorrectSyntax) {
        -:   41:
        -:   42:    std::vector<Token> tokens = {
        -:   43:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:   44:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:   45:        Token(TokenType::EQUALS, dummyPos),
    #####:   46:        Token(TokenType::INT, dummyPos, 42),
    $$$$$:   46-block  0
        -:   47:        Token(TokenType::EOL, dummyPos)
        7:   48:    };
        1:   48-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        6:   48-block  1
branch  3 taken 5 (fallthrough)
branch  4 taken 1
        5:   48-block  2
call    5 returned 5
    $$$$$:   48-block  3
    $$$$$:   48-block  4
    $$$$$:   48-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:   48-block  6
call    8 never executed
    $$$$$:   48-block  7
        5:   49:    std::map<int, std::vector<Token>> tokenMap = { {0, tokens}, {1, {Token(TokenType::EOF_, dummyPos)}} };
        1:   49-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:   49-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:   49-block  2
call    5 returned 2
        1:   49-block  3
call    6 returned 1
    $$$$$:   49-block  4
    $$$$$:   49-block  5
    $$$$$:   49-block  6
    $$$$$:   49-block  7
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$:   49-block  8
call    9 never executed
    $$$$$:   49-block  9
    $$$$$:   49-block 10
call   10 never executed
    $$$$$:   49-block 11
    $$$$$:   49-block 12
    $$$$$:   49-block 13
        1:   50:    Parser parser(tokenMap);
        1:   50-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   50-block  1
call    3 returned 1
    $$$$$:   50-block  2
call    4 never executed
    $$$$$:   50-block  3
        -:   51:
        -:   52:    // Act: Parse the tokens
       1*:   53:    EXPECT_THROW(parser.parse(), InvalidSyntaxError);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   53-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   53-block  1
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:   53-block  2
call    9 returned 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1 (throw)
    %%%%%:   53-block  3
call   12 never executed
        1:   53-block  4
branch 13 taken 0 (fallthrough)
branch 14 taken 1
    %%%%%:   53-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%:   53-block  6
    %%%%%:   53-block  7
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%:   53-block  8
call   21 never executed
call   22 never executed
branch 23 never executed (fallthrough)
branch 24 never executed (throw)
    %%%%%:   53-block  9
call   25 never executed
branch 26 never executed (fallthrough)
branch 27 never executed (throw)
    %%%%%:   53-block 10
call   28 never executed
call   29 never executed
        1:   53-block 11
call   30 returned 1
        1:   53-block 12
        1:   53-block 13
branch 31 taken 1
branch 32 taken 0
branch 33 taken 0
        1:   53-block 14
call   34 returned 1
call   35 returned 1
branch 36 taken 1 (fallthrough)
branch 37 taken 0 (throw)
    $$$$$:   53-block 15
call   38 never executed
call   39 never executed
branch 40 never executed (fallthrough)
branch 41 never executed (throw)
    $$$$$:   53-block 16
call   42 never executed
branch 43 never executed (fallthrough)
branch 44 never executed (throw)
    $$$$$:   53-block 17
call   45 never executed
branch 46 never executed (fallthrough)
branch 47 never executed (throw)
    $$$$$:   53-block 18
call   48 never executed
call   49 never executed
branch 50 never executed (fallthrough)
branch 51 never executed (throw)
    $$$$$:   53-block 19
call   52 never executed
call   53 never executed
branch 54 never executed (fallthrough)
branch 55 never executed (throw)
    $$$$$:   53-block 20
call   56 never executed
branch 57 never executed (fallthrough)
branch 58 never executed (throw)
    $$$$$:   53-block 21
    $$$$$:   53-block 22
call   59 never executed
    $$$$$:   53-block 23
call   60 never executed
call   61 never executed
branch 62 never executed (fallthrough)
branch 63 never executed (throw)
    $$$$$:   53-block 24
    $$$$$:   53-block 25
call   64 never executed
branch 65 never executed (fallthrough)
branch 66 never executed (throw)
    $$$$$:   53-block 26
call   67 never executed
    $$$$$:   53-block 27
    $$$$$:   53-block 28
call   68 never executed
    $$$$$:   53-block 29
call   69 never executed
    $$$$$:   53-block 30
call   70 never executed
    $$$$$:   53-block 31
    $$$$$:   53-block 32
call   71 never executed
    $$$$$:   53-block 33
    $$$$$:   53-block 34
call   72 never executed
        7:   54:}
        1:   54-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   54-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   54-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   54-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   54-block  4
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   54-block  5
call   16 returned 1
call   17 returned 1
branch 18 taken 1 (fallthrough)
branch 19 taken 0 (throw)
        1:   54-block  6
call   20 returned 1
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0 (throw)
        1:   54-block  7
        1:   54-block  8
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
branch 30 taken 1 (fallthrough)
branch 31 taken 0 (throw)
        1:   54-block  9
call   32 returned 1
call   33 returned 1
branch 34 taken 1 (fallthrough)
branch 35 taken 0 (throw)
        1:   54-block 10
        1:   54-block 11
call   36 returned 1
branch 37 taken 1 (fallthrough)
branch 38 taken 0 (throw)
        1:   54-block 12
call   39 returned 1
branch 40 taken 1 (fallthrough)
branch 41 taken 0 (throw)
        1:   54-block 13
        1:   54-block 14
call   42 returned 1
        2:   54-block 15
branch 43 taken 1 (fallthrough)
branch 44 taken 1
        1:   54-block 16
call   45 returned 1
call   46 returned 1
branch 47 taken 1 (fallthrough)
branch 48 taken 0 (throw)
call   49 returned 1
call   50 returned 1
call   51 returned 1
    $$$$$:   54-block 17
call   52 never executed
    $$$$$:   54-block 18
    $$$$$:   54-block 19
    $$$$$:   54-block 20
call   53 never executed
    $$$$$:   54-block 21
    $$$$$:   54-block 22
call   54 never executed
    $$$$$:   54-block 23
    $$$$$:   54-block 24
    $$$$$:   54-block 25
call   55 never executed
    $$$$$:   54-block 26
    $$$$$:   54-block 27
call   56 never executed
    $$$$$:   54-block 28
    $$$$$:   54-block 29
branch 57 never executed (fallthrough)
branch 58 never executed
    $$$$$:   54-block 30
    $$$$$:   54-block 31
branch 59 never executed (fallthrough)
branch 60 never executed
    $$$$$:   54-block 32
call   61 never executed
    $$$$$:   54-block 33
call   62 never executed
    $$$$$:   54-block 34
    $$$$$:   54-block 35
branch 63 never executed (fallthrough)
branch 64 never executed
    $$$$$:   54-block 36
call   65 never executed
    $$$$$:   54-block 37
    $$$$$:   54-block 38
    $$$$$:   54-block 39
branch 66 never executed (fallthrough)
branch 67 never executed
    $$$$$:   54-block 40
    $$$$$:   54-block 41
branch 68 never executed (fallthrough)
branch 69 never executed
    $$$$$:   54-block 42
call   70 never executed
    $$$$$:   54-block 43
    $$$$$:   54-block 44
    $$$$$:   54-block 45
branch 71 never executed (fallthrough)
branch 72 never executed
    $$$$$:   54-block 46
    $$$$$:   54-block 47
branch 73 never executed (fallthrough)
branch 74 never executed
    $$$$$:   54-block 48
call   75 never executed
    $$$$$:   54-block 49
call   76 never executed
    $$$$$:   54-block 50
call   77 never executed
    $$$$$:   54-block 51
call   78 never executed
------------------
        -:   55:
        4:   56:TEST(ParserTest, ParsesFuncCall) {
        -:   57:    std::vector<Token> tokens = {
        -:   58:        Token(TokenType::IDENTIFIER, dummyPos, "testName"),
        -:   59:        Token(TokenType::OPENPAREN, dummyPos),
        -:   60:        Token(TokenType::STRING, dummyPos, "test"),
        -:   61:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:   62:        Token(TokenType::EOL, dummyPos)
        7:   63:    };
        -:   64:
        -:   65:    std::map<int, std::vector<Token>> tokenMap = {
    #####:   66:        {0, tokens},
    #####:   67:        {1, {Token(TokenType::EOF_, dummyPos)}}
        5:   68:    };
        -:   69:
        1:   70:    Parser parser(tokenMap);
        1:   71:    std::unique_ptr<Node> result = parser.parse();
        -:   72:
       1*:   73:    ASSERT_NE(result, nullptr);
       1*:   74:    EXPECT_EQ(result->getType(), NodeType::FuncCall);
        -:   75:
       1*:   76:    auto* call = dynamic_cast<FuncCall*>(result.get());
       1*:   77:    ASSERT_NE(call, nullptr);
        1:   78:    const auto& arguments = call->getArguments();
       1*:   79:    ASSERT_EQ(arguments.size(), 1);  // One expression inside the true block
        1:   80:    const Node* argument = arguments.at(0).get();
       1*:   81:    EXPECT_EQ(argument->getType(), NodeType::String);
        7:   82:}
------------------
_ZN30ParserTest_ParsesFuncCall_TestC1Ev:
function _ZN30ParserTest_ParsesFuncCall_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   56:TEST(ParserTest, ParsesFuncCall) {
        1:   56-block  0
call    0 returned 1
------------------
_ZN30ParserTest_ParsesFuncCall_TestD0Ev:
function _ZN30ParserTest_ParsesFuncCall_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   56:TEST(ParserTest, ParsesFuncCall) {
        1:   56-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN30ParserTest_ParsesFuncCall_TestD1Ev:
function _ZN30ParserTest_ParsesFuncCall_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   56:TEST(ParserTest, ParsesFuncCall) {
        1:   56-block  0
call    0 returned 1
------------------
_ZN30ParserTest_ParsesFuncCall_Test8TestBodyEv:
function _ZN30ParserTest_ParsesFuncCall_Test8TestBodyEv called 1 returned 100% blocks executed 37%
        1:   56:TEST(ParserTest, ParsesFuncCall) {
        -:   57:    std::vector<Token> tokens = {
        -:   58:        Token(TokenType::IDENTIFIER, dummyPos, "testName"),
        -:   59:        Token(TokenType::OPENPAREN, dummyPos),
        -:   60:        Token(TokenType::STRING, dummyPos, "test"),
        -:   61:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:   62:        Token(TokenType::EOL, dummyPos)
        7:   63:    };
        1:   63-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        6:   63-block  1
branch  3 taken 5 (fallthrough)
branch  4 taken 1
        5:   63-block  2
call    5 returned 5
    $$$$$:   63-block  3
    $$$$$:   63-block  4
    $$$$$:   63-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:   63-block  6
call    8 never executed
    $$$$$:   63-block  7
        -:   64:
        -:   65:    std::map<int, std::vector<Token>> tokenMap = {
    #####:   66:        {0, tokens},
    $$$$$:   66-block  0
    #####:   67:        {1, {Token(TokenType::EOF_, dummyPos)}}
    $$$$$:   67-block  0
        5:   68:    };
        1:   68-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:   68-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:   68-block  2
call    5 returned 2
        1:   68-block  3
call    6 returned 1
    $$$$$:   68-block  4
    $$$$$:   68-block  5
    $$$$$:   68-block  6
    $$$$$:   68-block  7
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$:   68-block  8
call    9 never executed
    $$$$$:   68-block  9
    $$$$$:   68-block 10
call   10 never executed
    $$$$$:   68-block 11
        -:   69:
        1:   70:    Parser parser(tokenMap);
        1:   70-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   70-block  1
call    3 returned 1
    $$$$$:   70-block  2
call    4 never executed
    $$$$$:   70-block  3
        1:   71:    std::unique_ptr<Node> result = parser.parse();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   72:
       1*:   73:    ASSERT_NE(result, nullptr);
        1:   73-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   73-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   73-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   73-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   73-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   73-block  5
call   16 never executed
call   17 never executed
        1:   73-block  6
        1:   73-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:   73-block  8
    $$$$$:   73-block  9
    $$$$$:   73-block 10
call   21 never executed
    $$$$$:   73-block 11
    $$$$$:   73-block 12
call   22 never executed
    $$$$$:   73-block 13
    $$$$$:   73-block 14
call   23 never executed
       1*:   74:    EXPECT_EQ(result->getType(), NodeType::FuncCall);
        1:   74-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   74-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   74-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   74-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   74-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   74-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:   74-block  6
call   20 never executed
call   21 never executed
        1:   74-block  7
call   22 returned 1
    $$$$$:   74-block  8
    $$$$$:   74-block  9
    $$$$$:   74-block 10
call   23 never executed
    $$$$$:   74-block 11
    $$$$$:   74-block 12
call   24 never executed
    $$$$$:   74-block 13
    $$$$$:   74-block 14
call   25 never executed
        -:   75:
       1*:   76:    auto* call = dynamic_cast<FuncCall*>(result.get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   76-block  0
    %%%%%:   76-block  1
       1*:   77:    ASSERT_NE(call, nullptr);
        1:   77-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   77-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   77-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   77-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   77-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   77-block  5
call   16 never executed
call   17 never executed
        1:   77-block  6
        1:   77-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:   77-block  8
    $$$$$:   77-block  9
    $$$$$:   77-block 10
call   21 never executed
    $$$$$:   77-block 11
    $$$$$:   77-block 12
call   22 never executed
    $$$$$:   77-block 13
    $$$$$:   77-block 14
call   23 never executed
        1:   78:    const auto& arguments = call->getArguments();
        1:   78-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   79:    ASSERT_EQ(arguments.size(), 1);  // One expression inside the true block
        1:   79-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   79-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   79-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:   79-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:   79-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   79-block  5
call   17 never executed
call   18 never executed
        1:   79-block  6
        1:   79-block  7
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0
        1:   79-block  8
    $$$$$:   79-block  9
    $$$$$:   79-block 10
    $$$$$:   79-block 11
call   22 never executed
    $$$$$:   79-block 12
    $$$$$:   79-block 13
call   23 never executed
    $$$$$:   79-block 14
    $$$$$:   79-block 15
call   24 never executed
        1:   80:    const Node* argument = arguments.at(0).get();
        1:   80-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   80-block  1
call    3 returned 1
       1*:   81:    EXPECT_EQ(argument->getType(), NodeType::String);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   81-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   81-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   81-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   81-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   81-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   81-block  5
call   19 never executed
call   20 never executed
        1:   81-block  6
call   21 returned 1
    $$$$$:   81-block  7
    $$$$$:   81-block  8
    $$$$$:   81-block  9
call   22 never executed
    $$$$$:   81-block 10
    $$$$$:   81-block 11
call   23 never executed
    $$$$$:   81-block 12
    $$$$$:   81-block 13
call   24 never executed
        7:   82:}
        1:   82-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   82-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   82-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:   82-block  3
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1:   82-block  4
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   82-block  5
call   16 returned 1
call   17 returned 1
branch 18 taken 1 (fallthrough)
branch 19 taken 0 (throw)
        1:   82-block  6
call   20 returned 1
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0 (throw)
        1:   82-block  7
        1:   82-block  8
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
branch 30 taken 1 (fallthrough)
branch 31 taken 0 (throw)
        1:   82-block  9
call   32 returned 1
call   33 returned 1
branch 34 taken 1 (fallthrough)
branch 35 taken 0 (throw)
        1:   82-block 10
        1:   82-block 11
call   36 returned 1
branch 37 taken 1 (fallthrough)
branch 38 taken 0 (throw)
        1:   82-block 12
call   39 returned 1
branch 40 taken 1 (fallthrough)
branch 41 taken 0 (throw)
        1:   82-block 13
        1:   82-block 14
call   42 returned 1
        2:   82-block 15
branch 43 taken 1 (fallthrough)
branch 44 taken 1
        1:   82-block 16
call   45 returned 1
call   46 returned 1
branch 47 taken 1 (fallthrough)
branch 48 taken 0 (throw)
        1:   82-block 17
call   49 returned 1
branch 50 taken 1 (fallthrough)
branch 51 taken 0
        1:   82-block 18
        1:   82-block 19
call   52 returned 1
branch 53 taken 1 (fallthrough)
branch 54 taken 0
        1:   82-block 20
        1:   82-block 21
call   55 returned 1
branch 56 taken 1 (fallthrough)
branch 57 taken 0
        1:   82-block 22
        1:   82-block 23
call   58 returned 1
branch 59 taken 1 (fallthrough)
branch 60 taken 0
    $$$$$:   82-block 24
call   61 never executed
    $$$$$:   82-block 25
    $$$$$:   82-block 26
    $$$$$:   82-block 27
call   62 never executed
    $$$$$:   82-block 28
    $$$$$:   82-block 29
    $$$$$:   82-block 30
call   63 never executed
    $$$$$:   82-block 31
    $$$$$:   82-block 32
call   64 never executed
    $$$$$:   82-block 33
    $$$$$:   82-block 34
    $$$$$:   82-block 35
call   65 never executed
    $$$$$:   82-block 36
    $$$$$:   82-block 37
branch 66 never executed (fallthrough)
branch 67 never executed
    $$$$$:   82-block 38
    $$$$$:   82-block 39
branch 68 never executed (fallthrough)
branch 69 never executed
    $$$$$:   82-block 40
call   70 never executed
    $$$$$:   82-block 41
call   71 never executed
    $$$$$:   82-block 42
    $$$$$:   82-block 43
branch 72 never executed (fallthrough)
branch 73 never executed
    $$$$$:   82-block 44
call   74 never executed
    $$$$$:   82-block 45
    $$$$$:   82-block 46
    $$$$$:   82-block 47
branch 75 never executed (fallthrough)
branch 76 never executed
    $$$$$:   82-block 48
    $$$$$:   82-block 49
branch 77 never executed (fallthrough)
branch 78 never executed
    $$$$$:   82-block 50
call   79 never executed
    $$$$$:   82-block 51
    $$$$$:   82-block 52
    $$$$$:   82-block 53
branch 80 never executed (fallthrough)
branch 81 never executed
    $$$$$:   82-block 54
    $$$$$:   82-block 55
branch 82 never executed (fallthrough)
branch 83 never executed
    $$$$$:   82-block 56
call   84 never executed
    $$$$$:   82-block 57
call   85 never executed
    $$$$$:   82-block 58
call   86 never executed
    $$$$$:   82-block 59
call   87 never executed
    $$$$$:   82-block 60
call   88 never executed
------------------
        -:   83:
        4:   84:TEST(ParserTest, ParsesLibCallToOutWithString) {
        -:   85:
        -:   86:    std::vector<Token> tokens = {
        -:   87:        Token(TokenType::KEYWORD, dummyPos, "out"),
        -:   88:        Token(TokenType::OPENPAREN, dummyPos),
        -:   89:        Token(TokenType::STRING, dummyPos, "test"),
        -:   90:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:   91:        Token(TokenType::EOL, dummyPos)
        7:   92:    };
        -:   93:
        -:   94:    std::map<int, std::vector<Token>> tokenMap = {
    #####:   95:        {0, tokens},
    #####:   96:        {1, {Token(TokenType::EOF_, dummyPos)}}
        5:   97:    };
        -:   98:
        1:   99:    Parser parser(tokenMap);
        1:  100:    std::unique_ptr<Node> result = parser.parse();
        -:  101:
       1*:  102:    ASSERT_NE(result, nullptr);
       1*:  103:    EXPECT_EQ(result->getType(), NodeType::LibCall);
        -:  104:
       1*:  105:    auto* call = dynamic_cast<LibCall*>(result.get());
       1*:  106:    ASSERT_NE(call, nullptr);
       1*:  107:    EXPECT_EQ(std::get<std::string>(call->getToken().getValue()), "out");
        7:  108:}
------------------
_ZN44ParserTest_ParsesLibCallToOutWithString_TestC1Ev:
function _ZN44ParserTest_ParsesLibCallToOutWithString_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   84:TEST(ParserTest, ParsesLibCallToOutWithString) {
        1:   84-block  0
call    0 returned 1
------------------
_ZN44ParserTest_ParsesLibCallToOutWithString_TestD0Ev:
function _ZN44ParserTest_ParsesLibCallToOutWithString_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   84:TEST(ParserTest, ParsesLibCallToOutWithString) {
        1:   84-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN44ParserTest_ParsesLibCallToOutWithString_TestD1Ev:
function _ZN44ParserTest_ParsesLibCallToOutWithString_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   84:TEST(ParserTest, ParsesLibCallToOutWithString) {
        1:   84-block  0
call    0 returned 1
------------------
_ZN44ParserTest_ParsesLibCallToOutWithString_Test8TestBodyEv:
function _ZN44ParserTest_ParsesLibCallToOutWithString_Test8TestBodyEv called 1 returned 100% blocks executed 37%
        1:   84:TEST(ParserTest, ParsesLibCallToOutWithString) {
        -:   85:
        -:   86:    std::vector<Token> tokens = {
        -:   87:        Token(TokenType::KEYWORD, dummyPos, "out"),
        -:   88:        Token(TokenType::OPENPAREN, dummyPos),
        -:   89:        Token(TokenType::STRING, dummyPos, "test"),
        -:   90:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:   91:        Token(TokenType::EOL, dummyPos)
        7:   92:    };
        1:   92-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        6:   92-block  1
branch  3 taken 5 (fallthrough)
branch  4 taken 1
        5:   92-block  2
call    5 returned 5
    $$$$$:   92-block  3
    $$$$$:   92-block  4
    $$$$$:   92-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:   92-block  6
call    8 never executed
    $$$$$:   92-block  7
        -:   93:
        -:   94:    std::map<int, std::vector<Token>> tokenMap = {
    #####:   95:        {0, tokens},
    $$$$$:   95-block  0
    #####:   96:        {1, {Token(TokenType::EOF_, dummyPos)}}
    $$$$$:   96-block  0
        5:   97:    };
        1:   97-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:   97-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:   97-block  2
call    5 returned 2
        1:   97-block  3
call    6 returned 1
    $$$$$:   97-block  4
    $$$$$:   97-block  5
    $$$$$:   97-block  6
    $$$$$:   97-block  7
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$:   97-block  8
call    9 never executed
    $$$$$:   97-block  9
    $$$$$:   97-block 10
call   10 never executed
    $$$$$:   97-block 11
        -:   98:
        1:   99:    Parser parser(tokenMap);
        1:   99-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   99-block  1
call    3 returned 1
    $$$$$:   99-block  2
call    4 never executed
    $$$$$:   99-block  3
        1:  100:    std::unique_ptr<Node> result = parser.parse();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  101:
       1*:  102:    ASSERT_NE(result, nullptr);
        1:  102-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  102-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  102-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  102-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  102-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  102-block  5
call   16 never executed
call   17 never executed
        1:  102-block  6
        1:  102-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  102-block  8
    $$$$$:  102-block  9
    $$$$$:  102-block 10
call   21 never executed
    $$$$$:  102-block 11
    $$$$$:  102-block 12
call   22 never executed
    $$$$$:  102-block 13
    $$$$$:  102-block 14
call   23 never executed
       1*:  103:    EXPECT_EQ(result->getType(), NodeType::LibCall);
        1:  103-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  103-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  103-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:  103-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  103-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  103-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  103-block  6
call   20 never executed
call   21 never executed
        1:  103-block  7
call   22 returned 1
    $$$$$:  103-block  8
    $$$$$:  103-block  9
    $$$$$:  103-block 10
call   23 never executed
    $$$$$:  103-block 11
    $$$$$:  103-block 12
call   24 never executed
    $$$$$:  103-block 13
    $$$$$:  103-block 14
call   25 never executed
        -:  104:
       1*:  105:    auto* call = dynamic_cast<LibCall*>(result.get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  105-block  0
    %%%%%:  105-block  1
       1*:  106:    ASSERT_NE(call, nullptr);
        1:  106-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  106-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  106-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  106-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  106-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  106-block  5
call   16 never executed
call   17 never executed
        1:  106-block  6
        1:  106-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  106-block  8
    $$$$$:  106-block  9
    $$$$$:  106-block 10
call   21 never executed
    $$$$$:  106-block 11
    $$$$$:  106-block 12
call   22 never executed
    $$$$$:  106-block 13
    $$$$$:  106-block 14
call   23 never executed
       1*:  107:    EXPECT_EQ(std::get<std::string>(call->getToken().getValue()), "out");
        1:  107-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  107-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  107-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  107-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  107-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  107-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  107-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  107-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  107-block  8
call   27 never executed
call   28 never executed
        1:  107-block  9
call   29 returned 1
    $$$$$:  107-block 10
call   30 never executed
    $$$$$:  107-block 11
call   31 never executed
    $$$$$:  107-block 12
    $$$$$:  107-block 13
    $$$$$:  107-block 14
call   32 never executed
    $$$$$:  107-block 15
    $$$$$:  107-block 16
call   33 never executed
    $$$$$:  107-block 17
    $$$$$:  107-block 18
call   34 never executed
        7:  108:}
        1:  108-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  108-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  108-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  108-block  3
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1:  108-block  4
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:  108-block  5
call   16 returned 1
call   17 returned 1
branch 18 taken 1 (fallthrough)
branch 19 taken 0 (throw)
        1:  108-block  6
call   20 returned 1
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0 (throw)
        1:  108-block  7
        1:  108-block  8
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
branch 30 taken 1 (fallthrough)
branch 31 taken 0 (throw)
        1:  108-block  9
call   32 returned 1
call   33 returned 1
branch 34 taken 1 (fallthrough)
branch 35 taken 0 (throw)
        1:  108-block 10
        1:  108-block 11
call   36 returned 1
branch 37 taken 1 (fallthrough)
branch 38 taken 0 (throw)
        1:  108-block 12
call   39 returned 1
branch 40 taken 1 (fallthrough)
branch 41 taken 0 (throw)
        1:  108-block 13
        1:  108-block 14
call   42 returned 1
        2:  108-block 15
branch 43 taken 1 (fallthrough)
branch 44 taken 1
        1:  108-block 16
call   45 returned 1
call   46 returned 1
branch 47 taken 1 (fallthrough)
branch 48 taken 0 (throw)
        1:  108-block 17
call   49 returned 1
branch 50 taken 1 (fallthrough)
branch 51 taken 0
        1:  108-block 18
        1:  108-block 19
call   52 returned 1
branch 53 taken 1 (fallthrough)
branch 54 taken 0
        1:  108-block 20
        1:  108-block 21
call   55 returned 1
branch 56 taken 1 (fallthrough)
branch 57 taken 0
        1:  108-block 22
        1:  108-block 23
call   58 returned 1
branch 59 taken 1 (fallthrough)
branch 60 taken 0
    $$$$$:  108-block 24
call   61 never executed
    $$$$$:  108-block 25
    $$$$$:  108-block 26
    $$$$$:  108-block 27
call   62 never executed
    $$$$$:  108-block 28
    $$$$$:  108-block 29
    $$$$$:  108-block 30
call   63 never executed
    $$$$$:  108-block 31
    $$$$$:  108-block 32
call   64 never executed
    $$$$$:  108-block 33
    $$$$$:  108-block 34
    $$$$$:  108-block 35
call   65 never executed
    $$$$$:  108-block 36
    $$$$$:  108-block 37
branch 66 never executed (fallthrough)
branch 67 never executed
    $$$$$:  108-block 38
    $$$$$:  108-block 39
branch 68 never executed (fallthrough)
branch 69 never executed
    $$$$$:  108-block 40
call   70 never executed
    $$$$$:  108-block 41
call   71 never executed
    $$$$$:  108-block 42
    $$$$$:  108-block 43
branch 72 never executed (fallthrough)
branch 73 never executed
    $$$$$:  108-block 44
call   74 never executed
    $$$$$:  108-block 45
    $$$$$:  108-block 46
    $$$$$:  108-block 47
branch 75 never executed (fallthrough)
branch 76 never executed
    $$$$$:  108-block 48
    $$$$$:  108-block 49
branch 77 never executed (fallthrough)
branch 78 never executed
    $$$$$:  108-block 50
call   79 never executed
    $$$$$:  108-block 51
    $$$$$:  108-block 52
    $$$$$:  108-block 53
branch 80 never executed (fallthrough)
branch 81 never executed
    $$$$$:  108-block 54
    $$$$$:  108-block 55
branch 82 never executed (fallthrough)
branch 83 never executed
    $$$$$:  108-block 56
call   84 never executed
    $$$$$:  108-block 57
call   85 never executed
    $$$$$:  108-block 58
call   86 never executed
    $$$$$:  108-block 59
call   87 never executed
    $$$$$:  108-block 60
call   88 never executed
------------------
        -:  109:
        4:  110:TEST(ParserTest, ParsesFuncDefinition) {
        -:  111:    std::vector<Token> tokenLine1 = {
        -:  112:        Token(TokenType::KEYWORD, dummyPos, "func"),
        -:  113:        Token(TokenType::IDENTIFIER, dummyPos, "testFunc"),
        -:  114:        Token(TokenType::OPENPAREN, dummyPos),
        -:  115:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:  116:        Token(TokenType::OPENBRACE, dummyPos),
        -:  117:        Token(TokenType::EOL, dummyPos)
        8:  118:    };
        -:  119:    std::vector<Token> tokenLine2 = {
        -:  120:        Token(TokenType::KEYWORD, dummyPos, "return"),
    #####:  121:        Token(TokenType::INT, dummyPos, 5),
        -:  122:        Token(TokenType::EOL, dummyPos)
        5:  123:    };
        -:  124:    std::vector<Token> tokenLine3 = {
        -:  125:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  126:        Token(TokenType::EOL, dummyPos)
        4:  127:    };
        -:  128:    const std::map<int, std::vector<Token>> tokenMap =
        -:  129:        {
    #####:  130:        {0, tokenLine1},
    #####:  131:        {1, tokenLine2},
    #####:  132:        {2, tokenLine3},
    #####:  133:        {3, {Token(TokenType::EOF_, dummyPos)} }
        7:  134:        };
        -:  135:
        1:  136:    Parser parser(tokenMap);
        -:  137:    // Act: Parse the tokens
        1:  138:    const std::unique_ptr<Node> node = parser.parse();
        -:  139:
        -:  140:    // Assert: Check the returned Node
       1*:  141:    ASSERT_NE(node, nullptr);
       1*:  142:    EXPECT_EQ(node->getType(), NodeType::FuncDef);
        -:  143:
       1*:  144:    auto* funcDefinition = dynamic_cast<FuncDef*>(node.get());
       1*:  145:    ASSERT_NE(funcDefinition, nullptr);
       1*:  146:    EXPECT_EQ(funcDefinition->getName(), "testFunc");
       1*:  147:    EXPECT_EQ(funcDefinition->getArguments().size(), 0);
        -:  148:
        1:  149:    const auto& bodyNodes = funcDefinition->getFunctionBody();
       1*:  150:    ASSERT_EQ(bodyNodes.size(), 1);
        -:  151:
        1:  152:    const Node* bodyNode = bodyNodes.at(0).get();
       1*:  153:    ASSERT_NE(bodyNode, nullptr);
       1*:  154:    EXPECT_EQ(bodyNode->getType(), NodeType::ReturnCall);
        -:  155:
       1*:  156:    const ReturnCall* returnCast = dynamic_cast<const ReturnCall*>(bodyNode);
       1*:  157:    ASSERT_NE(returnCast, nullptr);
        -:  158:
        1:  159:    const Node* valueNode = returnCast->getExpression().get();
       1*:  160:    ASSERT_NE(valueNode, nullptr);
       1*:  161:    EXPECT_EQ(valueNode->getType(), NodeType::Number);
        -:  162:
       1*:  163:    const auto* numberNode = dynamic_cast<const Number*>(valueNode);
       1*:  164:    ASSERT_NE(numberNode, nullptr);
       1*:  165:    EXPECT_EQ(std::get<int>(numberNode->getToken().getValue()), 5);
        9:  166:}
------------------
_ZN36ParserTest_ParsesFuncDefinition_TestC1Ev:
function _ZN36ParserTest_ParsesFuncDefinition_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  110:TEST(ParserTest, ParsesFuncDefinition) {
        1:  110-block  0
call    0 returned 1
------------------
_ZN36ParserTest_ParsesFuncDefinition_TestD0Ev:
function _ZN36ParserTest_ParsesFuncDefinition_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  110:TEST(ParserTest, ParsesFuncDefinition) {
        1:  110-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN36ParserTest_ParsesFuncDefinition_TestD1Ev:
function _ZN36ParserTest_ParsesFuncDefinition_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  110:TEST(ParserTest, ParsesFuncDefinition) {
        1:  110-block  0
call    0 returned 1
------------------
_ZN36ParserTest_ParsesFuncDefinition_Test8TestBodyEv:
function _ZN36ParserTest_ParsesFuncDefinition_Test8TestBodyEv called 1 returned 100% blocks executed 34%
        1:  110:TEST(ParserTest, ParsesFuncDefinition) {
        -:  111:    std::vector<Token> tokenLine1 = {
        -:  112:        Token(TokenType::KEYWORD, dummyPos, "func"),
        -:  113:        Token(TokenType::IDENTIFIER, dummyPos, "testFunc"),
        -:  114:        Token(TokenType::OPENPAREN, dummyPos),
        -:  115:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:  116:        Token(TokenType::OPENBRACE, dummyPos),
        -:  117:        Token(TokenType::EOL, dummyPos)
        8:  118:    };
        1:  118-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        7:  118-block  1
branch  3 taken 6 (fallthrough)
branch  4 taken 1
        6:  118-block  2
call    5 returned 6
    $$$$$:  118-block  3
    $$$$$:  118-block  4
    $$$$$:  118-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  118-block  6
call    8 never executed
    $$$$$:  118-block  7
        -:  119:    std::vector<Token> tokenLine2 = {
        -:  120:        Token(TokenType::KEYWORD, dummyPos, "return"),
    #####:  121:        Token(TokenType::INT, dummyPos, 5),
    $$$$$:  121-block  0
        -:  122:        Token(TokenType::EOL, dummyPos)
        5:  123:    };
        1:  123-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        4:  123-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 1
        3:  123-block  2
call    5 returned 3
    $$$$$:  123-block  3
    $$$$$:  123-block  4
    $$$$$:  123-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  123-block  6
call    8 never executed
    $$$$$:  123-block  7
        -:  124:    std::vector<Token> tokenLine3 = {
        -:  125:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  126:        Token(TokenType::EOL, dummyPos)
        4:  127:    };
        1:  127-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:  127-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:  127-block  2
call    5 returned 2
    $$$$$:  127-block  3
    $$$$$:  127-block  4
    $$$$$:  127-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  127-block  6
call    8 never executed
    $$$$$:  127-block  7
        -:  128:    const std::map<int, std::vector<Token>> tokenMap =
        -:  129:        {
    #####:  130:        {0, tokenLine1},
    $$$$$:  130-block  0
    #####:  131:        {1, tokenLine2},
    $$$$$:  131-block  0
    #####:  132:        {2, tokenLine3},
    $$$$$:  132-block  0
    #####:  133:        {3, {Token(TokenType::EOF_, dummyPos)} }
    $$$$$:  133-block  0
        7:  134:        };
        1:  134-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  134-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  134-block  2
call    5 returned 4
        1:  134-block  3
call    6 returned 1
    $$$$$:  134-block  4
    $$$$$:  134-block  5
    $$$$$:  134-block  6
    $$$$$:  134-block  7
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$:  134-block  8
call    9 never executed
    $$$$$:  134-block  9
    $$$$$:  134-block 10
call   10 never executed
    $$$$$:  134-block 11
        -:  135:
        1:  136:    Parser parser(tokenMap);
        1:  136-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  136-block  1
call    3 returned 1
    $$$$$:  136-block  2
call    4 never executed
    $$$$$:  136-block  3
        -:  137:    // Act: Parse the tokens
        1:  138:    const std::unique_ptr<Node> node = parser.parse();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  139:
        -:  140:    // Assert: Check the returned Node
       1*:  141:    ASSERT_NE(node, nullptr);
        1:  141-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  141-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  141-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  141-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  141-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  141-block  5
call   16 never executed
call   17 never executed
        1:  141-block  6
        1:  141-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  141-block  8
    $$$$$:  141-block  9
    $$$$$:  141-block 10
call   21 never executed
    $$$$$:  141-block 11
    $$$$$:  141-block 12
call   22 never executed
    $$$$$:  141-block 13
    $$$$$:  141-block 14
call   23 never executed
       1*:  142:    EXPECT_EQ(node->getType(), NodeType::FuncDef);
        1:  142-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  142-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  142-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:  142-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  142-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  142-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  142-block  6
call   20 never executed
call   21 never executed
        1:  142-block  7
call   22 returned 1
    $$$$$:  142-block  8
    $$$$$:  142-block  9
    $$$$$:  142-block 10
call   23 never executed
    $$$$$:  142-block 11
    $$$$$:  142-block 12
call   24 never executed
    $$$$$:  142-block 13
    $$$$$:  142-block 14
call   25 never executed
        -:  143:
       1*:  144:    auto* funcDefinition = dynamic_cast<FuncDef*>(node.get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  144-block  0
    %%%%%:  144-block  1
       1*:  145:    ASSERT_NE(funcDefinition, nullptr);
        1:  145-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  145-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  145-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  145-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  145-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  145-block  5
call   16 never executed
call   17 never executed
        1:  145-block  6
        1:  145-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  145-block  8
    $$$$$:  145-block  9
    $$$$$:  145-block 10
call   21 never executed
    $$$$$:  145-block 11
    $$$$$:  145-block 12
call   22 never executed
    $$$$$:  145-block 13
    $$$$$:  145-block 14
call   23 never executed
       1*:  146:    EXPECT_EQ(funcDefinition->getName(), "testFunc");
        1:  146-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  146-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  146-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:  146-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  146-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  146-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  146-block  6
call   20 never executed
call   21 never executed
        1:  146-block  7
call   22 returned 1
    $$$$$:  146-block  8
call   23 never executed
    $$$$$:  146-block  9
    $$$$$:  146-block 10
call   24 never executed
    $$$$$:  146-block 11
    $$$$$:  146-block 12
call   25 never executed
    $$$$$:  146-block 13
    $$$$$:  146-block 14
call   26 never executed
       1*:  147:    EXPECT_EQ(funcDefinition->getArguments().size(), 0);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  147-block  0
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  147-block  1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:  147-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  147-block  3
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  147-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  147-block  5
call   20 never executed
call   21 never executed
        1:  147-block  6
call   22 returned 1
    $$$$$:  147-block  7
    $$$$$:  147-block  8
    $$$$$:  147-block  9
call   23 never executed
    $$$$$:  147-block 10
    $$$$$:  147-block 11
call   24 never executed
    $$$$$:  147-block 12
    $$$$$:  147-block 13
call   25 never executed
        -:  148:
        1:  149:    const auto& bodyNodes = funcDefinition->getFunctionBody();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  150:    ASSERT_EQ(bodyNodes.size(), 1);
        1:  150-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  150-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  150-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  150-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  150-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  150-block  5
call   17 never executed
call   18 never executed
        1:  150-block  6
        1:  150-block  7
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0
        1:  150-block  8
    $$$$$:  150-block  9
    $$$$$:  150-block 10
    $$$$$:  150-block 11
call   22 never executed
    $$$$$:  150-block 12
    $$$$$:  150-block 13
call   23 never executed
    $$$$$:  150-block 14
    $$$$$:  150-block 15
call   24 never executed
        -:  151:
        1:  152:    const Node* bodyNode = bodyNodes.at(0).get();
        1:  152-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  152-block  1
call    3 returned 1
       1*:  153:    ASSERT_NE(bodyNode, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  153-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  153-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  153-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  153-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  153-block  4
call   16 never executed
call   17 never executed
        1:  153-block  5
        1:  153-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  153-block  7
    $$$$$:  153-block  8
    $$$$$:  153-block  9
call   21 never executed
    $$$$$:  153-block 10
    $$$$$:  153-block 11
call   22 never executed
    $$$$$:  153-block 12
    $$$$$:  153-block 13
call   23 never executed
       1*:  154:    EXPECT_EQ(bodyNode->getType(), NodeType::ReturnCall);
        1:  154-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  154-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  154-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  154-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  154-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  154-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  154-block  6
call   19 never executed
call   20 never executed
        1:  154-block  7
call   21 returned 1
    $$$$$:  154-block  8
    $$$$$:  154-block  9
    $$$$$:  154-block 10
call   22 never executed
    $$$$$:  154-block 11
    $$$$$:  154-block 12
call   23 never executed
    $$$$$:  154-block 13
    $$$$$:  154-block 14
call   24 never executed
        -:  155:
       1*:  156:    const ReturnCall* returnCast = dynamic_cast<const ReturnCall*>(bodyNode);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  156-block  0
    %%%%%:  156-block  1
       1*:  157:    ASSERT_NE(returnCast, nullptr);
        1:  157-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  157-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  157-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  157-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  157-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  157-block  5
call   16 never executed
call   17 never executed
        1:  157-block  6
        1:  157-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  157-block  8
    $$$$$:  157-block  9
    $$$$$:  157-block 10
call   21 never executed
    $$$$$:  157-block 11
    $$$$$:  157-block 12
call   22 never executed
    $$$$$:  157-block 13
    $$$$$:  157-block 14
call   23 never executed
        -:  158:
        1:  159:    const Node* valueNode = returnCast->getExpression().get();
        1:  159-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  159-block  1
call    3 returned 1
       1*:  160:    ASSERT_NE(valueNode, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  160-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  160-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  160-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  160-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  160-block  4
call   16 never executed
call   17 never executed
        1:  160-block  5
        1:  160-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  160-block  7
    $$$$$:  160-block  8
    $$$$$:  160-block  9
call   21 never executed
    $$$$$:  160-block 10
    $$$$$:  160-block 11
call   22 never executed
    $$$$$:  160-block 12
    $$$$$:  160-block 13
call   23 never executed
       1*:  161:    EXPECT_EQ(valueNode->getType(), NodeType::Number);
        1:  161-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  161-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  161-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  161-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  161-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  161-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  161-block  6
call   19 never executed
call   20 never executed
        1:  161-block  7
call   21 returned 1
    $$$$$:  161-block  8
    $$$$$:  161-block  9
    $$$$$:  161-block 10
call   22 never executed
    $$$$$:  161-block 11
    $$$$$:  161-block 12
call   23 never executed
    $$$$$:  161-block 13
    $$$$$:  161-block 14
call   24 never executed
        -:  162:
       1*:  163:    const auto* numberNode = dynamic_cast<const Number*>(valueNode);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  163-block  0
    %%%%%:  163-block  1
       1*:  164:    ASSERT_NE(numberNode, nullptr);
        1:  164-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  164-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  164-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  164-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  164-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  164-block  5
call   16 never executed
call   17 never executed
        1:  164-block  6
        1:  164-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  164-block  8
    $$$$$:  164-block  9
    $$$$$:  164-block 10
call   21 never executed
    $$$$$:  164-block 11
    $$$$$:  164-block 12
call   22 never executed
    $$$$$:  164-block 13
    $$$$$:  164-block 14
call   23 never executed
       1*:  165:    EXPECT_EQ(std::get<int>(numberNode->getToken().getValue()), 5);
        1:  165-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  165-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  165-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  165-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  165-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  165-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  165-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  165-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  165-block  8
call   27 never executed
call   28 never executed
        1:  165-block  9
call   29 returned 1
    $$$$$:  165-block 10
call   30 never executed
    $$$$$:  165-block 11
call   31 never executed
    $$$$$:  165-block 12
    $$$$$:  165-block 13
    $$$$$:  165-block 14
    $$$$$:  165-block 15
call   32 never executed
    $$$$$:  165-block 16
    $$$$$:  165-block 17
call   33 never executed
    $$$$$:  165-block 18
    $$$$$:  165-block 19
call   34 never executed
        9:  166:}
        1:  166-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  166-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  166-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  166-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  166-block  4
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:  166-block  5
call   16 returned 1
call   17 returned 1
branch 18 taken 1 (fallthrough)
branch 19 taken 0 (throw)
        1:  166-block  6
call   20 returned 1
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0 (throw)
        1:  166-block  7
call   24 returned 1
call   25 returned 1
branch 26 taken 1 (fallthrough)
branch 27 taken 0 (throw)
        1:  166-block  8
        1:  166-block  9
call   28 returned 1
call   29 returned 1
call   30 returned 1
call   31 returned 1
call   32 returned 1
call   33 returned 1
call   34 returned 1
branch 35 taken 1 (fallthrough)
branch 36 taken 0 (throw)
        1:  166-block 10
call   37 returned 1
branch 38 taken 1 (fallthrough)
branch 39 taken 0 (throw)
        1:  166-block 11
call   40 returned 1
call   41 returned 1
branch 42 taken 1 (fallthrough)
branch 43 taken 0 (throw)
        1:  166-block 12
call   44 returned 1
call   45 returned 1
branch 46 taken 1 (fallthrough)
branch 47 taken 0 (throw)
        1:  166-block 13
        1:  166-block 14
call   48 returned 1
call   49 returned 1
call   50 returned 1
call   51 returned 1
call   52 returned 1
branch 53 taken 1 (fallthrough)
branch 54 taken 0 (throw)
        1:  166-block 15
call   55 returned 1
call   56 returned 1
branch 57 taken 1 (fallthrough)
branch 58 taken 0 (throw)
        1:  166-block 16
        1:  166-block 17
call   59 returned 1
call   60 returned 1
call   61 returned 1
branch 62 taken 1 (fallthrough)
branch 63 taken 0 (throw)
        1:  166-block 18
call   64 returned 1
branch 65 taken 1 (fallthrough)
branch 66 taken 0 (throw)
        1:  166-block 19
call   67 returned 1
branch 68 taken 1 (fallthrough)
branch 69 taken 0 (throw)
        1:  166-block 20
call   70 returned 1
call   71 returned 1
branch 72 taken 1 (fallthrough)
branch 73 taken 0 (throw)
        1:  166-block 21
        1:  166-block 22
call   74 returned 1
branch 75 taken 1 (fallthrough)
branch 76 taken 0 (throw)
        1:  166-block 23
call   77 returned 1
branch 78 taken 1 (fallthrough)
branch 79 taken 0 (throw)
        1:  166-block 24
        1:  166-block 25
call   80 returned 1
        2:  166-block 26
branch 81 taken 1 (fallthrough)
branch 82 taken 1
        1:  166-block 27
call   83 returned 1
call   84 returned 1
branch 85 taken 1 (fallthrough)
branch 86 taken 0 (throw)
        1:  166-block 28
call   87 returned 1
branch 88 taken 1 (fallthrough)
branch 89 taken 0
        1:  166-block 29
        1:  166-block 30
call   90 returned 1
branch 91 taken 1 (fallthrough)
branch 92 taken 0
        1:  166-block 31
        1:  166-block 32
call   93 returned 1
branch 94 taken 1 (fallthrough)
branch 95 taken 0
        1:  166-block 33
        1:  166-block 34
call   96 returned 1
branch 97 taken 1 (fallthrough)
branch 98 taken 0
        1:  166-block 35
        1:  166-block 36
call   99 returned 1
branch 100 taken 1 (fallthrough)
branch 101 taken 0
        1:  166-block 37
        1:  166-block 38
call   102 returned 1
branch 103 taken 1 (fallthrough)
branch 104 taken 0
    $$$$$:  166-block 39
call   105 never executed
    $$$$$:  166-block 40
    $$$$$:  166-block 41
    $$$$$:  166-block 42
call   106 never executed
    $$$$$:  166-block 43
    $$$$$:  166-block 44
    $$$$$:  166-block 45
call   107 never executed
    $$$$$:  166-block 46
    $$$$$:  166-block 47
    $$$$$:  166-block 48
call   108 never executed
    $$$$$:  166-block 49
    $$$$$:  166-block 50
    $$$$$:  166-block 51
call   109 never executed
    $$$$$:  166-block 52
    $$$$$:  166-block 53
call   110 never executed
    $$$$$:  166-block 54
    $$$$$:  166-block 55
branch 111 never executed (fallthrough)
branch 112 never executed
    $$$$$:  166-block 56
    $$$$$:  166-block 57
branch 113 never executed (fallthrough)
branch 114 never executed
    $$$$$:  166-block 58
call   115 never executed
    $$$$$:  166-block 59
call   116 never executed
    $$$$$:  166-block 60
    $$$$$:  166-block 61
    $$$$$:  166-block 62
call   117 never executed
    $$$$$:  166-block 63
    $$$$$:  166-block 64
call   118 never executed
    $$$$$:  166-block 65
    $$$$$:  166-block 66
branch 119 never executed (fallthrough)
branch 120 never executed
    $$$$$:  166-block 67
    $$$$$:  166-block 68
branch 121 never executed (fallthrough)
branch 122 never executed
    $$$$$:  166-block 69
call   123 never executed
    $$$$$:  166-block 70
call   124 never executed
    $$$$$:  166-block 71
    $$$$$:  166-block 72
    $$$$$:  166-block 73
call   125 never executed
    $$$$$:  166-block 74
    $$$$$:  166-block 75
    $$$$$:  166-block 76
branch 126 never executed (fallthrough)
branch 127 never executed
    $$$$$:  166-block 77
    $$$$$:  166-block 78
branch 128 never executed (fallthrough)
branch 129 never executed
    $$$$$:  166-block 79
call   130 never executed
    $$$$$:  166-block 80
call   131 never executed
    $$$$$:  166-block 81
    $$$$$:  166-block 82
branch 132 never executed (fallthrough)
branch 133 never executed
    $$$$$:  166-block 83
call   134 never executed
    $$$$$:  166-block 84
    $$$$$:  166-block 85
    $$$$$:  166-block 86
branch 135 never executed (fallthrough)
branch 136 never executed
    $$$$$:  166-block 87
    $$$$$:  166-block 88
branch 137 never executed (fallthrough)
branch 138 never executed
    $$$$$:  166-block 89
call   139 never executed
    $$$$$:  166-block 90
    $$$$$:  166-block 91
    $$$$$:  166-block 92
branch 140 never executed (fallthrough)
branch 141 never executed
    $$$$$:  166-block 93
    $$$$$:  166-block 94
branch 142 never executed (fallthrough)
branch 143 never executed
    $$$$$:  166-block 95
call   144 never executed
    $$$$$:  166-block 96
call   145 never executed
    $$$$$:  166-block 97
call   146 never executed
    $$$$$:  166-block 98
call   147 never executed
    $$$$$:  166-block 99
call   148 never executed
    $$$$$:  166-block 100
call   149 never executed
    $$$$$:  166-block 101
call   150 never executed
------------------
        -:  167:
        4:  168:TEST(ParserTest, ParsesIfSatement) {
        -:  169:    std::vector<Token> tokenLine1 = {
        -:  170:        Token(TokenType::KEYWORD, dummyPos, "if"),
        -:  171:        Token(TokenType::OPENPAREN, dummyPos),
    #####:  172:        Token(TokenType::INT, dummyPos, 3),
        -:  173:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:  174:        Token(TokenType::OPENBRACE, dummyPos),
        -:  175:        Token(TokenType::EOL, dummyPos)
        8:  176:    };
        -:  177:    std::vector<Token> tokenLine2 = {
    #####:  178:        Token(TokenType::INT, dummyPos, 1),
        -:  179:        Token(TokenType::PLUS, dummyPos),
    #####:  180:        Token(TokenType::INT, dummyPos, 2),
        -:  181:        Token(TokenType::EOL, dummyPos)
        6:  182:    };
        -:  183:    std::vector<Token> tokenLine3 = {
        -:  184:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  185:        Token(TokenType::EOL, dummyPos)
        4:  186:    };
        -:  187:    std::vector<Token> tokenLine4 = {
        -:  188:        Token(TokenType::KEYWORD, dummyPos, "else"),
        -:  189:        Token(TokenType::OPENBRACE, dummyPos),
        -:  190:        Token(TokenType::EOL, dummyPos)
        5:  191:    };
        -:  192:    std::vector<Token> tokenLine5 = {
    #####:  193:        Token(TokenType::INT, dummyPos, 3),
        -:  194:        Token(TokenType::MINUS, dummyPos),
    #####:  195:        Token(TokenType::INT, dummyPos, 4),
        -:  196:        Token(TokenType::EOL, dummyPos)
        6:  197:    };
        -:  198:    std::vector<Token> tokenLine6 = {
        -:  199:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  200:        Token(TokenType::EOL, dummyPos)
        4:  201:    };
        -:  202:    const std::map<int, std::vector<Token>> tokenMap =
        -:  203:        {
    #####:  204:        {0, tokenLine1},
    #####:  205:        {1, tokenLine2},
    #####:  206:        {2, tokenLine3},
    #####:  207:        {3, tokenLine4},
    #####:  208:        {4, tokenLine5},
    #####:  209:        {5, tokenLine6},
    #####:  210:        {6, {Token(TokenType::EOF_, dummyPos)} }
       10:  211:        };
        -:  212:
        1:  213:    Parser parser(tokenMap);
        -:  214:    // Act: Parse the tokens
        1:  215:    const std::unique_ptr<Node> node = parser.parse();
        -:  216:
        -:  217:    // Assert: Check the returned Node
       1*:  218:    ASSERT_NE(node, nullptr);
       1*:  219:    EXPECT_EQ(node->getType(), NodeType::IfStmt);
        -:  220:
       1*:  221:    auto* ifStatement = dynamic_cast<IfStmt*>(node.get());
       1*:  222:    ASSERT_NE(ifStatement, nullptr);
        -:  223:
        -:  224:    // Check the condition node
        1:  225:    const Node* condition = ifStatement->getComparison().get();
       1*:  226:    ASSERT_NE(condition, nullptr);
       1*:  227:    EXPECT_EQ(condition->getType(), NodeType::Number);
        -:  228:
       1*:  229:    const auto* conditionNumber = dynamic_cast<const Number*>(condition);
       1*:  230:    ASSERT_NE(conditionNumber, nullptr);
       1*:  231:    EXPECT_EQ(std::get<int>(conditionNumber->getToken().getValue()), 3);
        -:  232:
        -:  233:    // Check the true branch (then block)
        1:  234:    const auto& trueBody = ifStatement->getIfBlock();
       1*:  235:    ASSERT_EQ(trueBody.size(), 1);  // One expression inside the true block
        -:  236:
        1:  237:    const Node* trueExpr = trueBody.at(0).get();
       1*:  238:    ASSERT_NE(trueExpr, nullptr);
       1*:  239:    EXPECT_EQ(trueExpr->getType(), NodeType::BinaryOperator);
        -:  240:
       1*:  241:    const auto* trueBinOp = dynamic_cast<const BinaryOperator*>(trueExpr);
       1*:  242:    ASSERT_NE(trueBinOp, nullptr);
        1:  243:    const Node* leftOperand = trueBinOp->getLeftNode().get();
        1:  244:    const Node* rightOperand = trueBinOp->getRightNode().get();
       1*:  245:    ASSERT_NE(leftOperand, nullptr);
       1*:  246:    ASSERT_NE(rightOperand, nullptr);
        -:  247:
       1*:  248:    EXPECT_EQ(leftOperand->getType(), NodeType::Number);
       1*:  249:    EXPECT_EQ(rightOperand->getType(), NodeType::Number);
        -:  250:
       1*:  251:    const auto* leftNum = dynamic_cast<const Number*>(leftOperand);
       1*:  252:    const auto* rightNum = dynamic_cast<const Number*>(rightOperand);
       1*:  253:    ASSERT_NE(leftNum, nullptr);
       1*:  254:    ASSERT_NE(rightNum, nullptr);
        -:  255:
       1*:  256:    EXPECT_EQ(std::get<int>(leftNum->getToken().getValue()), 1);
       1*:  257:    EXPECT_EQ(std::get<int>(rightNum->getToken().getValue()), 2);
        -:  258:
        -:  259:    // Check that the binary operator is PLUS
       1*:  260:    EXPECT_EQ(trueBinOp->getOperatorNode().getToken().getType(), TokenType::PLUS);
        -:  261:
        -:  262:    // Check the false branch (else block)
        1:  263:    const auto& falseBody = ifStatement->getElseBlock();
       1*:  264:    ASSERT_EQ(falseBody.size(), 1);  // One expression inside the else block
        -:  265:
        1:  266:    const Node* falseExpr = falseBody.at(0).get();
       1*:  267:    ASSERT_NE(falseExpr, nullptr);
       1*:  268:    EXPECT_EQ(falseExpr->getType(), NodeType::BinaryOperator);
        -:  269:
       1*:  270:    const auto* falseBinOp = dynamic_cast<const BinaryOperator*>(falseExpr);
       1*:  271:    ASSERT_NE(falseBinOp, nullptr);
        -:  272:
        1:  273:    const Node* falseLeft = falseBinOp->getLeftNode().get();
        1:  274:    const Node* falseRight = falseBinOp->getRightNode().get();
       1*:  275:    ASSERT_NE(falseLeft, nullptr);
       1*:  276:    ASSERT_NE(falseRight, nullptr);
        -:  277:
       1*:  278:    EXPECT_EQ(falseLeft->getType(), NodeType::Number);
       1*:  279:    EXPECT_EQ(falseRight->getType(), NodeType::Number);
        -:  280:
       1*:  281:    const auto* falseLeftNum = dynamic_cast<const Number*>(falseLeft);
       1*:  282:    const auto* falseRightNum = dynamic_cast<const Number*>(falseRight);
       1*:  283:    ASSERT_NE(falseLeftNum, nullptr);
       1*:  284:    ASSERT_NE(falseRightNum, nullptr);
        -:  285:
       1*:  286:    EXPECT_EQ(std::get<int>(falseLeftNum->getToken().getValue()), 3);
       1*:  287:    EXPECT_EQ(std::get<int>(falseRightNum->getToken().getValue()), 4);
        -:  288:
        -:  289:    // Check that the binary operator is MINUS
       1*:  290:    EXPECT_EQ(falseBinOp->getOperatorNode().getToken().getType(), TokenType::MINUS);
        -:  291:
       12:  292:}
------------------
_ZN32ParserTest_ParsesIfSatement_TestC1Ev:
function _ZN32ParserTest_ParsesIfSatement_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  168:TEST(ParserTest, ParsesIfSatement) {
        1:  168-block  0
call    0 returned 1
------------------
_ZN32ParserTest_ParsesIfSatement_TestD0Ev:
function _ZN32ParserTest_ParsesIfSatement_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  168:TEST(ParserTest, ParsesIfSatement) {
        1:  168-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN32ParserTest_ParsesIfSatement_TestD1Ev:
function _ZN32ParserTest_ParsesIfSatement_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  168:TEST(ParserTest, ParsesIfSatement) {
        1:  168-block  0
call    0 returned 1
------------------
_ZN32ParserTest_ParsesIfSatement_Test8TestBodyEv:
function _ZN32ParserTest_ParsesIfSatement_Test8TestBodyEv called 1 returned 100% blocks executed 33%
        1:  168:TEST(ParserTest, ParsesIfSatement) {
        -:  169:    std::vector<Token> tokenLine1 = {
        -:  170:        Token(TokenType::KEYWORD, dummyPos, "if"),
        -:  171:        Token(TokenType::OPENPAREN, dummyPos),
    #####:  172:        Token(TokenType::INT, dummyPos, 3),
    $$$$$:  172-block  0
        -:  173:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:  174:        Token(TokenType::OPENBRACE, dummyPos),
        -:  175:        Token(TokenType::EOL, dummyPos)
        8:  176:    };
        1:  176-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        7:  176-block  1
branch  3 taken 6 (fallthrough)
branch  4 taken 1
        6:  176-block  2
call    5 returned 6
    $$$$$:  176-block  3
    $$$$$:  176-block  4
    $$$$$:  176-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  176-block  6
call    8 never executed
    $$$$$:  176-block  7
        -:  177:    std::vector<Token> tokenLine2 = {
    #####:  178:        Token(TokenType::INT, dummyPos, 1),
    $$$$$:  178-block  0
        -:  179:        Token(TokenType::PLUS, dummyPos),
    #####:  180:        Token(TokenType::INT, dummyPos, 2),
    $$$$$:  180-block  0
        -:  181:        Token(TokenType::EOL, dummyPos)
        6:  182:    };
        1:  182-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  182-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  182-block  2
call    5 returned 4
    $$$$$:  182-block  3
    $$$$$:  182-block  4
    $$$$$:  182-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  182-block  6
call    8 never executed
    $$$$$:  182-block  7
        -:  183:    std::vector<Token> tokenLine3 = {
        -:  184:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  185:        Token(TokenType::EOL, dummyPos)
        4:  186:    };
        1:  186-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:  186-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:  186-block  2
call    5 returned 2
    $$$$$:  186-block  3
    $$$$$:  186-block  4
    $$$$$:  186-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  186-block  6
call    8 never executed
    $$$$$:  186-block  7
        -:  187:    std::vector<Token> tokenLine4 = {
        -:  188:        Token(TokenType::KEYWORD, dummyPos, "else"),
        -:  189:        Token(TokenType::OPENBRACE, dummyPos),
        -:  190:        Token(TokenType::EOL, dummyPos)
        5:  191:    };
        1:  191-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        4:  191-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 1
        3:  191-block  2
call    5 returned 3
    $$$$$:  191-block  3
    $$$$$:  191-block  4
    $$$$$:  191-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  191-block  6
call    8 never executed
    $$$$$:  191-block  7
        -:  192:    std::vector<Token> tokenLine5 = {
    #####:  193:        Token(TokenType::INT, dummyPos, 3),
    $$$$$:  193-block  0
        -:  194:        Token(TokenType::MINUS, dummyPos),
    #####:  195:        Token(TokenType::INT, dummyPos, 4),
    $$$$$:  195-block  0
        -:  196:        Token(TokenType::EOL, dummyPos)
        6:  197:    };
        1:  197-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  197-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  197-block  2
call    5 returned 4
    $$$$$:  197-block  3
    $$$$$:  197-block  4
    $$$$$:  197-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  197-block  6
call    8 never executed
    $$$$$:  197-block  7
        -:  198:    std::vector<Token> tokenLine6 = {
        -:  199:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  200:        Token(TokenType::EOL, dummyPos)
        4:  201:    };
        1:  201-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:  201-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:  201-block  2
call    5 returned 2
    $$$$$:  201-block  3
    $$$$$:  201-block  4
    $$$$$:  201-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  201-block  6
call    8 never executed
    $$$$$:  201-block  7
        -:  202:    const std::map<int, std::vector<Token>> tokenMap =
        -:  203:        {
    #####:  204:        {0, tokenLine1},
    $$$$$:  204-block  0
    #####:  205:        {1, tokenLine2},
    $$$$$:  205-block  0
    #####:  206:        {2, tokenLine3},
    $$$$$:  206-block  0
    #####:  207:        {3, tokenLine4},
    $$$$$:  207-block  0
    #####:  208:        {4, tokenLine5},
    $$$$$:  208-block  0
    #####:  209:        {5, tokenLine6},
    $$$$$:  209-block  0
    #####:  210:        {6, {Token(TokenType::EOF_, dummyPos)} }
    $$$$$:  210-block  0
       10:  211:        };
        1:  211-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        8:  211-block  1
branch  3 taken 7 (fallthrough)
branch  4 taken 1
        7:  211-block  2
call    5 returned 7
        1:  211-block  3
call    6 returned 1
    $$$$$:  211-block  4
    $$$$$:  211-block  5
    $$$$$:  211-block  6
    $$$$$:  211-block  7
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$:  211-block  8
call    9 never executed
    $$$$$:  211-block  9
    $$$$$:  211-block 10
call   10 never executed
    $$$$$:  211-block 11
        -:  212:
        1:  213:    Parser parser(tokenMap);
        1:  213-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  213-block  1
call    3 returned 1
    $$$$$:  213-block  2
call    4 never executed
    $$$$$:  213-block  3
        -:  214:    // Act: Parse the tokens
        1:  215:    const std::unique_ptr<Node> node = parser.parse();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  216:
        -:  217:    // Assert: Check the returned Node
       1*:  218:    ASSERT_NE(node, nullptr);
        1:  218-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  218-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  218-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  218-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  218-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  218-block  5
call   16 never executed
call   17 never executed
        1:  218-block  6
        1:  218-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  218-block  8
    $$$$$:  218-block  9
    $$$$$:  218-block 10
call   21 never executed
    $$$$$:  218-block 11
    $$$$$:  218-block 12
call   22 never executed
    $$$$$:  218-block 13
    $$$$$:  218-block 14
call   23 never executed
       1*:  219:    EXPECT_EQ(node->getType(), NodeType::IfStmt);
        1:  219-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  219-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  219-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:  219-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  219-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  219-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  219-block  6
call   20 never executed
call   21 never executed
        1:  219-block  7
call   22 returned 1
    $$$$$:  219-block  8
    $$$$$:  219-block  9
    $$$$$:  219-block 10
call   23 never executed
    $$$$$:  219-block 11
    $$$$$:  219-block 12
call   24 never executed
    $$$$$:  219-block 13
    $$$$$:  219-block 14
call   25 never executed
        -:  220:
       1*:  221:    auto* ifStatement = dynamic_cast<IfStmt*>(node.get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  221-block  0
    %%%%%:  221-block  1
       1*:  222:    ASSERT_NE(ifStatement, nullptr);
        1:  222-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  222-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  222-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  222-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  222-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  222-block  5
call   16 never executed
call   17 never executed
        1:  222-block  6
        1:  222-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  222-block  8
    $$$$$:  222-block  9
    $$$$$:  222-block 10
call   21 never executed
    $$$$$:  222-block 11
    $$$$$:  222-block 12
call   22 never executed
    $$$$$:  222-block 13
    $$$$$:  222-block 14
call   23 never executed
        -:  223:
        -:  224:    // Check the condition node
        1:  225:    const Node* condition = ifStatement->getComparison().get();
        1:  225-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  225-block  1
call    3 returned 1
       1*:  226:    ASSERT_NE(condition, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  226-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  226-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  226-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  226-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  226-block  4
call   16 never executed
call   17 never executed
        1:  226-block  5
        1:  226-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  226-block  7
    $$$$$:  226-block  8
    $$$$$:  226-block  9
call   21 never executed
    $$$$$:  226-block 10
    $$$$$:  226-block 11
call   22 never executed
    $$$$$:  226-block 12
    $$$$$:  226-block 13
call   23 never executed
       1*:  227:    EXPECT_EQ(condition->getType(), NodeType::Number);
        1:  227-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  227-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  227-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  227-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  227-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  227-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  227-block  6
call   19 never executed
call   20 never executed
        1:  227-block  7
call   21 returned 1
    $$$$$:  227-block  8
    $$$$$:  227-block  9
    $$$$$:  227-block 10
call   22 never executed
    $$$$$:  227-block 11
    $$$$$:  227-block 12
call   23 never executed
    $$$$$:  227-block 13
    $$$$$:  227-block 14
call   24 never executed
        -:  228:
       1*:  229:    const auto* conditionNumber = dynamic_cast<const Number*>(condition);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  229-block  0
    %%%%%:  229-block  1
       1*:  230:    ASSERT_NE(conditionNumber, nullptr);
        1:  230-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  230-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  230-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  230-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  230-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  230-block  5
call   16 never executed
call   17 never executed
        1:  230-block  6
        1:  230-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  230-block  8
    $$$$$:  230-block  9
    $$$$$:  230-block 10
call   21 never executed
    $$$$$:  230-block 11
    $$$$$:  230-block 12
call   22 never executed
    $$$$$:  230-block 13
    $$$$$:  230-block 14
call   23 never executed
       1*:  231:    EXPECT_EQ(std::get<int>(conditionNumber->getToken().getValue()), 3);
        1:  231-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  231-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  231-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  231-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  231-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  231-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  231-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  231-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  231-block  8
call   27 never executed
call   28 never executed
        1:  231-block  9
call   29 returned 1
    $$$$$:  231-block 10
call   30 never executed
    $$$$$:  231-block 11
call   31 never executed
    $$$$$:  231-block 12
    $$$$$:  231-block 13
    $$$$$:  231-block 14
    $$$$$:  231-block 15
call   32 never executed
    $$$$$:  231-block 16
    $$$$$:  231-block 17
call   33 never executed
    $$$$$:  231-block 18
    $$$$$:  231-block 19
call   34 never executed
        -:  232:
        -:  233:    // Check the true branch (then block)
        1:  234:    const auto& trueBody = ifStatement->getIfBlock();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  235:    ASSERT_EQ(trueBody.size(), 1);  // One expression inside the true block
        1:  235-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  235-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  235-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  235-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  235-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  235-block  5
call   17 never executed
call   18 never executed
        1:  235-block  6
        1:  235-block  7
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0
        1:  235-block  8
    $$$$$:  235-block  9
    $$$$$:  235-block 10
    $$$$$:  235-block 11
call   22 never executed
    $$$$$:  235-block 12
    $$$$$:  235-block 13
call   23 never executed
    $$$$$:  235-block 14
    $$$$$:  235-block 15
call   24 never executed
        -:  236:
        1:  237:    const Node* trueExpr = trueBody.at(0).get();
        1:  237-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  237-block  1
call    3 returned 1
       1*:  238:    ASSERT_NE(trueExpr, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  238-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  238-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  238-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  238-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  238-block  4
call   16 never executed
call   17 never executed
        1:  238-block  5
        1:  238-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  238-block  7
    $$$$$:  238-block  8
    $$$$$:  238-block  9
call   21 never executed
    $$$$$:  238-block 10
    $$$$$:  238-block 11
call   22 never executed
    $$$$$:  238-block 12
    $$$$$:  238-block 13
call   23 never executed
       1*:  239:    EXPECT_EQ(trueExpr->getType(), NodeType::BinaryOperator);
        1:  239-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  239-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  239-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  239-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  239-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  239-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  239-block  6
call   19 never executed
call   20 never executed
        1:  239-block  7
call   21 returned 1
    $$$$$:  239-block  8
    $$$$$:  239-block  9
    $$$$$:  239-block 10
call   22 never executed
    $$$$$:  239-block 11
    $$$$$:  239-block 12
call   23 never executed
    $$$$$:  239-block 13
    $$$$$:  239-block 14
call   24 never executed
        -:  240:
       1*:  241:    const auto* trueBinOp = dynamic_cast<const BinaryOperator*>(trueExpr);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  241-block  0
    %%%%%:  241-block  1
       1*:  242:    ASSERT_NE(trueBinOp, nullptr);
        1:  242-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  242-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  242-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  242-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  242-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  242-block  5
call   16 never executed
call   17 never executed
        1:  242-block  6
        1:  242-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  242-block  8
    $$$$$:  242-block  9
    $$$$$:  242-block 10
call   21 never executed
    $$$$$:  242-block 11
    $$$$$:  242-block 12
call   22 never executed
    $$$$$:  242-block 13
    $$$$$:  242-block 14
call   23 never executed
        1:  243:    const Node* leftOperand = trueBinOp->getLeftNode().get();
        1:  243-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  243-block  1
call    3 returned 1
        1:  244:    const Node* rightOperand = trueBinOp->getRightNode().get();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  244-block  0
call    3 returned 1
       1*:  245:    ASSERT_NE(leftOperand, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  245-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  245-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  245-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  245-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  245-block  4
call   16 never executed
call   17 never executed
        1:  245-block  5
        1:  245-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  245-block  7
    $$$$$:  245-block  8
    $$$$$:  245-block  9
call   21 never executed
    $$$$$:  245-block 10
    $$$$$:  245-block 11
call   22 never executed
    $$$$$:  245-block 12
    $$$$$:  245-block 13
call   23 never executed
       1*:  246:    ASSERT_NE(rightOperand, nullptr);
        1:  246-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  246-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  246-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  246-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  246-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  246-block  5
call   16 never executed
call   17 never executed
        1:  246-block  6
        1:  246-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  246-block  8
    $$$$$:  246-block  9
    $$$$$:  246-block 10
call   21 never executed
    $$$$$:  246-block 11
    $$$$$:  246-block 12
call   22 never executed
    $$$$$:  246-block 13
    $$$$$:  246-block 14
call   23 never executed
        -:  247:
       1*:  248:    EXPECT_EQ(leftOperand->getType(), NodeType::Number);
        1:  248-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  248-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  248-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  248-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  248-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  248-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  248-block  6
call   19 never executed
call   20 never executed
        1:  248-block  7
call   21 returned 1
    $$$$$:  248-block  8
    $$$$$:  248-block  9
    $$$$$:  248-block 10
call   22 never executed
    $$$$$:  248-block 11
    $$$$$:  248-block 12
call   23 never executed
    $$$$$:  248-block 13
    $$$$$:  248-block 14
call   24 never executed
       1*:  249:    EXPECT_EQ(rightOperand->getType(), NodeType::Number);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  249-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  249-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  249-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  249-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  249-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  249-block  5
call   19 never executed
call   20 never executed
        1:  249-block  6
call   21 returned 1
    $$$$$:  249-block  7
    $$$$$:  249-block  8
    $$$$$:  249-block  9
call   22 never executed
    $$$$$:  249-block 10
    $$$$$:  249-block 11
call   23 never executed
    $$$$$:  249-block 12
    $$$$$:  249-block 13
call   24 never executed
        -:  250:
       1*:  251:    const auto* leftNum = dynamic_cast<const Number*>(leftOperand);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  251-block  0
    %%%%%:  251-block  1
       1*:  252:    const auto* rightNum = dynamic_cast<const Number*>(rightOperand);
        1:  252-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  252-block  1
    %%%%%:  252-block  2
       1*:  253:    ASSERT_NE(leftNum, nullptr);
        1:  253-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  253-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  253-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  253-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  253-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  253-block  5
call   16 never executed
call   17 never executed
        1:  253-block  6
        1:  253-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  253-block  8
    $$$$$:  253-block  9
    $$$$$:  253-block 10
call   21 never executed
    $$$$$:  253-block 11
    $$$$$:  253-block 12
call   22 never executed
    $$$$$:  253-block 13
    $$$$$:  253-block 14
call   23 never executed
       1*:  254:    ASSERT_NE(rightNum, nullptr);
        1:  254-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  254-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  254-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  254-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  254-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  254-block  5
call   16 never executed
call   17 never executed
        1:  254-block  6
        1:  254-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  254-block  8
    $$$$$:  254-block  9
    $$$$$:  254-block 10
call   21 never executed
    $$$$$:  254-block 11
    $$$$$:  254-block 12
call   22 never executed
    $$$$$:  254-block 13
    $$$$$:  254-block 14
call   23 never executed
        -:  255:
       1*:  256:    EXPECT_EQ(std::get<int>(leftNum->getToken().getValue()), 1);
        1:  256-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  256-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  256-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  256-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  256-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  256-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  256-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  256-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  256-block  8
call   27 never executed
call   28 never executed
        1:  256-block  9
call   29 returned 1
    $$$$$:  256-block 10
call   30 never executed
    $$$$$:  256-block 11
call   31 never executed
    $$$$$:  256-block 12
    $$$$$:  256-block 13
    $$$$$:  256-block 14
    $$$$$:  256-block 15
call   32 never executed
    $$$$$:  256-block 16
    $$$$$:  256-block 17
call   33 never executed
    $$$$$:  256-block 18
    $$$$$:  256-block 19
call   34 never executed
       1*:  257:    EXPECT_EQ(std::get<int>(rightNum->getToken().getValue()), 2);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  257-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  257-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  257-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  257-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  257-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  257-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  257-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  257-block  7
call   27 never executed
call   28 never executed
        1:  257-block  8
call   29 returned 1
    $$$$$:  257-block  9
call   30 never executed
    $$$$$:  257-block 10
call   31 never executed
    $$$$$:  257-block 11
    $$$$$:  257-block 12
    $$$$$:  257-block 13
    $$$$$:  257-block 14
call   32 never executed
    $$$$$:  257-block 15
    $$$$$:  257-block 16
call   33 never executed
    $$$$$:  257-block 17
    $$$$$:  257-block 18
call   34 never executed
        -:  258:
        -:  259:    // Check that the binary operator is PLUS
       1*:  260:    EXPECT_EQ(trueBinOp->getOperatorNode().getToken().getType(), TokenType::PLUS);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  260-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  260-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  260-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  260-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  260-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  260-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  260-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  260-block  7
call   27 never executed
call   28 never executed
        1:  260-block  8
call   29 returned 1
    $$$$$:  260-block  9
call   30 never executed
    $$$$$:  260-block 10
call   31 never executed
    $$$$$:  260-block 11
    $$$$$:  260-block 12
    $$$$$:  260-block 13
    $$$$$:  260-block 14
    $$$$$:  260-block 15
call   32 never executed
    $$$$$:  260-block 16
    $$$$$:  260-block 17
call   33 never executed
    $$$$$:  260-block 18
    $$$$$:  260-block 19
call   34 never executed
        -:  261:
        -:  262:    // Check the false branch (else block)
        1:  263:    const auto& falseBody = ifStatement->getElseBlock();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  264:    ASSERT_EQ(falseBody.size(), 1);  // One expression inside the else block
        1:  264-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  264-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  264-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  264-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  264-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  264-block  5
call   17 never executed
call   18 never executed
        1:  264-block  6
        1:  264-block  7
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0
        1:  264-block  8
    $$$$$:  264-block  9
    $$$$$:  264-block 10
    $$$$$:  264-block 11
call   22 never executed
    $$$$$:  264-block 12
    $$$$$:  264-block 13
call   23 never executed
    $$$$$:  264-block 14
    $$$$$:  264-block 15
call   24 never executed
        -:  265:
        1:  266:    const Node* falseExpr = falseBody.at(0).get();
        1:  266-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  266-block  1
call    3 returned 1
       1*:  267:    ASSERT_NE(falseExpr, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  267-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  267-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  267-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  267-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  267-block  4
call   16 never executed
call   17 never executed
        1:  267-block  5
        1:  267-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  267-block  7
    $$$$$:  267-block  8
    $$$$$:  267-block  9
call   21 never executed
    $$$$$:  267-block 10
    $$$$$:  267-block 11
call   22 never executed
    $$$$$:  267-block 12
    $$$$$:  267-block 13
call   23 never executed
       1*:  268:    EXPECT_EQ(falseExpr->getType(), NodeType::BinaryOperator);
        1:  268-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  268-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  268-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  268-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  268-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  268-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  268-block  6
call   19 never executed
call   20 never executed
        1:  268-block  7
call   21 returned 1
    $$$$$:  268-block  8
    $$$$$:  268-block  9
    $$$$$:  268-block 10
call   22 never executed
    $$$$$:  268-block 11
    $$$$$:  268-block 12
call   23 never executed
    $$$$$:  268-block 13
    $$$$$:  268-block 14
call   24 never executed
        -:  269:
       1*:  270:    const auto* falseBinOp = dynamic_cast<const BinaryOperator*>(falseExpr);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  270-block  0
    %%%%%:  270-block  1
       1*:  271:    ASSERT_NE(falseBinOp, nullptr);
        1:  271-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  271-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  271-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  271-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  271-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  271-block  5
call   16 never executed
call   17 never executed
        1:  271-block  6
        1:  271-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  271-block  8
    $$$$$:  271-block  9
    $$$$$:  271-block 10
call   21 never executed
    $$$$$:  271-block 11
    $$$$$:  271-block 12
call   22 never executed
    $$$$$:  271-block 13
    $$$$$:  271-block 14
call   23 never executed
        -:  272:
        1:  273:    const Node* falseLeft = falseBinOp->getLeftNode().get();
        1:  273-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  273-block  1
call    3 returned 1
        1:  274:    const Node* falseRight = falseBinOp->getRightNode().get();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  274-block  0
call    3 returned 1
       1*:  275:    ASSERT_NE(falseLeft, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  275-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  275-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  275-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  275-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  275-block  4
call   16 never executed
call   17 never executed
        1:  275-block  5
        1:  275-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  275-block  7
    $$$$$:  275-block  8
    $$$$$:  275-block  9
call   21 never executed
    $$$$$:  275-block 10
    $$$$$:  275-block 11
call   22 never executed
    $$$$$:  275-block 12
    $$$$$:  275-block 13
call   23 never executed
       1*:  276:    ASSERT_NE(falseRight, nullptr);
        1:  276-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  276-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  276-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  276-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  276-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  276-block  5
call   16 never executed
call   17 never executed
        1:  276-block  6
        1:  276-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  276-block  8
    $$$$$:  276-block  9
    $$$$$:  276-block 10
call   21 never executed
    $$$$$:  276-block 11
    $$$$$:  276-block 12
call   22 never executed
    $$$$$:  276-block 13
    $$$$$:  276-block 14
call   23 never executed
        -:  277:
       1*:  278:    EXPECT_EQ(falseLeft->getType(), NodeType::Number);
        1:  278-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  278-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  278-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  278-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  278-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  278-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  278-block  6
call   19 never executed
call   20 never executed
        1:  278-block  7
call   21 returned 1
    $$$$$:  278-block  8
    $$$$$:  278-block  9
    $$$$$:  278-block 10
call   22 never executed
    $$$$$:  278-block 11
    $$$$$:  278-block 12
call   23 never executed
    $$$$$:  278-block 13
    $$$$$:  278-block 14
call   24 never executed
       1*:  279:    EXPECT_EQ(falseRight->getType(), NodeType::Number);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  279-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  279-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  279-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  279-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  279-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  279-block  5
call   19 never executed
call   20 never executed
        1:  279-block  6
call   21 returned 1
    $$$$$:  279-block  7
    $$$$$:  279-block  8
    $$$$$:  279-block  9
call   22 never executed
    $$$$$:  279-block 10
    $$$$$:  279-block 11
call   23 never executed
    $$$$$:  279-block 12
    $$$$$:  279-block 13
call   24 never executed
        -:  280:
       1*:  281:    const auto* falseLeftNum = dynamic_cast<const Number*>(falseLeft);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  281-block  0
    %%%%%:  281-block  1
       1*:  282:    const auto* falseRightNum = dynamic_cast<const Number*>(falseRight);
        1:  282-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  282-block  1
    %%%%%:  282-block  2
       1*:  283:    ASSERT_NE(falseLeftNum, nullptr);
        1:  283-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  283-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  283-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  283-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  283-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  283-block  5
call   16 never executed
call   17 never executed
        1:  283-block  6
        1:  283-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  283-block  8
    $$$$$:  283-block  9
    $$$$$:  283-block 10
call   21 never executed
    $$$$$:  283-block 11
    $$$$$:  283-block 12
call   22 never executed
    $$$$$:  283-block 13
    $$$$$:  283-block 14
call   23 never executed
       1*:  284:    ASSERT_NE(falseRightNum, nullptr);
        1:  284-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  284-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  284-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  284-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  284-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  284-block  5
call   16 never executed
call   17 never executed
        1:  284-block  6
        1:  284-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  284-block  8
    $$$$$:  284-block  9
    $$$$$:  284-block 10
call   21 never executed
    $$$$$:  284-block 11
    $$$$$:  284-block 12
call   22 never executed
    $$$$$:  284-block 13
    $$$$$:  284-block 14
call   23 never executed
        -:  285:
       1*:  286:    EXPECT_EQ(std::get<int>(falseLeftNum->getToken().getValue()), 3);
        1:  286-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  286-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  286-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  286-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  286-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  286-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  286-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  286-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  286-block  8
call   27 never executed
call   28 never executed
        1:  286-block  9
call   29 returned 1
    $$$$$:  286-block 10
call   30 never executed
    $$$$$:  286-block 11
call   31 never executed
    $$$$$:  286-block 12
    $$$$$:  286-block 13
    $$$$$:  286-block 14
    $$$$$:  286-block 15
call   32 never executed
    $$$$$:  286-block 16
    $$$$$:  286-block 17
call   33 never executed
    $$$$$:  286-block 18
    $$$$$:  286-block 19
call   34 never executed
       1*:  287:    EXPECT_EQ(std::get<int>(falseRightNum->getToken().getValue()), 4);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  287-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  287-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  287-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  287-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  287-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  287-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  287-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  287-block  7
call   27 never executed
call   28 never executed
        1:  287-block  8
call   29 returned 1
    $$$$$:  287-block  9
call   30 never executed
    $$$$$:  287-block 10
call   31 never executed
    $$$$$:  287-block 11
    $$$$$:  287-block 12
    $$$$$:  287-block 13
    $$$$$:  287-block 14
call   32 never executed
    $$$$$:  287-block 15
    $$$$$:  287-block 16
call   33 never executed
    $$$$$:  287-block 17
    $$$$$:  287-block 18
call   34 never executed
        -:  288:
        -:  289:    // Check that the binary operator is MINUS
       1*:  290:    EXPECT_EQ(falseBinOp->getOperatorNode().getToken().getType(), TokenType::MINUS);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  290-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  290-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  290-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  290-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  290-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  290-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  290-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  290-block  7
call   27 never executed
call   28 never executed
        1:  290-block  8
call   29 returned 1
    $$$$$:  290-block  9
call   30 never executed
    $$$$$:  290-block 10
call   31 never executed
    $$$$$:  290-block 11
    $$$$$:  290-block 12
    $$$$$:  290-block 13
    $$$$$:  290-block 14
    $$$$$:  290-block 15
call   32 never executed
    $$$$$:  290-block 16
    $$$$$:  290-block 17
call   33 never executed
    $$$$$:  290-block 18
    $$$$$:  290-block 19
call   34 never executed
        -:  291:
       12:  292:}
        1:  292-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  292-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  292-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  292-block  3
call   10 returned 1
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
        1:  292-block  4
call   14 returned 1
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1:  292-block  5
call   18 returned 1
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0 (throw)
        1:  292-block  6
call   22 returned 1
call   23 returned 1
branch 24 taken 1 (fallthrough)
branch 25 taken 0 (throw)
        1:  292-block  7
        1:  292-block  8
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
call   30 returned 1
call   31 returned 1
call   32 returned 1
call   33 returned 1
branch 34 taken 1 (fallthrough)
branch 35 taken 0 (throw)
        1:  292-block  9
call   36 returned 1
call   37 returned 1
branch 38 taken 1 (fallthrough)
branch 39 taken 0 (throw)
        1:  292-block 10
call   40 returned 1
call   41 returned 1
branch 42 taken 1 (fallthrough)
branch 43 taken 0 (throw)
        1:  292-block 11
call   44 returned 1
call   45 returned 1
branch 46 taken 1 (fallthrough)
branch 47 taken 0 (throw)
        1:  292-block 12
        1:  292-block 13
call   48 returned 1
call   49 returned 1
call   50 returned 1
call   51 returned 1
call   52 returned 1
call   53 returned 1
branch 54 taken 1 (fallthrough)
branch 55 taken 0 (throw)
        1:  292-block 14
call   56 returned 1
call   57 returned 1
branch 58 taken 1 (fallthrough)
branch 59 taken 0 (throw)
        1:  292-block 15
        1:  292-block 16
call   60 returned 1
call   61 returned 1
call   62 returned 1
branch 63 taken 1 (fallthrough)
branch 64 taken 0 (throw)
        1:  292-block 17
call   65 returned 1
branch 66 taken 1 (fallthrough)
branch 67 taken 0 (throw)
        1:  292-block 18
call   68 returned 1
call   69 returned 1
branch 70 taken 1 (fallthrough)
branch 71 taken 0 (throw)
        1:  292-block 19
call   72 returned 1
call   73 returned 1
branch 74 taken 1 (fallthrough)
branch 75 taken 0 (throw)
        1:  292-block 20
        1:  292-block 21
call   76 returned 1
call   77 returned 1
call   78 returned 1
call   79 returned 1
call   80 returned 1
branch 81 taken 1 (fallthrough)
branch 82 taken 0 (throw)
        1:  292-block 22
call   83 returned 1
call   84 returned 1
branch 85 taken 1 (fallthrough)
branch 86 taken 0 (throw)
        1:  292-block 23
call   87 returned 1
call   88 returned 1
branch 89 taken 1 (fallthrough)
branch 90 taken 0 (throw)
        1:  292-block 24
call   91 returned 1
call   92 returned 1
branch 93 taken 1 (fallthrough)
branch 94 taken 0 (throw)
        1:  292-block 25
        1:  292-block 26
call   95 returned 1
call   96 returned 1
call   97 returned 1
call   98 returned 1
call   99 returned 1
call   100 returned 1
branch 101 taken 1 (fallthrough)
branch 102 taken 0 (throw)
        1:  292-block 27
call   103 returned 1
call   104 returned 1
branch 105 taken 1 (fallthrough)
branch 106 taken 0 (throw)
        1:  292-block 28
        1:  292-block 29
call   107 returned 1
call   108 returned 1
call   109 returned 1
branch 110 taken 1 (fallthrough)
branch 111 taken 0 (throw)
        1:  292-block 30
call   112 returned 1
branch 113 taken 1 (fallthrough)
branch 114 taken 0 (throw)
        1:  292-block 31
call   115 returned 1
branch 116 taken 1 (fallthrough)
branch 117 taken 0 (throw)
        1:  292-block 32
call   118 returned 1
branch 119 taken 1 (fallthrough)
branch 120 taken 0 (throw)
        1:  292-block 33
call   121 returned 1
branch 122 taken 1 (fallthrough)
branch 123 taken 0 (throw)
        1:  292-block 34
call   124 returned 1
branch 125 taken 1 (fallthrough)
branch 126 taken 0 (throw)
        1:  292-block 35
call   127 returned 1
call   128 returned 1
branch 129 taken 1 (fallthrough)
branch 130 taken 0 (throw)
        1:  292-block 36
        1:  292-block 37
call   131 returned 1
branch 132 taken 1 (fallthrough)
branch 133 taken 0 (throw)
        1:  292-block 38
call   134 returned 1
branch 135 taken 1 (fallthrough)
branch 136 taken 0 (throw)
        1:  292-block 39
        1:  292-block 40
call   137 returned 1
        2:  292-block 41
branch 138 taken 1 (fallthrough)
branch 139 taken 1
        1:  292-block 42
call   140 returned 1
call   141 returned 1
branch 142 taken 1 (fallthrough)
branch 143 taken 0 (throw)
        1:  292-block 43
call   144 returned 1
branch 145 taken 1 (fallthrough)
branch 146 taken 0
        1:  292-block 44
        1:  292-block 45
call   147 returned 1
branch 148 taken 1 (fallthrough)
branch 149 taken 0
        1:  292-block 46
        1:  292-block 47
call   150 returned 1
branch 151 taken 1 (fallthrough)
branch 152 taken 0
        1:  292-block 48
        1:  292-block 49
call   153 returned 1
branch 154 taken 1 (fallthrough)
branch 155 taken 0
        1:  292-block 50
        1:  292-block 51
call   156 returned 1
branch 157 taken 1 (fallthrough)
branch 158 taken 0
        1:  292-block 52
        1:  292-block 53
call   159 returned 1
branch 160 taken 1 (fallthrough)
branch 161 taken 0
        1:  292-block 54
        1:  292-block 55
call   162 returned 1
branch 163 taken 1 (fallthrough)
branch 164 taken 0
        1:  292-block 56
        1:  292-block 57
call   165 returned 1
branch 166 taken 1 (fallthrough)
branch 167 taken 0
        1:  292-block 58
        1:  292-block 59
call   168 returned 1
branch 169 taken 1 (fallthrough)
branch 170 taken 0
    $$$$$:  292-block 60
call   171 never executed
    $$$$$:  292-block 61
    $$$$$:  292-block 62
    $$$$$:  292-block 63
call   172 never executed
    $$$$$:  292-block 64
    $$$$$:  292-block 65
    $$$$$:  292-block 66
call   173 never executed
    $$$$$:  292-block 67
    $$$$$:  292-block 68
    $$$$$:  292-block 69
call   174 never executed
    $$$$$:  292-block 70
    $$$$$:  292-block 71
call   175 never executed
    $$$$$:  292-block 72
    $$$$$:  292-block 73
    $$$$$:  292-block 74
call   176 never executed
    $$$$$:  292-block 75
    $$$$$:  292-block 76
branch 177 never executed (fallthrough)
branch 178 never executed
    $$$$$:  292-block 77
    $$$$$:  292-block 78
branch 179 never executed (fallthrough)
branch 180 never executed
    $$$$$:  292-block 79
call   181 never executed
    $$$$$:  292-block 80
call   182 never executed
    $$$$$:  292-block 81
    $$$$$:  292-block 82
    $$$$$:  292-block 83
call   183 never executed
    $$$$$:  292-block 84
    $$$$$:  292-block 85
call   184 never executed
    $$$$$:  292-block 86
    $$$$$:  292-block 87
    $$$$$:  292-block 88
call   185 never executed
    $$$$$:  292-block 89
    $$$$$:  292-block 90
branch 186 never executed (fallthrough)
branch 187 never executed
    $$$$$:  292-block 91
    $$$$$:  292-block 92
branch 188 never executed (fallthrough)
branch 189 never executed
    $$$$$:  292-block 93
call   190 never executed
    $$$$$:  292-block 94
call   191 never executed
    $$$$$:  292-block 95
    $$$$$:  292-block 96
    $$$$$:  292-block 97
call   192 never executed
    $$$$$:  292-block 98
    $$$$$:  292-block 99
    $$$$$:  292-block 100
branch 193 never executed (fallthrough)
branch 194 never executed
    $$$$$:  292-block 101
    $$$$$:  292-block 102
branch 195 never executed (fallthrough)
branch 196 never executed
    $$$$$:  292-block 103
call   197 never executed
    $$$$$:  292-block 104
call   198 never executed
    $$$$$:  292-block 105
    $$$$$:  292-block 106
    $$$$$:  292-block 107
call   199 never executed
    $$$$$:  292-block 108
    $$$$$:  292-block 109
    $$$$$:  292-block 110
call   200 never executed
    $$$$$:  292-block 111
    $$$$$:  292-block 112
branch 201 never executed (fallthrough)
branch 202 never executed
    $$$$$:  292-block 113
    $$$$$:  292-block 114
branch 203 never executed (fallthrough)
branch 204 never executed
    $$$$$:  292-block 115
call   205 never executed
    $$$$$:  292-block 116
call   206 never executed
    $$$$$:  292-block 117
    $$$$$:  292-block 118
    $$$$$:  292-block 119
call   207 never executed
    $$$$$:  292-block 120
    $$$$$:  292-block 121
call   208 never executed
    $$$$$:  292-block 122
    $$$$$:  292-block 123
    $$$$$:  292-block 124
call   209 never executed
    $$$$$:  292-block 125
    $$$$$:  292-block 126
branch 210 never executed (fallthrough)
branch 211 never executed
    $$$$$:  292-block 127
    $$$$$:  292-block 128
branch 212 never executed (fallthrough)
branch 213 never executed
    $$$$$:  292-block 129
call   214 never executed
    $$$$$:  292-block 130
call   215 never executed
    $$$$$:  292-block 131
    $$$$$:  292-block 132
    $$$$$:  292-block 133
call   216 never executed
    $$$$$:  292-block 134
    $$$$$:  292-block 135
    $$$$$:  292-block 136
branch 217 never executed (fallthrough)
branch 218 never executed
    $$$$$:  292-block 137
    $$$$$:  292-block 138
branch 219 never executed (fallthrough)
branch 220 never executed
    $$$$$:  292-block 139
call   221 never executed
    $$$$$:  292-block 140
call   222 never executed
    $$$$$:  292-block 141
    $$$$$:  292-block 142
branch 223 never executed (fallthrough)
branch 224 never executed
    $$$$$:  292-block 143
call   225 never executed
    $$$$$:  292-block 144
    $$$$$:  292-block 145
    $$$$$:  292-block 146
branch 226 never executed (fallthrough)
branch 227 never executed
    $$$$$:  292-block 147
    $$$$$:  292-block 148
branch 228 never executed (fallthrough)
branch 229 never executed
    $$$$$:  292-block 149
call   230 never executed
    $$$$$:  292-block 150
    $$$$$:  292-block 151
    $$$$$:  292-block 152
branch 231 never executed (fallthrough)
branch 232 never executed
    $$$$$:  292-block 153
    $$$$$:  292-block 154
branch 233 never executed (fallthrough)
branch 234 never executed
    $$$$$:  292-block 155
call   235 never executed
    $$$$$:  292-block 156
call   236 never executed
    $$$$$:  292-block 157
call   237 never executed
    $$$$$:  292-block 158
call   238 never executed
    $$$$$:  292-block 159
call   239 never executed
    $$$$$:  292-block 160
call   240 never executed
    $$$$$:  292-block 161
call   241 never executed
    $$$$$:  292-block 162
call   242 never executed
    $$$$$:  292-block 163
call   243 never executed
    $$$$$:  292-block 164
call   244 never executed
------------------
        -:  293:
        4:  294:TEST(ParserTest, ParsesWhileSatement) {
        -:  295:    std::vector<Token> tokenLine1 = {
        -:  296:        Token(TokenType::KEYWORD, dummyPos, "while"),
        -:  297:        Token(TokenType::OPENPAREN, dummyPos),
    #####:  298:        Token(TokenType::INT, dummyPos, 3),
        -:  299:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:  300:        Token(TokenType::OPENBRACE, dummyPos),
        -:  301:        Token(TokenType::EOL, dummyPos)
        8:  302:    };
        -:  303:    std::vector<Token> tokenLine2 = {
    #####:  304:        Token(TokenType::INT, dummyPos, 1),
        -:  305:        Token(TokenType::PLUS, dummyPos),
    #####:  306:        Token(TokenType::INT, dummyPos, 2),
        -:  307:        Token(TokenType::EOL, dummyPos)
        6:  308:    };
        -:  309:    std::vector<Token> tokenLine3 = {
        -:  310:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  311:        Token(TokenType::EOL, dummyPos)
        4:  312:    };
        -:  313:    const std::map<int, std::vector<Token>> tokenMap =
        -:  314:        {
    #####:  315:        {0, tokenLine1},
    #####:  316:        {1, tokenLine2},
    #####:  317:        {2, tokenLine3},
    #####:  318:        {6, {Token(TokenType::EOF_, dummyPos)} }
        7:  319:        };
        -:  320:
        1:  321:    Parser parser(tokenMap);
        -:  322:    // Act: Parse the tokens
        1:  323:    const std::unique_ptr<Node> node = parser.parse();
        -:  324:
        -:  325:    // Assert: Check the returned Node
       1*:  326:    ASSERT_NE(node, nullptr);
       1*:  327:    EXPECT_EQ(node->getType(), NodeType::WhileStmt);
        -:  328:
       1*:  329:    auto* whileStatement = dynamic_cast<WhileStmt*>(node.get());
       1*:  330:    ASSERT_NE(whileStatement, nullptr);
        -:  331:
        -:  332:    // Check the condition node
        1:  333:    const Node* condition = whileStatement->getComparison().get();
       1*:  334:    ASSERT_NE(condition, nullptr);
       1*:  335:    EXPECT_EQ(condition->getType(), NodeType::Number);
        -:  336:
       1*:  337:    const auto* conditionNumber = dynamic_cast<const Number*>(condition);
       1*:  338:    ASSERT_NE(conditionNumber, nullptr);
       1*:  339:    EXPECT_EQ(std::get<int>(conditionNumber->getToken().getValue()), 3);
        -:  340:
        -:  341:    // Check the true branch (then block)
        1:  342:    const auto& loopBody = whileStatement->getWhileBlock();
       1*:  343:    ASSERT_EQ(loopBody.size(), 1);  // One expression inside the true block
        -:  344:
        1:  345:    const Node* trueExpr = loopBody.at(0).get();
       1*:  346:    ASSERT_NE(trueExpr, nullptr);
       1*:  347:    EXPECT_EQ(trueExpr->getType(), NodeType::BinaryOperator);
        -:  348:
       1*:  349:    const auto* trueBinOp = dynamic_cast<const BinaryOperator*>(trueExpr);
       1*:  350:    ASSERT_NE(trueBinOp, nullptr);
        1:  351:    const Node* leftOperand = trueBinOp->getLeftNode().get();
        1:  352:    const Node* rightOperand = trueBinOp->getRightNode().get();
       1*:  353:    ASSERT_NE(leftOperand, nullptr);
       1*:  354:    ASSERT_NE(rightOperand, nullptr);
        -:  355:
       1*:  356:    EXPECT_EQ(leftOperand->getType(), NodeType::Number);
       1*:  357:    EXPECT_EQ(rightOperand->getType(), NodeType::Number);
        -:  358:
       1*:  359:    const auto* leftNum = dynamic_cast<const Number*>(leftOperand);
       1*:  360:    const auto* rightNum = dynamic_cast<const Number*>(rightOperand);
       1*:  361:    ASSERT_NE(leftNum, nullptr);
       1*:  362:    ASSERT_NE(rightNum, nullptr);
        -:  363:
       1*:  364:    EXPECT_EQ(std::get<int>(leftNum->getToken().getValue()), 1);
       1*:  365:    EXPECT_EQ(std::get<int>(rightNum->getToken().getValue()), 2);
        -:  366:
        -:  367:    // Check that the binary operator is PLUS
       1*:  368:    EXPECT_EQ(trueBinOp->getOperatorNode().getToken().getType(), TokenType::PLUS);
        9:  369:}
------------------
_ZN35ParserTest_ParsesWhileSatement_TestC1Ev:
function _ZN35ParserTest_ParsesWhileSatement_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  294:TEST(ParserTest, ParsesWhileSatement) {
        1:  294-block  0
call    0 returned 1
------------------
_ZN35ParserTest_ParsesWhileSatement_TestD0Ev:
function _ZN35ParserTest_ParsesWhileSatement_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  294:TEST(ParserTest, ParsesWhileSatement) {
        1:  294-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN35ParserTest_ParsesWhileSatement_TestD1Ev:
function _ZN35ParserTest_ParsesWhileSatement_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  294:TEST(ParserTest, ParsesWhileSatement) {
        1:  294-block  0
call    0 returned 1
------------------
_ZN35ParserTest_ParsesWhileSatement_Test8TestBodyEv:
function _ZN35ParserTest_ParsesWhileSatement_Test8TestBodyEv called 1 returned 100% blocks executed 33%
        1:  294:TEST(ParserTest, ParsesWhileSatement) {
        -:  295:    std::vector<Token> tokenLine1 = {
        -:  296:        Token(TokenType::KEYWORD, dummyPos, "while"),
        -:  297:        Token(TokenType::OPENPAREN, dummyPos),
    #####:  298:        Token(TokenType::INT, dummyPos, 3),
    $$$$$:  298-block  0
        -:  299:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:  300:        Token(TokenType::OPENBRACE, dummyPos),
        -:  301:        Token(TokenType::EOL, dummyPos)
        8:  302:    };
        1:  302-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        7:  302-block  1
branch  3 taken 6 (fallthrough)
branch  4 taken 1
        6:  302-block  2
call    5 returned 6
    $$$$$:  302-block  3
    $$$$$:  302-block  4
    $$$$$:  302-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  302-block  6
call    8 never executed
    $$$$$:  302-block  7
        -:  303:    std::vector<Token> tokenLine2 = {
    #####:  304:        Token(TokenType::INT, dummyPos, 1),
    $$$$$:  304-block  0
        -:  305:        Token(TokenType::PLUS, dummyPos),
    #####:  306:        Token(TokenType::INT, dummyPos, 2),
    $$$$$:  306-block  0
        -:  307:        Token(TokenType::EOL, dummyPos)
        6:  308:    };
        1:  308-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  308-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  308-block  2
call    5 returned 4
    $$$$$:  308-block  3
    $$$$$:  308-block  4
    $$$$$:  308-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  308-block  6
call    8 never executed
    $$$$$:  308-block  7
        -:  309:    std::vector<Token> tokenLine3 = {
        -:  310:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  311:        Token(TokenType::EOL, dummyPos)
        4:  312:    };
        1:  312-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:  312-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:  312-block  2
call    5 returned 2
    $$$$$:  312-block  3
    $$$$$:  312-block  4
    $$$$$:  312-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  312-block  6
call    8 never executed
    $$$$$:  312-block  7
        -:  313:    const std::map<int, std::vector<Token>> tokenMap =
        -:  314:        {
    #####:  315:        {0, tokenLine1},
    $$$$$:  315-block  0
    #####:  316:        {1, tokenLine2},
    $$$$$:  316-block  0
    #####:  317:        {2, tokenLine3},
    $$$$$:  317-block  0
    #####:  318:        {6, {Token(TokenType::EOF_, dummyPos)} }
    $$$$$:  318-block  0
        7:  319:        };
        1:  319-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  319-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  319-block  2
call    5 returned 4
        1:  319-block  3
call    6 returned 1
    $$$$$:  319-block  4
    $$$$$:  319-block  5
    $$$$$:  319-block  6
    $$$$$:  319-block  7
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$:  319-block  8
call    9 never executed
    $$$$$:  319-block  9
    $$$$$:  319-block 10
call   10 never executed
    $$$$$:  319-block 11
        -:  320:
        1:  321:    Parser parser(tokenMap);
        1:  321-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  321-block  1
call    3 returned 1
    $$$$$:  321-block  2
call    4 never executed
    $$$$$:  321-block  3
        -:  322:    // Act: Parse the tokens
        1:  323:    const std::unique_ptr<Node> node = parser.parse();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  324:
        -:  325:    // Assert: Check the returned Node
       1*:  326:    ASSERT_NE(node, nullptr);
        1:  326-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  326-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  326-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  326-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  326-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  326-block  5
call   16 never executed
call   17 never executed
        1:  326-block  6
        1:  326-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  326-block  8
    $$$$$:  326-block  9
    $$$$$:  326-block 10
call   21 never executed
    $$$$$:  326-block 11
    $$$$$:  326-block 12
call   22 never executed
    $$$$$:  326-block 13
    $$$$$:  326-block 14
call   23 never executed
       1*:  327:    EXPECT_EQ(node->getType(), NodeType::WhileStmt);
        1:  327-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  327-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  327-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:  327-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  327-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  327-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  327-block  6
call   20 never executed
call   21 never executed
        1:  327-block  7
call   22 returned 1
    $$$$$:  327-block  8
    $$$$$:  327-block  9
    $$$$$:  327-block 10
call   23 never executed
    $$$$$:  327-block 11
    $$$$$:  327-block 12
call   24 never executed
    $$$$$:  327-block 13
    $$$$$:  327-block 14
call   25 never executed
        -:  328:
       1*:  329:    auto* whileStatement = dynamic_cast<WhileStmt*>(node.get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  329-block  0
    %%%%%:  329-block  1
       1*:  330:    ASSERT_NE(whileStatement, nullptr);
        1:  330-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  330-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  330-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  330-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  330-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  330-block  5
call   16 never executed
call   17 never executed
        1:  330-block  6
        1:  330-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  330-block  8
    $$$$$:  330-block  9
    $$$$$:  330-block 10
call   21 never executed
    $$$$$:  330-block 11
    $$$$$:  330-block 12
call   22 never executed
    $$$$$:  330-block 13
    $$$$$:  330-block 14
call   23 never executed
        -:  331:
        -:  332:    // Check the condition node
        1:  333:    const Node* condition = whileStatement->getComparison().get();
        1:  333-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  333-block  1
call    3 returned 1
       1*:  334:    ASSERT_NE(condition, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  334-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  334-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  334-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  334-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  334-block  4
call   16 never executed
call   17 never executed
        1:  334-block  5
        1:  334-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  334-block  7
    $$$$$:  334-block  8
    $$$$$:  334-block  9
call   21 never executed
    $$$$$:  334-block 10
    $$$$$:  334-block 11
call   22 never executed
    $$$$$:  334-block 12
    $$$$$:  334-block 13
call   23 never executed
       1*:  335:    EXPECT_EQ(condition->getType(), NodeType::Number);
        1:  335-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  335-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  335-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  335-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  335-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  335-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  335-block  6
call   19 never executed
call   20 never executed
        1:  335-block  7
call   21 returned 1
    $$$$$:  335-block  8
    $$$$$:  335-block  9
    $$$$$:  335-block 10
call   22 never executed
    $$$$$:  335-block 11
    $$$$$:  335-block 12
call   23 never executed
    $$$$$:  335-block 13
    $$$$$:  335-block 14
call   24 never executed
        -:  336:
       1*:  337:    const auto* conditionNumber = dynamic_cast<const Number*>(condition);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  337-block  0
    %%%%%:  337-block  1
       1*:  338:    ASSERT_NE(conditionNumber, nullptr);
        1:  338-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  338-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  338-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  338-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  338-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  338-block  5
call   16 never executed
call   17 never executed
        1:  338-block  6
        1:  338-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  338-block  8
    $$$$$:  338-block  9
    $$$$$:  338-block 10
call   21 never executed
    $$$$$:  338-block 11
    $$$$$:  338-block 12
call   22 never executed
    $$$$$:  338-block 13
    $$$$$:  338-block 14
call   23 never executed
       1*:  339:    EXPECT_EQ(std::get<int>(conditionNumber->getToken().getValue()), 3);
        1:  339-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  339-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  339-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  339-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  339-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  339-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  339-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  339-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  339-block  8
call   27 never executed
call   28 never executed
        1:  339-block  9
call   29 returned 1
    $$$$$:  339-block 10
call   30 never executed
    $$$$$:  339-block 11
call   31 never executed
    $$$$$:  339-block 12
    $$$$$:  339-block 13
    $$$$$:  339-block 14
    $$$$$:  339-block 15
call   32 never executed
    $$$$$:  339-block 16
    $$$$$:  339-block 17
call   33 never executed
    $$$$$:  339-block 18
    $$$$$:  339-block 19
call   34 never executed
        -:  340:
        -:  341:    // Check the true branch (then block)
        1:  342:    const auto& loopBody = whileStatement->getWhileBlock();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  343:    ASSERT_EQ(loopBody.size(), 1);  // One expression inside the true block
        1:  343-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  343-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  343-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  343-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  343-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  343-block  5
call   17 never executed
call   18 never executed
        1:  343-block  6
        1:  343-block  7
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0
        1:  343-block  8
    $$$$$:  343-block  9
    $$$$$:  343-block 10
    $$$$$:  343-block 11
call   22 never executed
    $$$$$:  343-block 12
    $$$$$:  343-block 13
call   23 never executed
    $$$$$:  343-block 14
    $$$$$:  343-block 15
call   24 never executed
        -:  344:
        1:  345:    const Node* trueExpr = loopBody.at(0).get();
        1:  345-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  345-block  1
call    3 returned 1
       1*:  346:    ASSERT_NE(trueExpr, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  346-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  346-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  346-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  346-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  346-block  4
call   16 never executed
call   17 never executed
        1:  346-block  5
        1:  346-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  346-block  7
    $$$$$:  346-block  8
    $$$$$:  346-block  9
call   21 never executed
    $$$$$:  346-block 10
    $$$$$:  346-block 11
call   22 never executed
    $$$$$:  346-block 12
    $$$$$:  346-block 13
call   23 never executed
       1*:  347:    EXPECT_EQ(trueExpr->getType(), NodeType::BinaryOperator);
        1:  347-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  347-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  347-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  347-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  347-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  347-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  347-block  6
call   19 never executed
call   20 never executed
        1:  347-block  7
call   21 returned 1
    $$$$$:  347-block  8
    $$$$$:  347-block  9
    $$$$$:  347-block 10
call   22 never executed
    $$$$$:  347-block 11
    $$$$$:  347-block 12
call   23 never executed
    $$$$$:  347-block 13
    $$$$$:  347-block 14
call   24 never executed
        -:  348:
       1*:  349:    const auto* trueBinOp = dynamic_cast<const BinaryOperator*>(trueExpr);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  349-block  0
    %%%%%:  349-block  1
       1*:  350:    ASSERT_NE(trueBinOp, nullptr);
        1:  350-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  350-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  350-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  350-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  350-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  350-block  5
call   16 never executed
call   17 never executed
        1:  350-block  6
        1:  350-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  350-block  8
    $$$$$:  350-block  9
    $$$$$:  350-block 10
call   21 never executed
    $$$$$:  350-block 11
    $$$$$:  350-block 12
call   22 never executed
    $$$$$:  350-block 13
    $$$$$:  350-block 14
call   23 never executed
        1:  351:    const Node* leftOperand = trueBinOp->getLeftNode().get();
        1:  351-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  351-block  1
call    3 returned 1
        1:  352:    const Node* rightOperand = trueBinOp->getRightNode().get();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  352-block  0
call    3 returned 1
       1*:  353:    ASSERT_NE(leftOperand, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  353-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  353-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  353-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  353-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  353-block  4
call   16 never executed
call   17 never executed
        1:  353-block  5
        1:  353-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  353-block  7
    $$$$$:  353-block  8
    $$$$$:  353-block  9
call   21 never executed
    $$$$$:  353-block 10
    $$$$$:  353-block 11
call   22 never executed
    $$$$$:  353-block 12
    $$$$$:  353-block 13
call   23 never executed
       1*:  354:    ASSERT_NE(rightOperand, nullptr);
        1:  354-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  354-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  354-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  354-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  354-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  354-block  5
call   16 never executed
call   17 never executed
        1:  354-block  6
        1:  354-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  354-block  8
    $$$$$:  354-block  9
    $$$$$:  354-block 10
call   21 never executed
    $$$$$:  354-block 11
    $$$$$:  354-block 12
call   22 never executed
    $$$$$:  354-block 13
    $$$$$:  354-block 14
call   23 never executed
        -:  355:
       1*:  356:    EXPECT_EQ(leftOperand->getType(), NodeType::Number);
        1:  356-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  356-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  356-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  356-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  356-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  356-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  356-block  6
call   19 never executed
call   20 never executed
        1:  356-block  7
call   21 returned 1
    $$$$$:  356-block  8
    $$$$$:  356-block  9
    $$$$$:  356-block 10
call   22 never executed
    $$$$$:  356-block 11
    $$$$$:  356-block 12
call   23 never executed
    $$$$$:  356-block 13
    $$$$$:  356-block 14
call   24 never executed
       1*:  357:    EXPECT_EQ(rightOperand->getType(), NodeType::Number);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  357-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  357-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  357-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  357-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  357-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  357-block  5
call   19 never executed
call   20 never executed
        1:  357-block  6
call   21 returned 1
    $$$$$:  357-block  7
    $$$$$:  357-block  8
    $$$$$:  357-block  9
call   22 never executed
    $$$$$:  357-block 10
    $$$$$:  357-block 11
call   23 never executed
    $$$$$:  357-block 12
    $$$$$:  357-block 13
call   24 never executed
        -:  358:
       1*:  359:    const auto* leftNum = dynamic_cast<const Number*>(leftOperand);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  359-block  0
    %%%%%:  359-block  1
       1*:  360:    const auto* rightNum = dynamic_cast<const Number*>(rightOperand);
        1:  360-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  360-block  1
    %%%%%:  360-block  2
       1*:  361:    ASSERT_NE(leftNum, nullptr);
        1:  361-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  361-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  361-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  361-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  361-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  361-block  5
call   16 never executed
call   17 never executed
        1:  361-block  6
        1:  361-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  361-block  8
    $$$$$:  361-block  9
    $$$$$:  361-block 10
call   21 never executed
    $$$$$:  361-block 11
    $$$$$:  361-block 12
call   22 never executed
    $$$$$:  361-block 13
    $$$$$:  361-block 14
call   23 never executed
       1*:  362:    ASSERT_NE(rightNum, nullptr);
        1:  362-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  362-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  362-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  362-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  362-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  362-block  5
call   16 never executed
call   17 never executed
        1:  362-block  6
        1:  362-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  362-block  8
    $$$$$:  362-block  9
    $$$$$:  362-block 10
call   21 never executed
    $$$$$:  362-block 11
    $$$$$:  362-block 12
call   22 never executed
    $$$$$:  362-block 13
    $$$$$:  362-block 14
call   23 never executed
        -:  363:
       1*:  364:    EXPECT_EQ(std::get<int>(leftNum->getToken().getValue()), 1);
        1:  364-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  364-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  364-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  364-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  364-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  364-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  364-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  364-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  364-block  8
call   27 never executed
call   28 never executed
        1:  364-block  9
call   29 returned 1
    $$$$$:  364-block 10
call   30 never executed
    $$$$$:  364-block 11
call   31 never executed
    $$$$$:  364-block 12
    $$$$$:  364-block 13
    $$$$$:  364-block 14
    $$$$$:  364-block 15
call   32 never executed
    $$$$$:  364-block 16
    $$$$$:  364-block 17
call   33 never executed
    $$$$$:  364-block 18
    $$$$$:  364-block 19
call   34 never executed
       1*:  365:    EXPECT_EQ(std::get<int>(rightNum->getToken().getValue()), 2);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  365-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  365-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  365-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  365-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  365-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  365-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  365-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  365-block  7
call   27 never executed
call   28 never executed
        1:  365-block  8
call   29 returned 1
    $$$$$:  365-block  9
call   30 never executed
    $$$$$:  365-block 10
call   31 never executed
    $$$$$:  365-block 11
    $$$$$:  365-block 12
    $$$$$:  365-block 13
    $$$$$:  365-block 14
call   32 never executed
    $$$$$:  365-block 15
    $$$$$:  365-block 16
call   33 never executed
    $$$$$:  365-block 17
    $$$$$:  365-block 18
call   34 never executed
        -:  366:
        -:  367:    // Check that the binary operator is PLUS
       1*:  368:    EXPECT_EQ(trueBinOp->getOperatorNode().getToken().getType(), TokenType::PLUS);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  368-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  368-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  368-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  368-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  368-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  368-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  368-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  368-block  7
call   27 never executed
call   28 never executed
        1:  368-block  8
call   29 returned 1
    $$$$$:  368-block  9
call   30 never executed
    $$$$$:  368-block 10
call   31 never executed
    $$$$$:  368-block 11
    $$$$$:  368-block 12
    $$$$$:  368-block 13
    $$$$$:  368-block 14
    $$$$$:  368-block 15
call   32 never executed
    $$$$$:  368-block 16
    $$$$$:  368-block 17
call   33 never executed
    $$$$$:  368-block 18
    $$$$$:  368-block 19
call   34 never executed
        9:  369:}
        1:  369-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  369-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  369-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  369-block  3
call   10 returned 1
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
        1:  369-block  4
call   14 returned 1
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1:  369-block  5
call   18 returned 1
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0 (throw)
        1:  369-block  6
call   22 returned 1
call   23 returned 1
branch 24 taken 1 (fallthrough)
branch 25 taken 0 (throw)
        1:  369-block  7
        1:  369-block  8
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
call   30 returned 1
call   31 returned 1
call   32 returned 1
call   33 returned 1
branch 34 taken 1 (fallthrough)
branch 35 taken 0 (throw)
        1:  369-block  9
call   36 returned 1
call   37 returned 1
branch 38 taken 1 (fallthrough)
branch 39 taken 0 (throw)
        1:  369-block 10
call   40 returned 1
call   41 returned 1
branch 42 taken 1 (fallthrough)
branch 43 taken 0 (throw)
        1:  369-block 11
call   44 returned 1
call   45 returned 1
branch 46 taken 1 (fallthrough)
branch 47 taken 0 (throw)
        1:  369-block 12
        1:  369-block 13
call   48 returned 1
call   49 returned 1
call   50 returned 1
call   51 returned 1
call   52 returned 1
call   53 returned 1
branch 54 taken 1 (fallthrough)
branch 55 taken 0 (throw)
        1:  369-block 14
call   56 returned 1
call   57 returned 1
branch 58 taken 1 (fallthrough)
branch 59 taken 0 (throw)
        1:  369-block 15
        1:  369-block 16
call   60 returned 1
call   61 returned 1
call   62 returned 1
branch 63 taken 1 (fallthrough)
branch 64 taken 0 (throw)
        1:  369-block 17
call   65 returned 1
branch 66 taken 1 (fallthrough)
branch 67 taken 0 (throw)
        1:  369-block 18
call   68 returned 1
branch 69 taken 1 (fallthrough)
branch 70 taken 0 (throw)
        1:  369-block 19
call   71 returned 1
call   72 returned 1
branch 73 taken 1 (fallthrough)
branch 74 taken 0 (throw)
        1:  369-block 20
        1:  369-block 21
call   75 returned 1
branch 76 taken 1 (fallthrough)
branch 77 taken 0 (throw)
        1:  369-block 22
call   78 returned 1
branch 79 taken 1 (fallthrough)
branch 80 taken 0 (throw)
        1:  369-block 23
        1:  369-block 24
call   81 returned 1
        2:  369-block 25
branch 82 taken 1 (fallthrough)
branch 83 taken 1
        1:  369-block 26
call   84 returned 1
call   85 returned 1
branch 86 taken 1 (fallthrough)
branch 87 taken 0 (throw)
        1:  369-block 27
call   88 returned 1
branch 89 taken 1 (fallthrough)
branch 90 taken 0
        1:  369-block 28
        1:  369-block 29
call   91 returned 1
branch 92 taken 1 (fallthrough)
branch 93 taken 0
        1:  369-block 30
        1:  369-block 31
call   94 returned 1
branch 95 taken 1 (fallthrough)
branch 96 taken 0
        1:  369-block 32
        1:  369-block 33
call   97 returned 1
branch 98 taken 1 (fallthrough)
branch 99 taken 0
        1:  369-block 34
        1:  369-block 35
call   100 returned 1
branch 101 taken 1 (fallthrough)
branch 102 taken 0
        1:  369-block 36
        1:  369-block 37
call   103 returned 1
branch 104 taken 1 (fallthrough)
branch 105 taken 0
    $$$$$:  369-block 38
call   106 never executed
    $$$$$:  369-block 39
    $$$$$:  369-block 40
    $$$$$:  369-block 41
call   107 never executed
    $$$$$:  369-block 42
    $$$$$:  369-block 43
    $$$$$:  369-block 44
call   108 never executed
    $$$$$:  369-block 45
    $$$$$:  369-block 46
    $$$$$:  369-block 47
call   109 never executed
    $$$$$:  369-block 48
    $$$$$:  369-block 49
call   110 never executed
    $$$$$:  369-block 50
    $$$$$:  369-block 51
    $$$$$:  369-block 52
call   111 never executed
    $$$$$:  369-block 53
    $$$$$:  369-block 54
branch 112 never executed (fallthrough)
branch 113 never executed
    $$$$$:  369-block 55
    $$$$$:  369-block 56
branch 114 never executed (fallthrough)
branch 115 never executed
    $$$$$:  369-block 57
call   116 never executed
    $$$$$:  369-block 58
call   117 never executed
    $$$$$:  369-block 59
    $$$$$:  369-block 60
    $$$$$:  369-block 61
call   118 never executed
    $$$$$:  369-block 62
    $$$$$:  369-block 63
call   119 never executed
    $$$$$:  369-block 64
    $$$$$:  369-block 65
    $$$$$:  369-block 66
call   120 never executed
    $$$$$:  369-block 67
    $$$$$:  369-block 68
branch 121 never executed (fallthrough)
branch 122 never executed
    $$$$$:  369-block 69
    $$$$$:  369-block 70
branch 123 never executed (fallthrough)
branch 124 never executed
    $$$$$:  369-block 71
call   125 never executed
    $$$$$:  369-block 72
call   126 never executed
    $$$$$:  369-block 73
    $$$$$:  369-block 74
    $$$$$:  369-block 75
call   127 never executed
    $$$$$:  369-block 76
    $$$$$:  369-block 77
    $$$$$:  369-block 78
branch 128 never executed (fallthrough)
branch 129 never executed
    $$$$$:  369-block 79
    $$$$$:  369-block 80
branch 130 never executed (fallthrough)
branch 131 never executed
    $$$$$:  369-block 81
call   132 never executed
    $$$$$:  369-block 82
call   133 never executed
    $$$$$:  369-block 83
    $$$$$:  369-block 84
branch 134 never executed (fallthrough)
branch 135 never executed
    $$$$$:  369-block 85
call   136 never executed
    $$$$$:  369-block 86
    $$$$$:  369-block 87
    $$$$$:  369-block 88
branch 137 never executed (fallthrough)
branch 138 never executed
    $$$$$:  369-block 89
    $$$$$:  369-block 90
branch 139 never executed (fallthrough)
branch 140 never executed
    $$$$$:  369-block 91
call   141 never executed
    $$$$$:  369-block 92
    $$$$$:  369-block 93
    $$$$$:  369-block 94
branch 142 never executed (fallthrough)
branch 143 never executed
    $$$$$:  369-block 95
    $$$$$:  369-block 96
branch 144 never executed (fallthrough)
branch 145 never executed
    $$$$$:  369-block 97
call   146 never executed
    $$$$$:  369-block 98
call   147 never executed
    $$$$$:  369-block 99
call   148 never executed
    $$$$$:  369-block 100
call   149 never executed
    $$$$$:  369-block 101
call   150 never executed
    $$$$$:  369-block 102
call   151 never executed
    $$$$$:  369-block 103
call   152 never executed
------------------
        -:  370:
        4:  371:TEST(ParserTest, ParsesForSatement) {
        -:  372:    std::vector<Token> tokenLine1 = {
        -:  373:        Token(TokenType::KEYWORD, dummyPos, "for"),
        -:  374:        Token(TokenType::OPENPAREN, dummyPos),
        -:  375:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:  376:        Token(TokenType::IDENTIFIER, dummyPos, "x"),
        -:  377:        Token(TokenType::EQUALS, dummyPos),
    #####:  378:        Token(TokenType::INT, dummyPos, 0),
        -:  379:        Token(TokenType::SEPERATOR, dummyPos),
        -:  380:        Token(TokenType::IDENTIFIER, dummyPos, "x"),
        -:  381:        Token(TokenType::LESSTHAN, dummyPos),
    #####:  382:        Token(TokenType::INT, dummyPos, 10),
        -:  383:        Token(TokenType::SEPERATOR, dummyPos),
        -:  384:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:  385:        Token(TokenType::IDENTIFIER, dummyPos, "x"),
        -:  386:        Token(TokenType::INCREMENT, dummyPos),
        -:  387:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:  388:        Token(TokenType::OPENBRACE, dummyPos),
        -:  389:        Token(TokenType::EOL, dummyPos)
       19:  390:    };
        -:  391:    std::vector<Token> tokenLine2 = {
    #####:  392:        Token(TokenType::INT, dummyPos, 1),
        -:  393:        Token(TokenType::PLUS, dummyPos),
    #####:  394:        Token(TokenType::INT, dummyPos, 2),
        -:  395:        Token(TokenType::EOL, dummyPos)
        6:  396:    };
        -:  397:    std::vector<Token> tokenLine3 = {
        -:  398:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  399:        Token(TokenType::EOL, dummyPos)
        4:  400:    };
        -:  401:    const std::map<int, std::vector<Token>> tokenMap =
        -:  402:        {
    #####:  403:        {0, tokenLine1},
    #####:  404:        {1, tokenLine2},
    #####:  405:        {2, tokenLine3},
    #####:  406:        {6, {Token(TokenType::EOF_, dummyPos)} }
        7:  407:        };
        -:  408:
        1:  409:    Parser parser(tokenMap);
        -:  410:    // Act: Parse the tokens
        1:  411:    const std::unique_ptr<Node> node = parser.parse();
        -:  412:
        -:  413:    // Assert: Check the returned Node
       1*:  414:    ASSERT_NE(node, nullptr);
       1*:  415:    EXPECT_EQ(node->getType(), NodeType::ForStmt);
        -:  416:
       1*:  417:    auto* whileStatement = dynamic_cast<ForStmt*>(node.get());
       1*:  418:    ASSERT_NE(whileStatement, nullptr);
        -:  419:
        -:  420:    // Check the condition node
        1:  421:    const Node* varDeclare = whileStatement->getVarDeclare().get();
       1*:  422:    ASSERT_NE(varDeclare, nullptr);
       1*:  423:    EXPECT_EQ(varDeclare->getType(), NodeType::VarAssgnment);
       1*:  424:    const auto* varAssignNode = dynamic_cast<const VarAssignment*>(varDeclare);
       1*:  425:    ASSERT_NE(varAssignNode, nullptr);
       1*:  426:    EXPECT_EQ(std::get<std::string>(varAssignNode->getToken().getValue()), "x");
       1*:  427:    EXPECT_EQ(varAssignNode->getValue()->getType(), NodeType::Number);
        -:  428:
        -:  429:    // Check the true branch (then block)
        1:  430:    const auto& loopBody = whileStatement->getForBlock();
       1*:  431:    ASSERT_EQ(loopBody.size(), 1);  // One expression inside the true block
        -:  432:
        1:  433:    const Node* trueExpr = loopBody.at(0).get();
       1*:  434:    ASSERT_NE(trueExpr, nullptr);
       1*:  435:    EXPECT_EQ(trueExpr->getType(), NodeType::BinaryOperator);
        -:  436:
       1*:  437:    const auto* trueBinOp = dynamic_cast<const BinaryOperator*>(trueExpr);
       1*:  438:    ASSERT_NE(trueBinOp, nullptr);
        1:  439:    const Node* leftOperand = trueBinOp->getLeftNode().get();
        1:  440:    const Node* rightOperand = trueBinOp->getRightNode().get();
       1*:  441:    ASSERT_NE(leftOperand, nullptr);
       1*:  442:    ASSERT_NE(rightOperand, nullptr);
        -:  443:
       1*:  444:    EXPECT_EQ(leftOperand->getType(), NodeType::Number);
       1*:  445:    EXPECT_EQ(rightOperand->getType(), NodeType::Number);
        -:  446:
       1*:  447:    const auto* leftNum = dynamic_cast<const Number*>(leftOperand);
       1*:  448:    const auto* rightNum = dynamic_cast<const Number*>(rightOperand);
       1*:  449:    ASSERT_NE(leftNum, nullptr);
       1*:  450:    ASSERT_NE(rightNum, nullptr);
        -:  451:
       1*:  452:    EXPECT_EQ(std::get<int>(leftNum->getToken().getValue()), 1);
       1*:  453:    EXPECT_EQ(std::get<int>(rightNum->getToken().getValue()), 2);
        -:  454:
        -:  455:    // Check that the binary operator is PLUS
       1*:  456:    EXPECT_EQ(trueBinOp->getOperatorNode().getToken().getType(), TokenType::PLUS);
        9:  457:}
------------------
_ZN33ParserTest_ParsesForSatement_TestC1Ev:
function _ZN33ParserTest_ParsesForSatement_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  371:TEST(ParserTest, ParsesForSatement) {
        1:  371-block  0
call    0 returned 1
------------------
_ZN33ParserTest_ParsesForSatement_TestD0Ev:
function _ZN33ParserTest_ParsesForSatement_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  371:TEST(ParserTest, ParsesForSatement) {
        1:  371-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN33ParserTest_ParsesForSatement_TestD1Ev:
function _ZN33ParserTest_ParsesForSatement_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  371:TEST(ParserTest, ParsesForSatement) {
        1:  371-block  0
call    0 returned 1
------------------
_ZN33ParserTest_ParsesForSatement_Test8TestBodyEv:
function _ZN33ParserTest_ParsesForSatement_Test8TestBodyEv called 1 returned 100% blocks executed 34%
        1:  371:TEST(ParserTest, ParsesForSatement) {
        -:  372:    std::vector<Token> tokenLine1 = {
        -:  373:        Token(TokenType::KEYWORD, dummyPos, "for"),
        -:  374:        Token(TokenType::OPENPAREN, dummyPos),
        -:  375:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:  376:        Token(TokenType::IDENTIFIER, dummyPos, "x"),
        -:  377:        Token(TokenType::EQUALS, dummyPos),
    #####:  378:        Token(TokenType::INT, dummyPos, 0),
    $$$$$:  378-block  0
        -:  379:        Token(TokenType::SEPERATOR, dummyPos),
        -:  380:        Token(TokenType::IDENTIFIER, dummyPos, "x"),
        -:  381:        Token(TokenType::LESSTHAN, dummyPos),
    #####:  382:        Token(TokenType::INT, dummyPos, 10),
    $$$$$:  382-block  0
        -:  383:        Token(TokenType::SEPERATOR, dummyPos),
        -:  384:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:  385:        Token(TokenType::IDENTIFIER, dummyPos, "x"),
        -:  386:        Token(TokenType::INCREMENT, dummyPos),
        -:  387:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:  388:        Token(TokenType::OPENBRACE, dummyPos),
        -:  389:        Token(TokenType::EOL, dummyPos)
       19:  390:    };
        1:  390-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       18:  390-block  1
branch  3 taken 17 (fallthrough)
branch  4 taken 1
       17:  390-block  2
call    5 returned 17
    $$$$$:  390-block  3
    $$$$$:  390-block  4
    $$$$$:  390-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  390-block  6
call    8 never executed
    $$$$$:  390-block  7
        -:  391:    std::vector<Token> tokenLine2 = {
    #####:  392:        Token(TokenType::INT, dummyPos, 1),
    $$$$$:  392-block  0
        -:  393:        Token(TokenType::PLUS, dummyPos),
    #####:  394:        Token(TokenType::INT, dummyPos, 2),
    $$$$$:  394-block  0
        -:  395:        Token(TokenType::EOL, dummyPos)
        6:  396:    };
        1:  396-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  396-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  396-block  2
call    5 returned 4
    $$$$$:  396-block  3
    $$$$$:  396-block  4
    $$$$$:  396-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  396-block  6
call    8 never executed
    $$$$$:  396-block  7
        -:  397:    std::vector<Token> tokenLine3 = {
        -:  398:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  399:        Token(TokenType::EOL, dummyPos)
        4:  400:    };
        1:  400-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:  400-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:  400-block  2
call    5 returned 2
    $$$$$:  400-block  3
    $$$$$:  400-block  4
    $$$$$:  400-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  400-block  6
call    8 never executed
    $$$$$:  400-block  7
        -:  401:    const std::map<int, std::vector<Token>> tokenMap =
        -:  402:        {
    #####:  403:        {0, tokenLine1},
    $$$$$:  403-block  0
    #####:  404:        {1, tokenLine2},
    $$$$$:  404-block  0
    #####:  405:        {2, tokenLine3},
    $$$$$:  405-block  0
    #####:  406:        {6, {Token(TokenType::EOF_, dummyPos)} }
    $$$$$:  406-block  0
        7:  407:        };
        1:  407-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  407-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  407-block  2
call    5 returned 4
        1:  407-block  3
call    6 returned 1
    $$$$$:  407-block  4
    $$$$$:  407-block  5
    $$$$$:  407-block  6
    $$$$$:  407-block  7
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$:  407-block  8
call    9 never executed
    $$$$$:  407-block  9
    $$$$$:  407-block 10
call   10 never executed
    $$$$$:  407-block 11
        -:  408:
        1:  409:    Parser parser(tokenMap);
        1:  409-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  409-block  1
call    3 returned 1
    $$$$$:  409-block  2
call    4 never executed
    $$$$$:  409-block  3
        -:  410:    // Act: Parse the tokens
        1:  411:    const std::unique_ptr<Node> node = parser.parse();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  412:
        -:  413:    // Assert: Check the returned Node
       1*:  414:    ASSERT_NE(node, nullptr);
        1:  414-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  414-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  414-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  414-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  414-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  414-block  5
call   16 never executed
call   17 never executed
        1:  414-block  6
        1:  414-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  414-block  8
    $$$$$:  414-block  9
    $$$$$:  414-block 10
call   21 never executed
    $$$$$:  414-block 11
    $$$$$:  414-block 12
call   22 never executed
    $$$$$:  414-block 13
    $$$$$:  414-block 14
call   23 never executed
       1*:  415:    EXPECT_EQ(node->getType(), NodeType::ForStmt);
        1:  415-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  415-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  415-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:  415-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  415-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  415-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  415-block  6
call   20 never executed
call   21 never executed
        1:  415-block  7
call   22 returned 1
    $$$$$:  415-block  8
    $$$$$:  415-block  9
    $$$$$:  415-block 10
call   23 never executed
    $$$$$:  415-block 11
    $$$$$:  415-block 12
call   24 never executed
    $$$$$:  415-block 13
    $$$$$:  415-block 14
call   25 never executed
        -:  416:
       1*:  417:    auto* whileStatement = dynamic_cast<ForStmt*>(node.get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  417-block  0
    %%%%%:  417-block  1
       1*:  418:    ASSERT_NE(whileStatement, nullptr);
        1:  418-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  418-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  418-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  418-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  418-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  418-block  5
call   16 never executed
call   17 never executed
        1:  418-block  6
        1:  418-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  418-block  8
    $$$$$:  418-block  9
    $$$$$:  418-block 10
call   21 never executed
    $$$$$:  418-block 11
    $$$$$:  418-block 12
call   22 never executed
    $$$$$:  418-block 13
    $$$$$:  418-block 14
call   23 never executed
        -:  419:
        -:  420:    // Check the condition node
        1:  421:    const Node* varDeclare = whileStatement->getVarDeclare().get();
        1:  421-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  421-block  1
call    3 returned 1
       1*:  422:    ASSERT_NE(varDeclare, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  422-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  422-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  422-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  422-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  422-block  4
call   16 never executed
call   17 never executed
        1:  422-block  5
        1:  422-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  422-block  7
    $$$$$:  422-block  8
    $$$$$:  422-block  9
call   21 never executed
    $$$$$:  422-block 10
    $$$$$:  422-block 11
call   22 never executed
    $$$$$:  422-block 12
    $$$$$:  422-block 13
call   23 never executed
       1*:  423:    EXPECT_EQ(varDeclare->getType(), NodeType::VarAssgnment);
        1:  423-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  423-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  423-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  423-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  423-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  423-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  423-block  6
call   19 never executed
call   20 never executed
        1:  423-block  7
call   21 returned 1
    $$$$$:  423-block  8
    $$$$$:  423-block  9
    $$$$$:  423-block 10
call   22 never executed
    $$$$$:  423-block 11
    $$$$$:  423-block 12
call   23 never executed
    $$$$$:  423-block 13
    $$$$$:  423-block 14
call   24 never executed
       1*:  424:    const auto* varAssignNode = dynamic_cast<const VarAssignment*>(varDeclare);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  424-block  0
    %%%%%:  424-block  1
       1*:  425:    ASSERT_NE(varAssignNode, nullptr);
        1:  425-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  425-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  425-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  425-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  425-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  425-block  5
call   16 never executed
call   17 never executed
        1:  425-block  6
        1:  425-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  425-block  8
    $$$$$:  425-block  9
    $$$$$:  425-block 10
call   21 never executed
    $$$$$:  425-block 11
    $$$$$:  425-block 12
call   22 never executed
    $$$$$:  425-block 13
    $$$$$:  425-block 14
call   23 never executed
       1*:  426:    EXPECT_EQ(std::get<std::string>(varAssignNode->getToken().getValue()), "x");
        1:  426-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  426-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  426-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  426-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  426-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  426-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  426-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  426-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  426-block  8
call   27 never executed
call   28 never executed
        1:  426-block  9
call   29 returned 1
    $$$$$:  426-block 10
call   30 never executed
    $$$$$:  426-block 11
call   31 never executed
    $$$$$:  426-block 12
    $$$$$:  426-block 13
    $$$$$:  426-block 14
call   32 never executed
    $$$$$:  426-block 15
    $$$$$:  426-block 16
call   33 never executed
    $$$$$:  426-block 17
    $$$$$:  426-block 18
call   34 never executed
       1*:  427:    EXPECT_EQ(varAssignNode->getValue()->getType(), NodeType::Number);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  427-block  0
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  427-block  1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  427-block  2
call   10 returned 1
branch 11 taken 0 (fallthrough)
branch 12 taken 1
    %%%%%:  427-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  427-block  4
call   16 never executed
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  427-block  5
call   20 never executed
branch 21 never executed (fallthrough)
branch 22 never executed (throw)
    %%%%%:  427-block  6
call   23 never executed
call   24 never executed
        1:  427-block  7
call   25 returned 1
    $$$$$:  427-block  8
    $$$$$:  427-block  9
    $$$$$:  427-block 10
call   26 never executed
    $$$$$:  427-block 11
    $$$$$:  427-block 12
call   27 never executed
    $$$$$:  427-block 13
    $$$$$:  427-block 14
call   28 never executed
        -:  428:
        -:  429:    // Check the true branch (then block)
        1:  430:    const auto& loopBody = whileStatement->getForBlock();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  431:    ASSERT_EQ(loopBody.size(), 1);  // One expression inside the true block
        1:  431-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  431-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  431-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  431-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  431-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  431-block  5
call   17 never executed
call   18 never executed
        1:  431-block  6
        1:  431-block  7
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0
        1:  431-block  8
    $$$$$:  431-block  9
    $$$$$:  431-block 10
    $$$$$:  431-block 11
call   22 never executed
    $$$$$:  431-block 12
    $$$$$:  431-block 13
call   23 never executed
    $$$$$:  431-block 14
    $$$$$:  431-block 15
call   24 never executed
        -:  432:
        1:  433:    const Node* trueExpr = loopBody.at(0).get();
        1:  433-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  433-block  1
call    3 returned 1
       1*:  434:    ASSERT_NE(trueExpr, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  434-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  434-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  434-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  434-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  434-block  4
call   16 never executed
call   17 never executed
        1:  434-block  5
        1:  434-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  434-block  7
    $$$$$:  434-block  8
    $$$$$:  434-block  9
call   21 never executed
    $$$$$:  434-block 10
    $$$$$:  434-block 11
call   22 never executed
    $$$$$:  434-block 12
    $$$$$:  434-block 13
call   23 never executed
       1*:  435:    EXPECT_EQ(trueExpr->getType(), NodeType::BinaryOperator);
        1:  435-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  435-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  435-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  435-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  435-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  435-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  435-block  6
call   19 never executed
call   20 never executed
        1:  435-block  7
call   21 returned 1
    $$$$$:  435-block  8
    $$$$$:  435-block  9
    $$$$$:  435-block 10
call   22 never executed
    $$$$$:  435-block 11
    $$$$$:  435-block 12
call   23 never executed
    $$$$$:  435-block 13
    $$$$$:  435-block 14
call   24 never executed
        -:  436:
       1*:  437:    const auto* trueBinOp = dynamic_cast<const BinaryOperator*>(trueExpr);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  437-block  0
    %%%%%:  437-block  1
       1*:  438:    ASSERT_NE(trueBinOp, nullptr);
        1:  438-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  438-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  438-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  438-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  438-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  438-block  5
call   16 never executed
call   17 never executed
        1:  438-block  6
        1:  438-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  438-block  8
    $$$$$:  438-block  9
    $$$$$:  438-block 10
call   21 never executed
    $$$$$:  438-block 11
    $$$$$:  438-block 12
call   22 never executed
    $$$$$:  438-block 13
    $$$$$:  438-block 14
call   23 never executed
        1:  439:    const Node* leftOperand = trueBinOp->getLeftNode().get();
        1:  439-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  439-block  1
call    3 returned 1
        1:  440:    const Node* rightOperand = trueBinOp->getRightNode().get();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  440-block  0
call    3 returned 1
       1*:  441:    ASSERT_NE(leftOperand, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  441-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  441-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  441-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  441-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  441-block  4
call   16 never executed
call   17 never executed
        1:  441-block  5
        1:  441-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  441-block  7
    $$$$$:  441-block  8
    $$$$$:  441-block  9
call   21 never executed
    $$$$$:  441-block 10
    $$$$$:  441-block 11
call   22 never executed
    $$$$$:  441-block 12
    $$$$$:  441-block 13
call   23 never executed
       1*:  442:    ASSERT_NE(rightOperand, nullptr);
        1:  442-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  442-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  442-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  442-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  442-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  442-block  5
call   16 never executed
call   17 never executed
        1:  442-block  6
        1:  442-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  442-block  8
    $$$$$:  442-block  9
    $$$$$:  442-block 10
call   21 never executed
    $$$$$:  442-block 11
    $$$$$:  442-block 12
call   22 never executed
    $$$$$:  442-block 13
    $$$$$:  442-block 14
call   23 never executed
        -:  443:
       1*:  444:    EXPECT_EQ(leftOperand->getType(), NodeType::Number);
        1:  444-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  444-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  444-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  444-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  444-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  444-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  444-block  6
call   19 never executed
call   20 never executed
        1:  444-block  7
call   21 returned 1
    $$$$$:  444-block  8
    $$$$$:  444-block  9
    $$$$$:  444-block 10
call   22 never executed
    $$$$$:  444-block 11
    $$$$$:  444-block 12
call   23 never executed
    $$$$$:  444-block 13
    $$$$$:  444-block 14
call   24 never executed
       1*:  445:    EXPECT_EQ(rightOperand->getType(), NodeType::Number);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  445-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  445-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  445-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  445-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  445-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  445-block  5
call   19 never executed
call   20 never executed
        1:  445-block  6
call   21 returned 1
    $$$$$:  445-block  7
    $$$$$:  445-block  8
    $$$$$:  445-block  9
call   22 never executed
    $$$$$:  445-block 10
    $$$$$:  445-block 11
call   23 never executed
    $$$$$:  445-block 12
    $$$$$:  445-block 13
call   24 never executed
        -:  446:
       1*:  447:    const auto* leftNum = dynamic_cast<const Number*>(leftOperand);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  447-block  0
    %%%%%:  447-block  1
       1*:  448:    const auto* rightNum = dynamic_cast<const Number*>(rightOperand);
        1:  448-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  448-block  1
    %%%%%:  448-block  2
       1*:  449:    ASSERT_NE(leftNum, nullptr);
        1:  449-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  449-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  449-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  449-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  449-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  449-block  5
call   16 never executed
call   17 never executed
        1:  449-block  6
        1:  449-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  449-block  8
    $$$$$:  449-block  9
    $$$$$:  449-block 10
call   21 never executed
    $$$$$:  449-block 11
    $$$$$:  449-block 12
call   22 never executed
    $$$$$:  449-block 13
    $$$$$:  449-block 14
call   23 never executed
       1*:  450:    ASSERT_NE(rightNum, nullptr);
        1:  450-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  450-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  450-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  450-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  450-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  450-block  5
call   16 never executed
call   17 never executed
        1:  450-block  6
        1:  450-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  450-block  8
    $$$$$:  450-block  9
    $$$$$:  450-block 10
call   21 never executed
    $$$$$:  450-block 11
    $$$$$:  450-block 12
call   22 never executed
    $$$$$:  450-block 13
    $$$$$:  450-block 14
call   23 never executed
        -:  451:
       1*:  452:    EXPECT_EQ(std::get<int>(leftNum->getToken().getValue()), 1);
        1:  452-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  452-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  452-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  452-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  452-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  452-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  452-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  452-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  452-block  8
call   27 never executed
call   28 never executed
        1:  452-block  9
call   29 returned 1
    $$$$$:  452-block 10
call   30 never executed
    $$$$$:  452-block 11
call   31 never executed
    $$$$$:  452-block 12
    $$$$$:  452-block 13
    $$$$$:  452-block 14
    $$$$$:  452-block 15
call   32 never executed
    $$$$$:  452-block 16
    $$$$$:  452-block 17
call   33 never executed
    $$$$$:  452-block 18
    $$$$$:  452-block 19
call   34 never executed
       1*:  453:    EXPECT_EQ(std::get<int>(rightNum->getToken().getValue()), 2);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  453-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  453-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  453-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  453-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  453-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  453-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  453-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  453-block  7
call   27 never executed
call   28 never executed
        1:  453-block  8
call   29 returned 1
    $$$$$:  453-block  9
call   30 never executed
    $$$$$:  453-block 10
call   31 never executed
    $$$$$:  453-block 11
    $$$$$:  453-block 12
    $$$$$:  453-block 13
    $$$$$:  453-block 14
call   32 never executed
    $$$$$:  453-block 15
    $$$$$:  453-block 16
call   33 never executed
    $$$$$:  453-block 17
    $$$$$:  453-block 18
call   34 never executed
        -:  454:
        -:  455:    // Check that the binary operator is PLUS
       1*:  456:    EXPECT_EQ(trueBinOp->getOperatorNode().getToken().getType(), TokenType::PLUS);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  456-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  456-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  456-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  456-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  456-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  456-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  456-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  456-block  7
call   27 never executed
call   28 never executed
        1:  456-block  8
call   29 returned 1
    $$$$$:  456-block  9
call   30 never executed
    $$$$$:  456-block 10
call   31 never executed
    $$$$$:  456-block 11
    $$$$$:  456-block 12
    $$$$$:  456-block 13
    $$$$$:  456-block 14
    $$$$$:  456-block 15
call   32 never executed
    $$$$$:  456-block 16
    $$$$$:  456-block 17
call   33 never executed
    $$$$$:  456-block 18
    $$$$$:  456-block 19
call   34 never executed
        9:  457:}
        1:  457-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  457-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  457-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  457-block  3
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1:  457-block  4
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:  457-block  5
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
        1:  457-block  6
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0 (throw)
        1:  457-block  7
call   22 returned 1
call   23 returned 1
branch 24 taken 1 (fallthrough)
branch 25 taken 0 (throw)
        1:  457-block  8
call   26 returned 1
call   27 returned 1
branch 28 taken 1 (fallthrough)
branch 29 taken 0 (throw)
        1:  457-block  9
call   30 returned 1
call   31 returned 1
branch 32 taken 1 (fallthrough)
branch 33 taken 0 (throw)
        1:  457-block 10
call   34 returned 1
branch 35 taken 1 (fallthrough)
branch 36 taken 0 (throw)
        1:  457-block 11
call   37 returned 1
branch 38 taken 1 (fallthrough)
branch 39 taken 0 (throw)
        1:  457-block 12
call   40 returned 1
call   41 returned 1
branch 42 taken 1 (fallthrough)
branch 43 taken 0 (throw)
        1:  457-block 13
call   44 returned 1
call   45 returned 1
branch 46 taken 1 (fallthrough)
branch 47 taken 0 (throw)
        1:  457-block 14
call   48 returned 1
call   49 returned 1
branch 50 taken 1 (fallthrough)
branch 51 taken 0 (throw)
        1:  457-block 15
call   52 returned 1
branch 53 taken 1 (fallthrough)
branch 54 taken 0 (throw)
        1:  457-block 16
call   55 returned 1
branch 56 taken 1 (fallthrough)
branch 57 taken 0 (throw)
        1:  457-block 17
call   58 returned 1
branch 59 taken 1 (fallthrough)
branch 60 taken 0 (throw)
        1:  457-block 18
call   61 returned 1
branch 62 taken 1 (fallthrough)
branch 63 taken 0 (throw)
        1:  457-block 19
call   64 returned 1
call   65 returned 1
branch 66 taken 1 (fallthrough)
branch 67 taken 0 (throw)
        1:  457-block 20
call   68 returned 1
call   69 returned 1
branch 70 taken 1 (fallthrough)
branch 71 taken 0 (throw)
        1:  457-block 21
call   72 returned 1
call   73 returned 1
branch 74 taken 1 (fallthrough)
branch 75 taken 0 (throw)
        1:  457-block 22
call   76 returned 1
call   77 returned 1
branch 78 taken 1 (fallthrough)
branch 79 taken 0 (throw)
        1:  457-block 23
        1:  457-block 24
call   80 returned 1
call   81 returned 1
call   82 returned 1
call   83 returned 1
call   84 returned 1
call   85 returned 1
call   86 returned 1
call   87 returned 1
call   88 returned 1
call   89 returned 1
call   90 returned 1
call   91 returned 1
call   92 returned 1
call   93 returned 1
call   94 returned 1
call   95 returned 1
call   96 returned 1
call   97 returned 1
call   98 returned 1
branch 99 taken 1 (fallthrough)
branch 100 taken 0 (throw)
        1:  457-block 25
call   101 returned 1
call   102 returned 1
branch 103 taken 1 (fallthrough)
branch 104 taken 0 (throw)
        1:  457-block 26
call   105 returned 1
call   106 returned 1
branch 107 taken 1 (fallthrough)
branch 108 taken 0 (throw)
        1:  457-block 27
call   109 returned 1
call   110 returned 1
branch 111 taken 1 (fallthrough)
branch 112 taken 0 (throw)
        1:  457-block 28
        1:  457-block 29
call   113 returned 1
call   114 returned 1
call   115 returned 1
call   116 returned 1
call   117 returned 1
call   118 returned 1
branch 119 taken 1 (fallthrough)
branch 120 taken 0 (throw)
        1:  457-block 30
call   121 returned 1
call   122 returned 1
branch 123 taken 1 (fallthrough)
branch 124 taken 0 (throw)
        1:  457-block 31
        1:  457-block 32
call   125 returned 1
call   126 returned 1
call   127 returned 1
branch 128 taken 1 (fallthrough)
branch 129 taken 0 (throw)
        1:  457-block 33
call   130 returned 1
branch 131 taken 1 (fallthrough)
branch 132 taken 0 (throw)
        1:  457-block 34
call   133 returned 1
branch 134 taken 1 (fallthrough)
branch 135 taken 0 (throw)
        1:  457-block 35
call   136 returned 1
call   137 returned 1
branch 138 taken 1 (fallthrough)
branch 139 taken 0 (throw)
        1:  457-block 36
        1:  457-block 37
call   140 returned 1
branch 141 taken 1 (fallthrough)
branch 142 taken 0 (throw)
        1:  457-block 38
call   143 returned 1
branch 144 taken 1 (fallthrough)
branch 145 taken 0 (throw)
        1:  457-block 39
        1:  457-block 40
call   146 returned 1
        2:  457-block 41
branch 147 taken 1 (fallthrough)
branch 148 taken 1
        1:  457-block 42
call   149 returned 1
call   150 returned 1
branch 151 taken 1 (fallthrough)
branch 152 taken 0 (throw)
        1:  457-block 43
call   153 returned 1
branch 154 taken 1 (fallthrough)
branch 155 taken 0
        1:  457-block 44
        1:  457-block 45
call   156 returned 1
branch 157 taken 1 (fallthrough)
branch 158 taken 0
        1:  457-block 46
        1:  457-block 47
call   159 returned 1
branch 160 taken 1 (fallthrough)
branch 161 taken 0
        1:  457-block 48
        1:  457-block 49
call   162 returned 1
branch 163 taken 1 (fallthrough)
branch 164 taken 0
        1:  457-block 50
        1:  457-block 51
call   165 returned 1
branch 166 taken 1 (fallthrough)
branch 167 taken 0
        1:  457-block 52
        1:  457-block 53
call   168 returned 1
branch 169 taken 1 (fallthrough)
branch 170 taken 0
    $$$$$:  457-block 54
call   171 never executed
    $$$$$:  457-block 55
    $$$$$:  457-block 56
    $$$$$:  457-block 57
call   172 never executed
    $$$$$:  457-block 58
    $$$$$:  457-block 59
    $$$$$:  457-block 60
call   173 never executed
    $$$$$:  457-block 61
    $$$$$:  457-block 62
    $$$$$:  457-block 63
call   174 never executed
    $$$$$:  457-block 64
    $$$$$:  457-block 65
    $$$$$:  457-block 66
call   175 never executed
    $$$$$:  457-block 67
    $$$$$:  457-block 68
call   176 never executed
    $$$$$:  457-block 69
    $$$$$:  457-block 70
call   177 never executed
    $$$$$:  457-block 71
    $$$$$:  457-block 72
    $$$$$:  457-block 73
call   178 never executed
    $$$$$:  457-block 74
    $$$$$:  457-block 75
call   179 never executed
    $$$$$:  457-block 76
    $$$$$:  457-block 77
    $$$$$:  457-block 78
call   180 never executed
    $$$$$:  457-block 79
    $$$$$:  457-block 80
call   181 never executed
    $$$$$:  457-block 81
    $$$$$:  457-block 82
    $$$$$:  457-block 83
call   182 never executed
    $$$$$:  457-block 84
    $$$$$:  457-block 85
call   183 never executed
    $$$$$:  457-block 86
    $$$$$:  457-block 87
    $$$$$:  457-block 88
call   184 never executed
    $$$$$:  457-block 89
    $$$$$:  457-block 90
call   185 never executed
    $$$$$:  457-block 91
    $$$$$:  457-block 92
call   186 never executed
    $$$$$:  457-block 93
    $$$$$:  457-block 94
    $$$$$:  457-block 95
call   187 never executed
    $$$$$:  457-block 96
    $$$$$:  457-block 97
branch 188 never executed (fallthrough)
branch 189 never executed
    $$$$$:  457-block 98
    $$$$$:  457-block 99
branch 190 never executed (fallthrough)
branch 191 never executed
    $$$$$:  457-block 100
call   192 never executed
    $$$$$:  457-block 101
call   193 never executed
    $$$$$:  457-block 102
    $$$$$:  457-block 103
    $$$$$:  457-block 104
call   194 never executed
    $$$$$:  457-block 105
    $$$$$:  457-block 106
call   195 never executed
    $$$$$:  457-block 107
    $$$$$:  457-block 108
    $$$$$:  457-block 109
call   196 never executed
    $$$$$:  457-block 110
    $$$$$:  457-block 111
branch 197 never executed (fallthrough)
branch 198 never executed
    $$$$$:  457-block 112
    $$$$$:  457-block 113
branch 199 never executed (fallthrough)
branch 200 never executed
    $$$$$:  457-block 114
call   201 never executed
    $$$$$:  457-block 115
call   202 never executed
    $$$$$:  457-block 116
    $$$$$:  457-block 117
    $$$$$:  457-block 118
call   203 never executed
    $$$$$:  457-block 119
    $$$$$:  457-block 120
    $$$$$:  457-block 121
branch 204 never executed (fallthrough)
branch 205 never executed
    $$$$$:  457-block 122
    $$$$$:  457-block 123
branch 206 never executed (fallthrough)
branch 207 never executed
    $$$$$:  457-block 124
call   208 never executed
    $$$$$:  457-block 125
call   209 never executed
    $$$$$:  457-block 126
    $$$$$:  457-block 127
branch 210 never executed (fallthrough)
branch 211 never executed
    $$$$$:  457-block 128
call   212 never executed
    $$$$$:  457-block 129
    $$$$$:  457-block 130
    $$$$$:  457-block 131
branch 213 never executed (fallthrough)
branch 214 never executed
    $$$$$:  457-block 132
    $$$$$:  457-block 133
branch 215 never executed (fallthrough)
branch 216 never executed
    $$$$$:  457-block 134
call   217 never executed
    $$$$$:  457-block 135
    $$$$$:  457-block 136
    $$$$$:  457-block 137
branch 218 never executed (fallthrough)
branch 219 never executed
    $$$$$:  457-block 138
    $$$$$:  457-block 139
branch 220 never executed (fallthrough)
branch 221 never executed
    $$$$$:  457-block 140
call   222 never executed
    $$$$$:  457-block 141
call   223 never executed
    $$$$$:  457-block 142
call   224 never executed
    $$$$$:  457-block 143
call   225 never executed
    $$$$$:  457-block 144
call   226 never executed
    $$$$$:  457-block 145
call   227 never executed
    $$$$$:  457-block 146
call   228 never executed
------------------
        -:  458:
        -:  459:
        -:  460:
