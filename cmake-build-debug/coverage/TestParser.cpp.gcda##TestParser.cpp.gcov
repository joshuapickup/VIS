        -:    0:Source:D:/Project Workspace/Year3/VIS/tests/TestParser.cpp
        -:    0:Graph:D:\Project Workspace\Year3\VIS\cmake-build-debug\tests\CMakeFiles\vis_tests.dir\TestParser.cpp.gcno
        -:    0:Data:D:\Project Workspace\Year3\VIS\cmake-build-debug\tests\CMakeFiles\vis_tests.dir\TestParser.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <gmock/gmock.h>
        -:    2:#include <gtest/gtest.h>
        -:    3:#include "TestHelpers.h"
        -:    4:#include "Parser.h"
        -:    5:#include "Token.h"
        -:    6:#include "Node.h"
        -:    7:
        4:    8:TEST(ParserTest, ParsesSimpleVariableAssignment) {
        -:    9:    std::vector<Token> tokens = {
        -:   10:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:   11:        Token(TokenType::IDENTIFIER, dummyPos, "x"),
        -:   12:        Token(TokenType::EQUALS, dummyPos),
    #####:   13:        Token(TokenType::INT, dummyPos, 42),
        -:   14:        Token(TokenType::EOL, dummyPos)
        7:   15:    };
        5:   16:    std::map<int, std::vector<Token>> tokenMap = { {0, tokens}, {1, {Token(TokenType::EOF_, dummyPos)}} };
        1:   17:    Parser parser(tokenMap);
        1:   18:    std::unique_ptr<Node> node = parser.parse();
       1*:   19:    ASSERT_NE(node, nullptr);
       1*:   20:    EXPECT_EQ(node->getType(), NodeType::VarAssgnment);
       1*:   21:    auto* varAssign = dynamic_cast<VarAssignment*>(node.get());
       1*:   22:    ASSERT_NE(varAssign, nullptr);
       1*:   23:    EXPECT_EQ(std::get<std::string>(varAssign->getToken().getValue()), "x");
       1*:   24:    auto* valueNode = dynamic_cast<Number*>(varAssign->getValue().get());
       1*:   25:    ASSERT_NE(valueNode, nullptr);
       1*:   26:    EXPECT_EQ(valueNode->getType(), NodeType::Number);
       1*:   27:    EXPECT_EQ(std::get<int>(valueNode->getToken().getValue()), 42);
        7:   28:}
------------------
_ZN46ParserTest_ParsesSimpleVariableAssignment_TestC1Ev:
function _ZN46ParserTest_ParsesSimpleVariableAssignment_TestC1Ev called 1 returned 100% blocks executed 100%
        1:    8:TEST(ParserTest, ParsesSimpleVariableAssignment) {
        1:    8-block  0
call    0 returned 1
------------------
_ZN46ParserTest_ParsesSimpleVariableAssignment_TestD0Ev:
function _ZN46ParserTest_ParsesSimpleVariableAssignment_TestD0Ev called 1 returned 100% blocks executed 100%
        1:    8:TEST(ParserTest, ParsesSimpleVariableAssignment) {
        1:    8-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN46ParserTest_ParsesSimpleVariableAssignment_TestD1Ev:
function _ZN46ParserTest_ParsesSimpleVariableAssignment_TestD1Ev called 1 returned 100% blocks executed 100%
        1:    8:TEST(ParserTest, ParsesSimpleVariableAssignment) {
        1:    8-block  0
call    0 returned 1
------------------
_ZN46ParserTest_ParsesSimpleVariableAssignment_Test8TestBodyEv:
function _ZN46ParserTest_ParsesSimpleVariableAssignment_Test8TestBodyEv called 1 returned 100% blocks executed 35%
        1:    8:TEST(ParserTest, ParsesSimpleVariableAssignment) {
        -:    9:    std::vector<Token> tokens = {
        -:   10:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:   11:        Token(TokenType::IDENTIFIER, dummyPos, "x"),
        -:   12:        Token(TokenType::EQUALS, dummyPos),
    #####:   13:        Token(TokenType::INT, dummyPos, 42),
    $$$$$:   13-block  0
        -:   14:        Token(TokenType::EOL, dummyPos)
        7:   15:    };
        1:   15-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        6:   15-block  1
branch  3 taken 5 (fallthrough)
branch  4 taken 1
        5:   15-block  2
call    5 returned 5
    $$$$$:   15-block  3
    $$$$$:   15-block  4
    $$$$$:   15-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:   15-block  6
call    8 never executed
    $$$$$:   15-block  7
        5:   16:    std::map<int, std::vector<Token>> tokenMap = { {0, tokens}, {1, {Token(TokenType::EOF_, dummyPos)}} };
        1:   16-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:   16-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:   16-block  2
call    5 returned 2
        1:   16-block  3
call    6 returned 1
    $$$$$:   16-block  4
    $$$$$:   16-block  5
    $$$$$:   16-block  6
    $$$$$:   16-block  7
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$:   16-block  8
call    9 never executed
    $$$$$:   16-block  9
    $$$$$:   16-block 10
call   10 never executed
    $$$$$:   16-block 11
    $$$$$:   16-block 12
    $$$$$:   16-block 13
        1:   17:    Parser parser(tokenMap);
        1:   17-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   17-block  1
call    3 returned 1
    $$$$$:   17-block  2
call    4 never executed
    $$$$$:   17-block  3
        1:   18:    std::unique_ptr<Node> node = parser.parse();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   19:    ASSERT_NE(node, nullptr);
        1:   19-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   19-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   19-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   19-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   19-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   19-block  5
call   16 never executed
call   17 never executed
        1:   19-block  6
        1:   19-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:   19-block  8
    $$$$$:   19-block  9
    $$$$$:   19-block 10
call   21 never executed
    $$$$$:   19-block 11
    $$$$$:   19-block 12
call   22 never executed
    $$$$$:   19-block 13
    $$$$$:   19-block 14
call   23 never executed
       1*:   20:    EXPECT_EQ(node->getType(), NodeType::VarAssgnment);
        1:   20-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   20-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   20-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   20-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   20-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   20-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:   20-block  6
call   20 never executed
call   21 never executed
        1:   20-block  7
call   22 returned 1
    $$$$$:   20-block  8
    $$$$$:   20-block  9
    $$$$$:   20-block 10
call   23 never executed
    $$$$$:   20-block 11
    $$$$$:   20-block 12
call   24 never executed
    $$$$$:   20-block 13
    $$$$$:   20-block 14
call   25 never executed
       1*:   21:    auto* varAssign = dynamic_cast<VarAssignment*>(node.get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   21-block  0
    %%%%%:   21-block  1
       1*:   22:    ASSERT_NE(varAssign, nullptr);
        1:   22-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   22-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   22-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   22-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   22-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   22-block  5
call   16 never executed
call   17 never executed
        1:   22-block  6
        1:   22-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:   22-block  8
    $$$$$:   22-block  9
    $$$$$:   22-block 10
call   21 never executed
    $$$$$:   22-block 11
    $$$$$:   22-block 12
call   22 never executed
    $$$$$:   22-block 13
    $$$$$:   22-block 14
call   23 never executed
       1*:   23:    EXPECT_EQ(std::get<std::string>(varAssign->getToken().getValue()), "x");
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   23-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   23-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   23-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   23-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:   23-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:   23-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:   23-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:   23-block  8
call   27 never executed
call   28 never executed
        1:   23-block  9
call   29 returned 1
    $$$$$:   23-block 10
call   30 never executed
    $$$$$:   23-block 11
call   31 never executed
    $$$$$:   23-block 12
    $$$$$:   23-block 13
    $$$$$:   23-block 14
call   32 never executed
    $$$$$:   23-block 15
    $$$$$:   23-block 16
call   33 never executed
    $$$$$:   23-block 17
    $$$$$:   23-block 18
call   34 never executed
       1*:   24:    auto* valueNode = dynamic_cast<Number*>(varAssign->getValue().get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   24-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:   24-block  1
    %%%%%:   24-block  2
       1*:   25:    ASSERT_NE(valueNode, nullptr);
        1:   25-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   25-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   25-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   25-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   25-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   25-block  5
call   16 never executed
call   17 never executed
        1:   25-block  6
        1:   25-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:   25-block  8
    $$$$$:   25-block  9
    $$$$$:   25-block 10
call   21 never executed
    $$$$$:   25-block 11
    $$$$$:   25-block 12
call   22 never executed
    $$$$$:   25-block 13
    $$$$$:   25-block 14
call   23 never executed
       1*:   26:    EXPECT_EQ(valueNode->getType(), NodeType::Number);
        1:   26-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   26-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   26-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   26-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   26-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   26-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   26-block  6
call   19 never executed
call   20 never executed
        1:   26-block  7
call   21 returned 1
    $$$$$:   26-block  8
    $$$$$:   26-block  9
    $$$$$:   26-block 10
call   22 never executed
    $$$$$:   26-block 11
    $$$$$:   26-block 12
call   23 never executed
    $$$$$:   26-block 13
    $$$$$:   26-block 14
call   24 never executed
       1*:   27:    EXPECT_EQ(std::get<int>(valueNode->getToken().getValue()), 42);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   27-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   27-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   27-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   27-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:   27-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:   27-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:   27-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:   27-block  7
call   27 never executed
call   28 never executed
        1:   27-block  8
call   29 returned 1
    $$$$$:   27-block  9
call   30 never executed
    $$$$$:   27-block 10
call   31 never executed
    $$$$$:   27-block 11
    $$$$$:   27-block 12
    $$$$$:   27-block 13
    $$$$$:   27-block 14
call   32 never executed
    $$$$$:   27-block 15
    $$$$$:   27-block 16
call   33 never executed
    $$$$$:   27-block 17
    $$$$$:   27-block 18
call   34 never executed
        7:   28:}
        1:   28-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   28-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   28-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   28-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   28-block  4
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   28-block  5
call   16 returned 1
call   17 returned 1
branch 18 taken 1 (fallthrough)
branch 19 taken 0 (throw)
        1:   28-block  6
call   20 returned 1
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0 (throw)
        1:   28-block  7
        1:   28-block  8
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
branch 30 taken 1 (fallthrough)
branch 31 taken 0 (throw)
        1:   28-block  9
call   32 returned 1
call   33 returned 1
branch 34 taken 1 (fallthrough)
branch 35 taken 0 (throw)
        1:   28-block 10
        1:   28-block 11
call   36 returned 1
branch 37 taken 1 (fallthrough)
branch 38 taken 0 (throw)
        1:   28-block 12
call   39 returned 1
branch 40 taken 1 (fallthrough)
branch 41 taken 0 (throw)
        1:   28-block 13
        1:   28-block 14
call   42 returned 1
        2:   28-block 15
branch 43 taken 1 (fallthrough)
branch 44 taken 1
        1:   28-block 16
call   45 returned 1
call   46 returned 1
branch 47 taken 1 (fallthrough)
branch 48 taken 0 (throw)
        1:   28-block 17
call   49 returned 1
branch 50 taken 1 (fallthrough)
branch 51 taken 0
        1:   28-block 18
        1:   28-block 19
call   52 returned 1
branch 53 taken 1 (fallthrough)
branch 54 taken 0
        1:   28-block 20
        1:   28-block 21
call   55 returned 1
branch 56 taken 1 (fallthrough)
branch 57 taken 0
        1:   28-block 22
        1:   28-block 23
call   58 returned 1
branch 59 taken 1 (fallthrough)
branch 60 taken 0
    $$$$$:   28-block 24
call   61 never executed
    $$$$$:   28-block 25
    $$$$$:   28-block 26
    $$$$$:   28-block 27
call   62 never executed
    $$$$$:   28-block 28
    $$$$$:   28-block 29
call   63 never executed
    $$$$$:   28-block 30
    $$$$$:   28-block 31
    $$$$$:   28-block 32
call   64 never executed
    $$$$$:   28-block 33
    $$$$$:   28-block 34
call   65 never executed
    $$$$$:   28-block 35
    $$$$$:   28-block 36
branch 66 never executed (fallthrough)
branch 67 never executed
    $$$$$:   28-block 37
    $$$$$:   28-block 38
branch 68 never executed (fallthrough)
branch 69 never executed
    $$$$$:   28-block 39
call   70 never executed
    $$$$$:   28-block 40
call   71 never executed
    $$$$$:   28-block 41
    $$$$$:   28-block 42
branch 72 never executed (fallthrough)
branch 73 never executed
    $$$$$:   28-block 43
call   74 never executed
    $$$$$:   28-block 44
    $$$$$:   28-block 45
    $$$$$:   28-block 46
branch 75 never executed (fallthrough)
branch 76 never executed
    $$$$$:   28-block 47
    $$$$$:   28-block 48
branch 77 never executed (fallthrough)
branch 78 never executed
    $$$$$:   28-block 49
call   79 never executed
    $$$$$:   28-block 50
    $$$$$:   28-block 51
    $$$$$:   28-block 52
branch 80 never executed (fallthrough)
branch 81 never executed
    $$$$$:   28-block 53
    $$$$$:   28-block 54
branch 82 never executed (fallthrough)
branch 83 never executed
    $$$$$:   28-block 55
call   84 never executed
    $$$$$:   28-block 56
call   85 never executed
    $$$$$:   28-block 57
call   86 never executed
    $$$$$:   28-block 58
call   87 never executed
    $$$$$:   28-block 59
call   88 never executed
------------------
        -:   29:
        4:   30:TEST(ParserTest, ParsesIncorrectSyntax) {
        -:   31:    std::vector<Token> tokens = {
        -:   32:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:   33:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:   34:        Token(TokenType::EQUALS, dummyPos),
    #####:   35:        Token(TokenType::INT, dummyPos, 42),
        -:   36:        Token(TokenType::EOL, dummyPos)
        7:   37:    };
        5:   38:    std::map<int, std::vector<Token>> tokenMap = { {0, tokens}, {1, {Token(TokenType::EOF_, dummyPos)}} };
        1:   39:    Parser parser(tokenMap);
       1*:   40:    EXPECT_THROW(parser.parse(), InvalidSyntaxError);
        7:   41:}
------------------
_ZN37ParserTest_ParsesIncorrectSyntax_TestC1Ev:
function _ZN37ParserTest_ParsesIncorrectSyntax_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   30:TEST(ParserTest, ParsesIncorrectSyntax) {
        1:   30-block  0
call    0 returned 1
------------------
_ZN37ParserTest_ParsesIncorrectSyntax_TestD0Ev:
function _ZN37ParserTest_ParsesIncorrectSyntax_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   30:TEST(ParserTest, ParsesIncorrectSyntax) {
        1:   30-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN37ParserTest_ParsesIncorrectSyntax_TestD1Ev:
function _ZN37ParserTest_ParsesIncorrectSyntax_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   30:TEST(ParserTest, ParsesIncorrectSyntax) {
        1:   30-block  0
call    0 returned 1
------------------
_ZN37ParserTest_ParsesIncorrectSyntax_Test8TestBodyEv:
function _ZN37ParserTest_ParsesIncorrectSyntax_Test8TestBodyEv called 1 returned 100% blocks executed 35%
        1:   30:TEST(ParserTest, ParsesIncorrectSyntax) {
        -:   31:    std::vector<Token> tokens = {
        -:   32:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:   33:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:   34:        Token(TokenType::EQUALS, dummyPos),
    #####:   35:        Token(TokenType::INT, dummyPos, 42),
    $$$$$:   35-block  0
        -:   36:        Token(TokenType::EOL, dummyPos)
        7:   37:    };
        1:   37-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        6:   37-block  1
branch  3 taken 5 (fallthrough)
branch  4 taken 1
        5:   37-block  2
call    5 returned 5
    $$$$$:   37-block  3
    $$$$$:   37-block  4
    $$$$$:   37-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:   37-block  6
call    8 never executed
    $$$$$:   37-block  7
        5:   38:    std::map<int, std::vector<Token>> tokenMap = { {0, tokens}, {1, {Token(TokenType::EOF_, dummyPos)}} };
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:   38-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:   38-block  2
call    5 returned 2
        1:   38-block  3
call    6 returned 1
    $$$$$:   38-block  4
    $$$$$:   38-block  5
    $$$$$:   38-block  6
    $$$$$:   38-block  7
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$:   38-block  8
call    9 never executed
    $$$$$:   38-block  9
    $$$$$:   38-block 10
call   10 never executed
    $$$$$:   38-block 11
    $$$$$:   38-block 12
    $$$$$:   38-block 13
        1:   39:    Parser parser(tokenMap);
        1:   39-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   39-block  1
call    3 returned 1
    $$$$$:   39-block  2
call    4 never executed
    $$$$$:   39-block  3
       1*:   40:    EXPECT_THROW(parser.parse(), InvalidSyntaxError);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   40-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   40-block  1
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:   40-block  2
call    9 returned 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1 (throw)
    %%%%%:   40-block  3
call   12 never executed
        1:   40-block  4
branch 13 taken 0 (fallthrough)
branch 14 taken 1
    %%%%%:   40-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%:   40-block  6
    %%%%%:   40-block  7
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%:   40-block  8
call   21 never executed
call   22 never executed
branch 23 never executed (fallthrough)
branch 24 never executed (throw)
    %%%%%:   40-block  9
call   25 never executed
branch 26 never executed (fallthrough)
branch 27 never executed (throw)
    %%%%%:   40-block 10
call   28 never executed
call   29 never executed
        1:   40-block 11
call   30 returned 1
        1:   40-block 12
        1:   40-block 13
branch 31 taken 1
branch 32 taken 0
branch 33 taken 0
        1:   40-block 14
call   34 returned 1
call   35 returned 1
branch 36 taken 1 (fallthrough)
branch 37 taken 0 (throw)
    $$$$$:   40-block 15
call   38 never executed
call   39 never executed
branch 40 never executed (fallthrough)
branch 41 never executed (throw)
    $$$$$:   40-block 16
call   42 never executed
branch 43 never executed (fallthrough)
branch 44 never executed (throw)
    $$$$$:   40-block 17
call   45 never executed
branch 46 never executed (fallthrough)
branch 47 never executed (throw)
    $$$$$:   40-block 18
call   48 never executed
call   49 never executed
branch 50 never executed (fallthrough)
branch 51 never executed (throw)
    $$$$$:   40-block 19
call   52 never executed
call   53 never executed
branch 54 never executed (fallthrough)
branch 55 never executed (throw)
    $$$$$:   40-block 20
call   56 never executed
branch 57 never executed (fallthrough)
branch 58 never executed (throw)
    $$$$$:   40-block 21
    $$$$$:   40-block 22
call   59 never executed
    $$$$$:   40-block 23
call   60 never executed
call   61 never executed
branch 62 never executed (fallthrough)
branch 63 never executed (throw)
    $$$$$:   40-block 24
    $$$$$:   40-block 25
call   64 never executed
branch 65 never executed (fallthrough)
branch 66 never executed (throw)
    $$$$$:   40-block 26
call   67 never executed
    $$$$$:   40-block 27
    $$$$$:   40-block 28
call   68 never executed
    $$$$$:   40-block 29
call   69 never executed
    $$$$$:   40-block 30
call   70 never executed
    $$$$$:   40-block 31
    $$$$$:   40-block 32
call   71 never executed
    $$$$$:   40-block 33
    $$$$$:   40-block 34
call   72 never executed
        7:   41:}
        1:   41-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   41-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   41-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   41-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   41-block  4
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   41-block  5
call   16 returned 1
call   17 returned 1
branch 18 taken 1 (fallthrough)
branch 19 taken 0 (throw)
        1:   41-block  6
call   20 returned 1
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0 (throw)
        1:   41-block  7
        1:   41-block  8
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
branch 30 taken 1 (fallthrough)
branch 31 taken 0 (throw)
        1:   41-block  9
call   32 returned 1
call   33 returned 1
branch 34 taken 1 (fallthrough)
branch 35 taken 0 (throw)
        1:   41-block 10
        1:   41-block 11
call   36 returned 1
branch 37 taken 1 (fallthrough)
branch 38 taken 0 (throw)
        1:   41-block 12
call   39 returned 1
branch 40 taken 1 (fallthrough)
branch 41 taken 0 (throw)
        1:   41-block 13
        1:   41-block 14
call   42 returned 1
        2:   41-block 15
branch 43 taken 1 (fallthrough)
branch 44 taken 1
        1:   41-block 16
call   45 returned 1
call   46 returned 1
branch 47 taken 1 (fallthrough)
branch 48 taken 0 (throw)
call   49 returned 1
call   50 returned 1
call   51 returned 1
    $$$$$:   41-block 17
call   52 never executed
    $$$$$:   41-block 18
    $$$$$:   41-block 19
    $$$$$:   41-block 20
call   53 never executed
    $$$$$:   41-block 21
    $$$$$:   41-block 22
call   54 never executed
    $$$$$:   41-block 23
    $$$$$:   41-block 24
    $$$$$:   41-block 25
call   55 never executed
    $$$$$:   41-block 26
    $$$$$:   41-block 27
call   56 never executed
    $$$$$:   41-block 28
    $$$$$:   41-block 29
branch 57 never executed (fallthrough)
branch 58 never executed
    $$$$$:   41-block 30
    $$$$$:   41-block 31
branch 59 never executed (fallthrough)
branch 60 never executed
    $$$$$:   41-block 32
call   61 never executed
    $$$$$:   41-block 33
call   62 never executed
    $$$$$:   41-block 34
    $$$$$:   41-block 35
branch 63 never executed (fallthrough)
branch 64 never executed
    $$$$$:   41-block 36
call   65 never executed
    $$$$$:   41-block 37
    $$$$$:   41-block 38
    $$$$$:   41-block 39
branch 66 never executed (fallthrough)
branch 67 never executed
    $$$$$:   41-block 40
    $$$$$:   41-block 41
branch 68 never executed (fallthrough)
branch 69 never executed
    $$$$$:   41-block 42
call   70 never executed
    $$$$$:   41-block 43
    $$$$$:   41-block 44
    $$$$$:   41-block 45
branch 71 never executed (fallthrough)
branch 72 never executed
    $$$$$:   41-block 46
    $$$$$:   41-block 47
branch 73 never executed (fallthrough)
branch 74 never executed
    $$$$$:   41-block 48
call   75 never executed
    $$$$$:   41-block 49
call   76 never executed
    $$$$$:   41-block 50
call   77 never executed
    $$$$$:   41-block 51
call   78 never executed
------------------
        -:   42:
        4:   43:TEST(ParserTest, ParsesFuncCall) {
        -:   44:    std::vector<Token> tokens = {
        -:   45:        Token(TokenType::IDENTIFIER, dummyPos, "testName"),
        -:   46:        Token(TokenType::OPENPAREN, dummyPos),
        -:   47:        Token(TokenType::STRING, dummyPos, "test"),
        -:   48:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:   49:        Token(TokenType::EOL, dummyPos)
        7:   50:    };
        -:   51:    std::map<int, std::vector<Token>> tokenMap = {
    #####:   52:        {0, tokens},
    #####:   53:        {1, {Token(TokenType::EOF_, dummyPos)}}
        5:   54:    };
        1:   55:    Parser parser(tokenMap);
        1:   56:    std::unique_ptr<Node> result = parser.parse();
       1*:   57:    ASSERT_NE(result, nullptr);
       1*:   58:    EXPECT_EQ(result->getType(), NodeType::FuncCall);
       1*:   59:    auto* call = dynamic_cast<FuncCall*>(result.get());
       1*:   60:    ASSERT_NE(call, nullptr);
        1:   61:    const auto& arguments = call->getArguments();
       1*:   62:    ASSERT_EQ(arguments.size(), 1);  // One expression inside the true block
        1:   63:    const Node* argument = arguments.at(0).get();
       1*:   64:    EXPECT_EQ(argument->getType(), NodeType::String);
        7:   65:}
------------------
_ZN30ParserTest_ParsesFuncCall_TestC1Ev:
function _ZN30ParserTest_ParsesFuncCall_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   43:TEST(ParserTest, ParsesFuncCall) {
        1:   43-block  0
call    0 returned 1
------------------
_ZN30ParserTest_ParsesFuncCall_TestD0Ev:
function _ZN30ParserTest_ParsesFuncCall_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   43:TEST(ParserTest, ParsesFuncCall) {
        1:   43-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN30ParserTest_ParsesFuncCall_TestD1Ev:
function _ZN30ParserTest_ParsesFuncCall_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   43:TEST(ParserTest, ParsesFuncCall) {
        1:   43-block  0
call    0 returned 1
------------------
_ZN30ParserTest_ParsesFuncCall_Test8TestBodyEv:
function _ZN30ParserTest_ParsesFuncCall_Test8TestBodyEv called 1 returned 100% blocks executed 37%
        1:   43:TEST(ParserTest, ParsesFuncCall) {
        -:   44:    std::vector<Token> tokens = {
        -:   45:        Token(TokenType::IDENTIFIER, dummyPos, "testName"),
        -:   46:        Token(TokenType::OPENPAREN, dummyPos),
        -:   47:        Token(TokenType::STRING, dummyPos, "test"),
        -:   48:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:   49:        Token(TokenType::EOL, dummyPos)
        7:   50:    };
        1:   50-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        6:   50-block  1
branch  3 taken 5 (fallthrough)
branch  4 taken 1
        5:   50-block  2
call    5 returned 5
    $$$$$:   50-block  3
    $$$$$:   50-block  4
    $$$$$:   50-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:   50-block  6
call    8 never executed
    $$$$$:   50-block  7
        -:   51:    std::map<int, std::vector<Token>> tokenMap = {
    #####:   52:        {0, tokens},
    $$$$$:   52-block  0
    #####:   53:        {1, {Token(TokenType::EOF_, dummyPos)}}
    $$$$$:   53-block  0
        5:   54:    };
        1:   54-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:   54-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:   54-block  2
call    5 returned 2
        1:   54-block  3
call    6 returned 1
    $$$$$:   54-block  4
    $$$$$:   54-block  5
    $$$$$:   54-block  6
    $$$$$:   54-block  7
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$:   54-block  8
call    9 never executed
    $$$$$:   54-block  9
    $$$$$:   54-block 10
call   10 never executed
    $$$$$:   54-block 11
        1:   55:    Parser parser(tokenMap);
        1:   55-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   55-block  1
call    3 returned 1
    $$$$$:   55-block  2
call    4 never executed
    $$$$$:   55-block  3
        1:   56:    std::unique_ptr<Node> result = parser.parse();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   57:    ASSERT_NE(result, nullptr);
        1:   57-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   57-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   57-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   57-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   57-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   57-block  5
call   16 never executed
call   17 never executed
        1:   57-block  6
        1:   57-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:   57-block  8
    $$$$$:   57-block  9
    $$$$$:   57-block 10
call   21 never executed
    $$$$$:   57-block 11
    $$$$$:   57-block 12
call   22 never executed
    $$$$$:   57-block 13
    $$$$$:   57-block 14
call   23 never executed
       1*:   58:    EXPECT_EQ(result->getType(), NodeType::FuncCall);
        1:   58-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   58-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   58-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   58-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   58-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   58-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:   58-block  6
call   20 never executed
call   21 never executed
        1:   58-block  7
call   22 returned 1
    $$$$$:   58-block  8
    $$$$$:   58-block  9
    $$$$$:   58-block 10
call   23 never executed
    $$$$$:   58-block 11
    $$$$$:   58-block 12
call   24 never executed
    $$$$$:   58-block 13
    $$$$$:   58-block 14
call   25 never executed
       1*:   59:    auto* call = dynamic_cast<FuncCall*>(result.get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   59-block  0
    %%%%%:   59-block  1
       1*:   60:    ASSERT_NE(call, nullptr);
        1:   60-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   60-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   60-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   60-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   60-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   60-block  5
call   16 never executed
call   17 never executed
        1:   60-block  6
        1:   60-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:   60-block  8
    $$$$$:   60-block  9
    $$$$$:   60-block 10
call   21 never executed
    $$$$$:   60-block 11
    $$$$$:   60-block 12
call   22 never executed
    $$$$$:   60-block 13
    $$$$$:   60-block 14
call   23 never executed
        1:   61:    const auto& arguments = call->getArguments();
        1:   61-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   62:    ASSERT_EQ(arguments.size(), 1);  // One expression inside the true block
        1:   62-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   62-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   62-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:   62-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:   62-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   62-block  5
call   17 never executed
call   18 never executed
        1:   62-block  6
        1:   62-block  7
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0
        1:   62-block  8
    $$$$$:   62-block  9
    $$$$$:   62-block 10
    $$$$$:   62-block 11
call   22 never executed
    $$$$$:   62-block 12
    $$$$$:   62-block 13
call   23 never executed
    $$$$$:   62-block 14
    $$$$$:   62-block 15
call   24 never executed
        1:   63:    const Node* argument = arguments.at(0).get();
        1:   63-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   63-block  1
call    3 returned 1
       1*:   64:    EXPECT_EQ(argument->getType(), NodeType::String);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   64-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   64-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   64-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   64-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   64-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   64-block  5
call   19 never executed
call   20 never executed
        1:   64-block  6
call   21 returned 1
    $$$$$:   64-block  7
    $$$$$:   64-block  8
    $$$$$:   64-block  9
call   22 never executed
    $$$$$:   64-block 10
    $$$$$:   64-block 11
call   23 never executed
    $$$$$:   64-block 12
    $$$$$:   64-block 13
call   24 never executed
        7:   65:}
        1:   65-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   65-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   65-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:   65-block  3
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1:   65-block  4
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   65-block  5
call   16 returned 1
call   17 returned 1
branch 18 taken 1 (fallthrough)
branch 19 taken 0 (throw)
        1:   65-block  6
call   20 returned 1
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0 (throw)
        1:   65-block  7
        1:   65-block  8
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
branch 30 taken 1 (fallthrough)
branch 31 taken 0 (throw)
        1:   65-block  9
call   32 returned 1
call   33 returned 1
branch 34 taken 1 (fallthrough)
branch 35 taken 0 (throw)
        1:   65-block 10
        1:   65-block 11
call   36 returned 1
branch 37 taken 1 (fallthrough)
branch 38 taken 0 (throw)
        1:   65-block 12
call   39 returned 1
branch 40 taken 1 (fallthrough)
branch 41 taken 0 (throw)
        1:   65-block 13
        1:   65-block 14
call   42 returned 1
        2:   65-block 15
branch 43 taken 1 (fallthrough)
branch 44 taken 1
        1:   65-block 16
call   45 returned 1
call   46 returned 1
branch 47 taken 1 (fallthrough)
branch 48 taken 0 (throw)
        1:   65-block 17
call   49 returned 1
branch 50 taken 1 (fallthrough)
branch 51 taken 0
        1:   65-block 18
        1:   65-block 19
call   52 returned 1
branch 53 taken 1 (fallthrough)
branch 54 taken 0
        1:   65-block 20
        1:   65-block 21
call   55 returned 1
branch 56 taken 1 (fallthrough)
branch 57 taken 0
        1:   65-block 22
        1:   65-block 23
call   58 returned 1
branch 59 taken 1 (fallthrough)
branch 60 taken 0
    $$$$$:   65-block 24
call   61 never executed
    $$$$$:   65-block 25
    $$$$$:   65-block 26
    $$$$$:   65-block 27
call   62 never executed
    $$$$$:   65-block 28
    $$$$$:   65-block 29
    $$$$$:   65-block 30
call   63 never executed
    $$$$$:   65-block 31
    $$$$$:   65-block 32
call   64 never executed
    $$$$$:   65-block 33
    $$$$$:   65-block 34
    $$$$$:   65-block 35
call   65 never executed
    $$$$$:   65-block 36
    $$$$$:   65-block 37
branch 66 never executed (fallthrough)
branch 67 never executed
    $$$$$:   65-block 38
    $$$$$:   65-block 39
branch 68 never executed (fallthrough)
branch 69 never executed
    $$$$$:   65-block 40
call   70 never executed
    $$$$$:   65-block 41
call   71 never executed
    $$$$$:   65-block 42
    $$$$$:   65-block 43
branch 72 never executed (fallthrough)
branch 73 never executed
    $$$$$:   65-block 44
call   74 never executed
    $$$$$:   65-block 45
    $$$$$:   65-block 46
    $$$$$:   65-block 47
branch 75 never executed (fallthrough)
branch 76 never executed
    $$$$$:   65-block 48
    $$$$$:   65-block 49
branch 77 never executed (fallthrough)
branch 78 never executed
    $$$$$:   65-block 50
call   79 never executed
    $$$$$:   65-block 51
    $$$$$:   65-block 52
    $$$$$:   65-block 53
branch 80 never executed (fallthrough)
branch 81 never executed
    $$$$$:   65-block 54
    $$$$$:   65-block 55
branch 82 never executed (fallthrough)
branch 83 never executed
    $$$$$:   65-block 56
call   84 never executed
    $$$$$:   65-block 57
call   85 never executed
    $$$$$:   65-block 58
call   86 never executed
    $$$$$:   65-block 59
call   87 never executed
    $$$$$:   65-block 60
call   88 never executed
------------------
        -:   66:
        4:   67:TEST(ParserTest, ParsesLibCallToOutWithString) {
        -:   68:    std::vector<Token> tokens = {
        -:   69:        Token(TokenType::KEYWORD, dummyPos, "out"),
        -:   70:        Token(TokenType::OPENPAREN, dummyPos),
        -:   71:        Token(TokenType::STRING, dummyPos, "test"),
        -:   72:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:   73:        Token(TokenType::EOL, dummyPos)
        7:   74:    };
        -:   75:    std::map<int, std::vector<Token>> tokenMap = {
    #####:   76:        {0, tokens},
    #####:   77:        {1, {Token(TokenType::EOF_, dummyPos)}}
        5:   78:    };
        1:   79:    Parser parser(tokenMap);
        1:   80:    std::unique_ptr<Node> result = parser.parse();
       1*:   81:    ASSERT_NE(result, nullptr);
       1*:   82:    EXPECT_EQ(result->getType(), NodeType::LibCall);
       1*:   83:    auto* call = dynamic_cast<LibCall*>(result.get());
       1*:   84:    ASSERT_NE(call, nullptr);
       1*:   85:    EXPECT_EQ(std::get<std::string>(call->getToken().getValue()), "out");
        7:   86:}
------------------
_ZN44ParserTest_ParsesLibCallToOutWithString_TestC1Ev:
function _ZN44ParserTest_ParsesLibCallToOutWithString_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   67:TEST(ParserTest, ParsesLibCallToOutWithString) {
        1:   67-block  0
call    0 returned 1
------------------
_ZN44ParserTest_ParsesLibCallToOutWithString_TestD0Ev:
function _ZN44ParserTest_ParsesLibCallToOutWithString_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   67:TEST(ParserTest, ParsesLibCallToOutWithString) {
        1:   67-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN44ParserTest_ParsesLibCallToOutWithString_TestD1Ev:
function _ZN44ParserTest_ParsesLibCallToOutWithString_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   67:TEST(ParserTest, ParsesLibCallToOutWithString) {
        1:   67-block  0
call    0 returned 1
------------------
_ZN44ParserTest_ParsesLibCallToOutWithString_Test8TestBodyEv:
function _ZN44ParserTest_ParsesLibCallToOutWithString_Test8TestBodyEv called 1 returned 100% blocks executed 37%
        1:   67:TEST(ParserTest, ParsesLibCallToOutWithString) {
        -:   68:    std::vector<Token> tokens = {
        -:   69:        Token(TokenType::KEYWORD, dummyPos, "out"),
        -:   70:        Token(TokenType::OPENPAREN, dummyPos),
        -:   71:        Token(TokenType::STRING, dummyPos, "test"),
        -:   72:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:   73:        Token(TokenType::EOL, dummyPos)
        7:   74:    };
        1:   74-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        6:   74-block  1
branch  3 taken 5 (fallthrough)
branch  4 taken 1
        5:   74-block  2
call    5 returned 5
    $$$$$:   74-block  3
    $$$$$:   74-block  4
    $$$$$:   74-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:   74-block  6
call    8 never executed
    $$$$$:   74-block  7
        -:   75:    std::map<int, std::vector<Token>> tokenMap = {
    #####:   76:        {0, tokens},
    $$$$$:   76-block  0
    #####:   77:        {1, {Token(TokenType::EOF_, dummyPos)}}
    $$$$$:   77-block  0
        5:   78:    };
        1:   78-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:   78-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:   78-block  2
call    5 returned 2
        1:   78-block  3
call    6 returned 1
    $$$$$:   78-block  4
    $$$$$:   78-block  5
    $$$$$:   78-block  6
    $$$$$:   78-block  7
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$:   78-block  8
call    9 never executed
    $$$$$:   78-block  9
    $$$$$:   78-block 10
call   10 never executed
    $$$$$:   78-block 11
        1:   79:    Parser parser(tokenMap);
        1:   79-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   79-block  1
call    3 returned 1
    $$$$$:   79-block  2
call    4 never executed
    $$$$$:   79-block  3
        1:   80:    std::unique_ptr<Node> result = parser.parse();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   81:    ASSERT_NE(result, nullptr);
        1:   81-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   81-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   81-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   81-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   81-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   81-block  5
call   16 never executed
call   17 never executed
        1:   81-block  6
        1:   81-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:   81-block  8
    $$$$$:   81-block  9
    $$$$$:   81-block 10
call   21 never executed
    $$$$$:   81-block 11
    $$$$$:   81-block 12
call   22 never executed
    $$$$$:   81-block 13
    $$$$$:   81-block 14
call   23 never executed
       1*:   82:    EXPECT_EQ(result->getType(), NodeType::LibCall);
        1:   82-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   82-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   82-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   82-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   82-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   82-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:   82-block  6
call   20 never executed
call   21 never executed
        1:   82-block  7
call   22 returned 1
    $$$$$:   82-block  8
    $$$$$:   82-block  9
    $$$$$:   82-block 10
call   23 never executed
    $$$$$:   82-block 11
    $$$$$:   82-block 12
call   24 never executed
    $$$$$:   82-block 13
    $$$$$:   82-block 14
call   25 never executed
       1*:   83:    auto* call = dynamic_cast<LibCall*>(result.get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   83-block  0
    %%%%%:   83-block  1
       1*:   84:    ASSERT_NE(call, nullptr);
        1:   84-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   84-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   84-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   84-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   84-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   84-block  5
call   16 never executed
call   17 never executed
        1:   84-block  6
        1:   84-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:   84-block  8
    $$$$$:   84-block  9
    $$$$$:   84-block 10
call   21 never executed
    $$$$$:   84-block 11
    $$$$$:   84-block 12
call   22 never executed
    $$$$$:   84-block 13
    $$$$$:   84-block 14
call   23 never executed
       1*:   85:    EXPECT_EQ(std::get<std::string>(call->getToken().getValue()), "out");
        1:   85-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   85-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   85-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   85-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   85-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:   85-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:   85-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:   85-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:   85-block  8
call   27 never executed
call   28 never executed
        1:   85-block  9
call   29 returned 1
    $$$$$:   85-block 10
call   30 never executed
    $$$$$:   85-block 11
call   31 never executed
    $$$$$:   85-block 12
    $$$$$:   85-block 13
    $$$$$:   85-block 14
call   32 never executed
    $$$$$:   85-block 15
    $$$$$:   85-block 16
call   33 never executed
    $$$$$:   85-block 17
    $$$$$:   85-block 18
call   34 never executed
        7:   86:}
        1:   86-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   86-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   86-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:   86-block  3
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1:   86-block  4
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   86-block  5
call   16 returned 1
call   17 returned 1
branch 18 taken 1 (fallthrough)
branch 19 taken 0 (throw)
        1:   86-block  6
call   20 returned 1
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0 (throw)
        1:   86-block  7
        1:   86-block  8
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
branch 30 taken 1 (fallthrough)
branch 31 taken 0 (throw)
        1:   86-block  9
call   32 returned 1
call   33 returned 1
branch 34 taken 1 (fallthrough)
branch 35 taken 0 (throw)
        1:   86-block 10
        1:   86-block 11
call   36 returned 1
branch 37 taken 1 (fallthrough)
branch 38 taken 0 (throw)
        1:   86-block 12
call   39 returned 1
branch 40 taken 1 (fallthrough)
branch 41 taken 0 (throw)
        1:   86-block 13
        1:   86-block 14
call   42 returned 1
        2:   86-block 15
branch 43 taken 1 (fallthrough)
branch 44 taken 1
        1:   86-block 16
call   45 returned 1
call   46 returned 1
branch 47 taken 1 (fallthrough)
branch 48 taken 0 (throw)
        1:   86-block 17
call   49 returned 1
branch 50 taken 1 (fallthrough)
branch 51 taken 0
        1:   86-block 18
        1:   86-block 19
call   52 returned 1
branch 53 taken 1 (fallthrough)
branch 54 taken 0
        1:   86-block 20
        1:   86-block 21
call   55 returned 1
branch 56 taken 1 (fallthrough)
branch 57 taken 0
        1:   86-block 22
        1:   86-block 23
call   58 returned 1
branch 59 taken 1 (fallthrough)
branch 60 taken 0
    $$$$$:   86-block 24
call   61 never executed
    $$$$$:   86-block 25
    $$$$$:   86-block 26
    $$$$$:   86-block 27
call   62 never executed
    $$$$$:   86-block 28
    $$$$$:   86-block 29
    $$$$$:   86-block 30
call   63 never executed
    $$$$$:   86-block 31
    $$$$$:   86-block 32
call   64 never executed
    $$$$$:   86-block 33
    $$$$$:   86-block 34
    $$$$$:   86-block 35
call   65 never executed
    $$$$$:   86-block 36
    $$$$$:   86-block 37
branch 66 never executed (fallthrough)
branch 67 never executed
    $$$$$:   86-block 38
    $$$$$:   86-block 39
branch 68 never executed (fallthrough)
branch 69 never executed
    $$$$$:   86-block 40
call   70 never executed
    $$$$$:   86-block 41
call   71 never executed
    $$$$$:   86-block 42
    $$$$$:   86-block 43
branch 72 never executed (fallthrough)
branch 73 never executed
    $$$$$:   86-block 44
call   74 never executed
    $$$$$:   86-block 45
    $$$$$:   86-block 46
    $$$$$:   86-block 47
branch 75 never executed (fallthrough)
branch 76 never executed
    $$$$$:   86-block 48
    $$$$$:   86-block 49
branch 77 never executed (fallthrough)
branch 78 never executed
    $$$$$:   86-block 50
call   79 never executed
    $$$$$:   86-block 51
    $$$$$:   86-block 52
    $$$$$:   86-block 53
branch 80 never executed (fallthrough)
branch 81 never executed
    $$$$$:   86-block 54
    $$$$$:   86-block 55
branch 82 never executed (fallthrough)
branch 83 never executed
    $$$$$:   86-block 56
call   84 never executed
    $$$$$:   86-block 57
call   85 never executed
    $$$$$:   86-block 58
call   86 never executed
    $$$$$:   86-block 59
call   87 never executed
    $$$$$:   86-block 60
call   88 never executed
------------------
        -:   87:
        4:   88:TEST(ParserTest, ParsesFuncDefinition) {
        -:   89:    std::vector<Token> tokenLine1 = {
        -:   90:        Token(TokenType::KEYWORD, dummyPos, "func"),
        -:   91:        Token(TokenType::IDENTIFIER, dummyPos, "testFunc"),
        -:   92:        Token(TokenType::OPENPAREN, dummyPos),
        -:   93:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:   94:        Token(TokenType::OPENBRACE, dummyPos),
        -:   95:        Token(TokenType::EOL, dummyPos)
        8:   96:    };
        -:   97:    std::vector<Token> tokenLine2 = {
        -:   98:        Token(TokenType::KEYWORD, dummyPos, "return"),
    #####:   99:        Token(TokenType::INT, dummyPos, 5),
        -:  100:        Token(TokenType::EOL, dummyPos)
        5:  101:    };
        -:  102:    std::vector<Token> tokenLine3 = {
        -:  103:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  104:        Token(TokenType::EOL, dummyPos)
        4:  105:    };
        -:  106:    const std::map<int, std::vector<Token>> tokenMap =
        -:  107:        {
    #####:  108:        {0, tokenLine1},
    #####:  109:        {1, tokenLine2},
    #####:  110:        {2, tokenLine3},
    #####:  111:        {3, {Token(TokenType::EOF_, dummyPos)} }
        7:  112:        };
        -:  113:
        1:  114:    Parser parser(tokenMap);
        -:  115:    // Act: Parse the tokens
        1:  116:    const std::unique_ptr<Node> node = parser.parse();
        -:  117:
        -:  118:    // Assert: Check the returned Node
       1*:  119:    ASSERT_NE(node, nullptr);
       1*:  120:    EXPECT_EQ(node->getType(), NodeType::FuncDef);
        -:  121:
       1*:  122:    auto* funcDefinition = dynamic_cast<FuncDef*>(node.get());
       1*:  123:    ASSERT_NE(funcDefinition, nullptr);
       1*:  124:    EXPECT_EQ(funcDefinition->getName(), "testFunc");
       1*:  125:    EXPECT_EQ(funcDefinition->getArguments().size(), 0);
        -:  126:
        1:  127:    const auto& bodyNodes = funcDefinition->getFunctionBody();
       1*:  128:    ASSERT_EQ(bodyNodes.size(), 1);
        -:  129:
        1:  130:    const Node* bodyNode = bodyNodes.at(0).get();
       1*:  131:    ASSERT_NE(bodyNode, nullptr);
       1*:  132:    EXPECT_EQ(bodyNode->getType(), NodeType::ReturnCall);
        -:  133:
       1*:  134:    const ReturnCall* returnCast = dynamic_cast<const ReturnCall*>(bodyNode);
       1*:  135:    ASSERT_NE(returnCast, nullptr);
        -:  136:
        1:  137:    const Node* valueNode = returnCast->getExpression().get();
       1*:  138:    ASSERT_NE(valueNode, nullptr);
       1*:  139:    EXPECT_EQ(valueNode->getType(), NodeType::Number);
        -:  140:
       1*:  141:    const auto* numberNode = dynamic_cast<const Number*>(valueNode);
       1*:  142:    ASSERT_NE(numberNode, nullptr);
       1*:  143:    EXPECT_EQ(std::get<int>(numberNode->getToken().getValue()), 5);
        9:  144:}
------------------
_ZN36ParserTest_ParsesFuncDefinition_TestC1Ev:
function _ZN36ParserTest_ParsesFuncDefinition_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   88:TEST(ParserTest, ParsesFuncDefinition) {
        1:   88-block  0
call    0 returned 1
------------------
_ZN36ParserTest_ParsesFuncDefinition_TestD0Ev:
function _ZN36ParserTest_ParsesFuncDefinition_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   88:TEST(ParserTest, ParsesFuncDefinition) {
        1:   88-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN36ParserTest_ParsesFuncDefinition_TestD1Ev:
function _ZN36ParserTest_ParsesFuncDefinition_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   88:TEST(ParserTest, ParsesFuncDefinition) {
        1:   88-block  0
call    0 returned 1
------------------
_ZN36ParserTest_ParsesFuncDefinition_Test8TestBodyEv:
function _ZN36ParserTest_ParsesFuncDefinition_Test8TestBodyEv called 1 returned 100% blocks executed 34%
        1:   88:TEST(ParserTest, ParsesFuncDefinition) {
        -:   89:    std::vector<Token> tokenLine1 = {
        -:   90:        Token(TokenType::KEYWORD, dummyPos, "func"),
        -:   91:        Token(TokenType::IDENTIFIER, dummyPos, "testFunc"),
        -:   92:        Token(TokenType::OPENPAREN, dummyPos),
        -:   93:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:   94:        Token(TokenType::OPENBRACE, dummyPos),
        -:   95:        Token(TokenType::EOL, dummyPos)
        8:   96:    };
        1:   96-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        7:   96-block  1
branch  3 taken 6 (fallthrough)
branch  4 taken 1
        6:   96-block  2
call    5 returned 6
    $$$$$:   96-block  3
    $$$$$:   96-block  4
    $$$$$:   96-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:   96-block  6
call    8 never executed
    $$$$$:   96-block  7
        -:   97:    std::vector<Token> tokenLine2 = {
        -:   98:        Token(TokenType::KEYWORD, dummyPos, "return"),
    #####:   99:        Token(TokenType::INT, dummyPos, 5),
    $$$$$:   99-block  0
        -:  100:        Token(TokenType::EOL, dummyPos)
        5:  101:    };
        1:  101-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        4:  101-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 1
        3:  101-block  2
call    5 returned 3
    $$$$$:  101-block  3
    $$$$$:  101-block  4
    $$$$$:  101-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  101-block  6
call    8 never executed
    $$$$$:  101-block  7
        -:  102:    std::vector<Token> tokenLine3 = {
        -:  103:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  104:        Token(TokenType::EOL, dummyPos)
        4:  105:    };
        1:  105-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:  105-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:  105-block  2
call    5 returned 2
    $$$$$:  105-block  3
    $$$$$:  105-block  4
    $$$$$:  105-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  105-block  6
call    8 never executed
    $$$$$:  105-block  7
        -:  106:    const std::map<int, std::vector<Token>> tokenMap =
        -:  107:        {
    #####:  108:        {0, tokenLine1},
    $$$$$:  108-block  0
    #####:  109:        {1, tokenLine2},
    $$$$$:  109-block  0
    #####:  110:        {2, tokenLine3},
    $$$$$:  110-block  0
    #####:  111:        {3, {Token(TokenType::EOF_, dummyPos)} }
    $$$$$:  111-block  0
        7:  112:        };
        1:  112-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  112-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  112-block  2
call    5 returned 4
        1:  112-block  3
call    6 returned 1
    $$$$$:  112-block  4
    $$$$$:  112-block  5
    $$$$$:  112-block  6
    $$$$$:  112-block  7
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$:  112-block  8
call    9 never executed
    $$$$$:  112-block  9
    $$$$$:  112-block 10
call   10 never executed
    $$$$$:  112-block 11
        -:  113:
        1:  114:    Parser parser(tokenMap);
        1:  114-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  114-block  1
call    3 returned 1
    $$$$$:  114-block  2
call    4 never executed
    $$$$$:  114-block  3
        -:  115:    // Act: Parse the tokens
        1:  116:    const std::unique_ptr<Node> node = parser.parse();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  117:
        -:  118:    // Assert: Check the returned Node
       1*:  119:    ASSERT_NE(node, nullptr);
        1:  119-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  119-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  119-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  119-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  119-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  119-block  5
call   16 never executed
call   17 never executed
        1:  119-block  6
        1:  119-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  119-block  8
    $$$$$:  119-block  9
    $$$$$:  119-block 10
call   21 never executed
    $$$$$:  119-block 11
    $$$$$:  119-block 12
call   22 never executed
    $$$$$:  119-block 13
    $$$$$:  119-block 14
call   23 never executed
       1*:  120:    EXPECT_EQ(node->getType(), NodeType::FuncDef);
        1:  120-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  120-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  120-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:  120-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  120-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  120-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  120-block  6
call   20 never executed
call   21 never executed
        1:  120-block  7
call   22 returned 1
    $$$$$:  120-block  8
    $$$$$:  120-block  9
    $$$$$:  120-block 10
call   23 never executed
    $$$$$:  120-block 11
    $$$$$:  120-block 12
call   24 never executed
    $$$$$:  120-block 13
    $$$$$:  120-block 14
call   25 never executed
        -:  121:
       1*:  122:    auto* funcDefinition = dynamic_cast<FuncDef*>(node.get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  122-block  0
    %%%%%:  122-block  1
       1*:  123:    ASSERT_NE(funcDefinition, nullptr);
        1:  123-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  123-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  123-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  123-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  123-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  123-block  5
call   16 never executed
call   17 never executed
        1:  123-block  6
        1:  123-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  123-block  8
    $$$$$:  123-block  9
    $$$$$:  123-block 10
call   21 never executed
    $$$$$:  123-block 11
    $$$$$:  123-block 12
call   22 never executed
    $$$$$:  123-block 13
    $$$$$:  123-block 14
call   23 never executed
       1*:  124:    EXPECT_EQ(funcDefinition->getName(), "testFunc");
        1:  124-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  124-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  124-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:  124-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  124-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  124-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  124-block  6
call   20 never executed
call   21 never executed
        1:  124-block  7
call   22 returned 1
    $$$$$:  124-block  8
call   23 never executed
    $$$$$:  124-block  9
    $$$$$:  124-block 10
call   24 never executed
    $$$$$:  124-block 11
    $$$$$:  124-block 12
call   25 never executed
    $$$$$:  124-block 13
    $$$$$:  124-block 14
call   26 never executed
       1*:  125:    EXPECT_EQ(funcDefinition->getArguments().size(), 0);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  125-block  0
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  125-block  1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:  125-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  125-block  3
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  125-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  125-block  5
call   20 never executed
call   21 never executed
        1:  125-block  6
call   22 returned 1
    $$$$$:  125-block  7
    $$$$$:  125-block  8
    $$$$$:  125-block  9
call   23 never executed
    $$$$$:  125-block 10
    $$$$$:  125-block 11
call   24 never executed
    $$$$$:  125-block 12
    $$$$$:  125-block 13
call   25 never executed
        -:  126:
        1:  127:    const auto& bodyNodes = funcDefinition->getFunctionBody();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  128:    ASSERT_EQ(bodyNodes.size(), 1);
        1:  128-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  128-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  128-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  128-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  128-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  128-block  5
call   17 never executed
call   18 never executed
        1:  128-block  6
        1:  128-block  7
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0
        1:  128-block  8
    $$$$$:  128-block  9
    $$$$$:  128-block 10
    $$$$$:  128-block 11
call   22 never executed
    $$$$$:  128-block 12
    $$$$$:  128-block 13
call   23 never executed
    $$$$$:  128-block 14
    $$$$$:  128-block 15
call   24 never executed
        -:  129:
        1:  130:    const Node* bodyNode = bodyNodes.at(0).get();
        1:  130-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  130-block  1
call    3 returned 1
       1*:  131:    ASSERT_NE(bodyNode, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  131-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  131-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  131-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  131-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  131-block  4
call   16 never executed
call   17 never executed
        1:  131-block  5
        1:  131-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  131-block  7
    $$$$$:  131-block  8
    $$$$$:  131-block  9
call   21 never executed
    $$$$$:  131-block 10
    $$$$$:  131-block 11
call   22 never executed
    $$$$$:  131-block 12
    $$$$$:  131-block 13
call   23 never executed
       1*:  132:    EXPECT_EQ(bodyNode->getType(), NodeType::ReturnCall);
        1:  132-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  132-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  132-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  132-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  132-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  132-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  132-block  6
call   19 never executed
call   20 never executed
        1:  132-block  7
call   21 returned 1
    $$$$$:  132-block  8
    $$$$$:  132-block  9
    $$$$$:  132-block 10
call   22 never executed
    $$$$$:  132-block 11
    $$$$$:  132-block 12
call   23 never executed
    $$$$$:  132-block 13
    $$$$$:  132-block 14
call   24 never executed
        -:  133:
       1*:  134:    const ReturnCall* returnCast = dynamic_cast<const ReturnCall*>(bodyNode);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  134-block  0
    %%%%%:  134-block  1
       1*:  135:    ASSERT_NE(returnCast, nullptr);
        1:  135-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  135-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  135-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  135-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  135-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  135-block  5
call   16 never executed
call   17 never executed
        1:  135-block  6
        1:  135-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  135-block  8
    $$$$$:  135-block  9
    $$$$$:  135-block 10
call   21 never executed
    $$$$$:  135-block 11
    $$$$$:  135-block 12
call   22 never executed
    $$$$$:  135-block 13
    $$$$$:  135-block 14
call   23 never executed
        -:  136:
        1:  137:    const Node* valueNode = returnCast->getExpression().get();
        1:  137-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  137-block  1
call    3 returned 1
       1*:  138:    ASSERT_NE(valueNode, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  138-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  138-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  138-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  138-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  138-block  4
call   16 never executed
call   17 never executed
        1:  138-block  5
        1:  138-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  138-block  7
    $$$$$:  138-block  8
    $$$$$:  138-block  9
call   21 never executed
    $$$$$:  138-block 10
    $$$$$:  138-block 11
call   22 never executed
    $$$$$:  138-block 12
    $$$$$:  138-block 13
call   23 never executed
       1*:  139:    EXPECT_EQ(valueNode->getType(), NodeType::Number);
        1:  139-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  139-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  139-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  139-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  139-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  139-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  139-block  6
call   19 never executed
call   20 never executed
        1:  139-block  7
call   21 returned 1
    $$$$$:  139-block  8
    $$$$$:  139-block  9
    $$$$$:  139-block 10
call   22 never executed
    $$$$$:  139-block 11
    $$$$$:  139-block 12
call   23 never executed
    $$$$$:  139-block 13
    $$$$$:  139-block 14
call   24 never executed
        -:  140:
       1*:  141:    const auto* numberNode = dynamic_cast<const Number*>(valueNode);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  141-block  0
    %%%%%:  141-block  1
       1*:  142:    ASSERT_NE(numberNode, nullptr);
        1:  142-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  142-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  142-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  142-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  142-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  142-block  5
call   16 never executed
call   17 never executed
        1:  142-block  6
        1:  142-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  142-block  8
    $$$$$:  142-block  9
    $$$$$:  142-block 10
call   21 never executed
    $$$$$:  142-block 11
    $$$$$:  142-block 12
call   22 never executed
    $$$$$:  142-block 13
    $$$$$:  142-block 14
call   23 never executed
       1*:  143:    EXPECT_EQ(std::get<int>(numberNode->getToken().getValue()), 5);
        1:  143-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  143-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  143-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  143-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  143-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  143-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  143-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  143-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  143-block  8
call   27 never executed
call   28 never executed
        1:  143-block  9
call   29 returned 1
    $$$$$:  143-block 10
call   30 never executed
    $$$$$:  143-block 11
call   31 never executed
    $$$$$:  143-block 12
    $$$$$:  143-block 13
    $$$$$:  143-block 14
    $$$$$:  143-block 15
call   32 never executed
    $$$$$:  143-block 16
    $$$$$:  143-block 17
call   33 never executed
    $$$$$:  143-block 18
    $$$$$:  143-block 19
call   34 never executed
        9:  144:}
        1:  144-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  144-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  144-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  144-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  144-block  4
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:  144-block  5
call   16 returned 1
call   17 returned 1
branch 18 taken 1 (fallthrough)
branch 19 taken 0 (throw)
        1:  144-block  6
call   20 returned 1
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0 (throw)
        1:  144-block  7
call   24 returned 1
call   25 returned 1
branch 26 taken 1 (fallthrough)
branch 27 taken 0 (throw)
        1:  144-block  8
        1:  144-block  9
call   28 returned 1
call   29 returned 1
call   30 returned 1
call   31 returned 1
call   32 returned 1
call   33 returned 1
call   34 returned 1
branch 35 taken 1 (fallthrough)
branch 36 taken 0 (throw)
        1:  144-block 10
call   37 returned 1
branch 38 taken 1 (fallthrough)
branch 39 taken 0 (throw)
        1:  144-block 11
call   40 returned 1
call   41 returned 1
branch 42 taken 1 (fallthrough)
branch 43 taken 0 (throw)
        1:  144-block 12
call   44 returned 1
call   45 returned 1
branch 46 taken 1 (fallthrough)
branch 47 taken 0 (throw)
        1:  144-block 13
        1:  144-block 14
call   48 returned 1
call   49 returned 1
call   50 returned 1
call   51 returned 1
call   52 returned 1
branch 53 taken 1 (fallthrough)
branch 54 taken 0 (throw)
        1:  144-block 15
call   55 returned 1
call   56 returned 1
branch 57 taken 1 (fallthrough)
branch 58 taken 0 (throw)
        1:  144-block 16
        1:  144-block 17
call   59 returned 1
call   60 returned 1
call   61 returned 1
branch 62 taken 1 (fallthrough)
branch 63 taken 0 (throw)
        1:  144-block 18
call   64 returned 1
branch 65 taken 1 (fallthrough)
branch 66 taken 0 (throw)
        1:  144-block 19
call   67 returned 1
branch 68 taken 1 (fallthrough)
branch 69 taken 0 (throw)
        1:  144-block 20
call   70 returned 1
call   71 returned 1
branch 72 taken 1 (fallthrough)
branch 73 taken 0 (throw)
        1:  144-block 21
        1:  144-block 22
call   74 returned 1
branch 75 taken 1 (fallthrough)
branch 76 taken 0 (throw)
        1:  144-block 23
call   77 returned 1
branch 78 taken 1 (fallthrough)
branch 79 taken 0 (throw)
        1:  144-block 24
        1:  144-block 25
call   80 returned 1
        2:  144-block 26
branch 81 taken 1 (fallthrough)
branch 82 taken 1
        1:  144-block 27
call   83 returned 1
call   84 returned 1
branch 85 taken 1 (fallthrough)
branch 86 taken 0 (throw)
        1:  144-block 28
call   87 returned 1
branch 88 taken 1 (fallthrough)
branch 89 taken 0
        1:  144-block 29
        1:  144-block 30
call   90 returned 1
branch 91 taken 1 (fallthrough)
branch 92 taken 0
        1:  144-block 31
        1:  144-block 32
call   93 returned 1
branch 94 taken 1 (fallthrough)
branch 95 taken 0
        1:  144-block 33
        1:  144-block 34
call   96 returned 1
branch 97 taken 1 (fallthrough)
branch 98 taken 0
        1:  144-block 35
        1:  144-block 36
call   99 returned 1
branch 100 taken 1 (fallthrough)
branch 101 taken 0
        1:  144-block 37
        1:  144-block 38
call   102 returned 1
branch 103 taken 1 (fallthrough)
branch 104 taken 0
    $$$$$:  144-block 39
call   105 never executed
    $$$$$:  144-block 40
    $$$$$:  144-block 41
    $$$$$:  144-block 42
call   106 never executed
    $$$$$:  144-block 43
    $$$$$:  144-block 44
    $$$$$:  144-block 45
call   107 never executed
    $$$$$:  144-block 46
    $$$$$:  144-block 47
    $$$$$:  144-block 48
call   108 never executed
    $$$$$:  144-block 49
    $$$$$:  144-block 50
    $$$$$:  144-block 51
call   109 never executed
    $$$$$:  144-block 52
    $$$$$:  144-block 53
call   110 never executed
    $$$$$:  144-block 54
    $$$$$:  144-block 55
branch 111 never executed (fallthrough)
branch 112 never executed
    $$$$$:  144-block 56
    $$$$$:  144-block 57
branch 113 never executed (fallthrough)
branch 114 never executed
    $$$$$:  144-block 58
call   115 never executed
    $$$$$:  144-block 59
call   116 never executed
    $$$$$:  144-block 60
    $$$$$:  144-block 61
    $$$$$:  144-block 62
call   117 never executed
    $$$$$:  144-block 63
    $$$$$:  144-block 64
call   118 never executed
    $$$$$:  144-block 65
    $$$$$:  144-block 66
branch 119 never executed (fallthrough)
branch 120 never executed
    $$$$$:  144-block 67
    $$$$$:  144-block 68
branch 121 never executed (fallthrough)
branch 122 never executed
    $$$$$:  144-block 69
call   123 never executed
    $$$$$:  144-block 70
call   124 never executed
    $$$$$:  144-block 71
    $$$$$:  144-block 72
    $$$$$:  144-block 73
call   125 never executed
    $$$$$:  144-block 74
    $$$$$:  144-block 75
    $$$$$:  144-block 76
branch 126 never executed (fallthrough)
branch 127 never executed
    $$$$$:  144-block 77
    $$$$$:  144-block 78
branch 128 never executed (fallthrough)
branch 129 never executed
    $$$$$:  144-block 79
call   130 never executed
    $$$$$:  144-block 80
call   131 never executed
    $$$$$:  144-block 81
    $$$$$:  144-block 82
branch 132 never executed (fallthrough)
branch 133 never executed
    $$$$$:  144-block 83
call   134 never executed
    $$$$$:  144-block 84
    $$$$$:  144-block 85
    $$$$$:  144-block 86
branch 135 never executed (fallthrough)
branch 136 never executed
    $$$$$:  144-block 87
    $$$$$:  144-block 88
branch 137 never executed (fallthrough)
branch 138 never executed
    $$$$$:  144-block 89
call   139 never executed
    $$$$$:  144-block 90
    $$$$$:  144-block 91
    $$$$$:  144-block 92
branch 140 never executed (fallthrough)
branch 141 never executed
    $$$$$:  144-block 93
    $$$$$:  144-block 94
branch 142 never executed (fallthrough)
branch 143 never executed
    $$$$$:  144-block 95
call   144 never executed
    $$$$$:  144-block 96
call   145 never executed
    $$$$$:  144-block 97
call   146 never executed
    $$$$$:  144-block 98
call   147 never executed
    $$$$$:  144-block 99
call   148 never executed
    $$$$$:  144-block 100
call   149 never executed
    $$$$$:  144-block 101
call   150 never executed
------------------
        -:  145:
        4:  146:TEST(ParserTest, ParsesIfSatement) {
        -:  147:    std::vector<Token> tokenLine1 = {
        -:  148:        Token(TokenType::KEYWORD, dummyPos, "if"),
        -:  149:        Token(TokenType::OPENPAREN, dummyPos),
    #####:  150:        Token(TokenType::INT, dummyPos, 3),
        -:  151:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:  152:        Token(TokenType::OPENBRACE, dummyPos),
        -:  153:        Token(TokenType::EOL, dummyPos)
        8:  154:    };
        -:  155:    std::vector<Token> tokenLine2 = {
    #####:  156:        Token(TokenType::INT, dummyPos, 1),
        -:  157:        Token(TokenType::PLUS, dummyPos),
    #####:  158:        Token(TokenType::INT, dummyPos, 2),
        -:  159:        Token(TokenType::EOL, dummyPos)
        6:  160:    };
        -:  161:    std::vector<Token> tokenLine3 = {
        -:  162:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  163:        Token(TokenType::EOL, dummyPos)
        4:  164:    };
        -:  165:    std::vector<Token> tokenLine4 = {
        -:  166:        Token(TokenType::KEYWORD, dummyPos, "else"),
        -:  167:        Token(TokenType::OPENBRACE, dummyPos),
        -:  168:        Token(TokenType::EOL, dummyPos)
        5:  169:    };
        -:  170:    std::vector<Token> tokenLine5 = {
    #####:  171:        Token(TokenType::INT, dummyPos, 3),
        -:  172:        Token(TokenType::MINUS, dummyPos),
    #####:  173:        Token(TokenType::INT, dummyPos, 4),
        -:  174:        Token(TokenType::EOL, dummyPos)
        6:  175:    };
        -:  176:    std::vector<Token> tokenLine6 = {
        -:  177:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  178:        Token(TokenType::EOL, dummyPos)
        4:  179:    };
        -:  180:    const std::map<int, std::vector<Token>> tokenMap =
        -:  181:        {
    #####:  182:        {0, tokenLine1},
    #####:  183:        {1, tokenLine2},
    #####:  184:        {2, tokenLine3},
    #####:  185:        {3, tokenLine4},
    #####:  186:        {4, tokenLine5},
    #####:  187:        {5, tokenLine6},
    #####:  188:        {6, {Token(TokenType::EOF_, dummyPos)} }
       10:  189:        };
        -:  190:
        1:  191:    Parser parser(tokenMap);
        1:  192:    const std::unique_ptr<Node> node = parser.parse();
        -:  193:    // Assert: Check the returned Node
       1*:  194:    ASSERT_NE(node, nullptr);
       1*:  195:    EXPECT_EQ(node->getType(), NodeType::IfStmt);
       1*:  196:    auto* ifStatement = dynamic_cast<IfStmt*>(node.get());
       1*:  197:    ASSERT_NE(ifStatement, nullptr);
        -:  198:    // Check the condition node
        1:  199:    const Node* condition = ifStatement->getComparison().get();
       1*:  200:    ASSERT_NE(condition, nullptr);
       1*:  201:    EXPECT_EQ(condition->getType(), NodeType::Number);
       1*:  202:    const auto* conditionNumber = dynamic_cast<const Number*>(condition);
       1*:  203:    ASSERT_NE(conditionNumber, nullptr);
       1*:  204:    EXPECT_EQ(std::get<int>(conditionNumber->getToken().getValue()), 3);
        -:  205:    // Check the true branch (then block)
        1:  206:    const auto& trueBody = ifStatement->getIfBlock();
       1*:  207:    ASSERT_EQ(trueBody.size(), 1);  // One expression inside the true block
        -:  208:
        1:  209:    const Node* trueExpr = trueBody.at(0).get();
       1*:  210:    ASSERT_NE(trueExpr, nullptr);
       1*:  211:    EXPECT_EQ(trueExpr->getType(), NodeType::BinaryOperator);
        -:  212:
       1*:  213:    const auto* trueBinOp = dynamic_cast<const BinaryOperator*>(trueExpr);
       1*:  214:    ASSERT_NE(trueBinOp, nullptr);
        1:  215:    const Node* leftOperand = trueBinOp->getLeftNode().get();
        1:  216:    const Node* rightOperand = trueBinOp->getRightNode().get();
       1*:  217:    ASSERT_NE(leftOperand, nullptr);
       1*:  218:    ASSERT_NE(rightOperand, nullptr);
        -:  219:
       1*:  220:    EXPECT_EQ(leftOperand->getType(), NodeType::Number);
       1*:  221:    EXPECT_EQ(rightOperand->getType(), NodeType::Number);
        -:  222:
       1*:  223:    const auto* leftNum = dynamic_cast<const Number*>(leftOperand);
       1*:  224:    const auto* rightNum = dynamic_cast<const Number*>(rightOperand);
       1*:  225:    ASSERT_NE(leftNum, nullptr);
       1*:  226:    ASSERT_NE(rightNum, nullptr);
       1*:  227:    EXPECT_EQ(std::get<int>(leftNum->getToken().getValue()), 1);
       1*:  228:    EXPECT_EQ(std::get<int>(rightNum->getToken().getValue()), 2);
        -:  229:
        -:  230:    // Check that the binary operator is PLUS
       1*:  231:    EXPECT_EQ(trueBinOp->getOperatorNode().getToken().getType(), TokenType::PLUS);
        -:  232:
        -:  233:    // Check the false branch (else block)
        1:  234:    const auto& falseBody = ifStatement->getElseBlock();
       1*:  235:    ASSERT_EQ(falseBody.size(), 1);  // One expression inside the else block
        -:  236:
        1:  237:    const Node* falseExpr = falseBody.at(0).get();
       1*:  238:    ASSERT_NE(falseExpr, nullptr);
       1*:  239:    EXPECT_EQ(falseExpr->getType(), NodeType::BinaryOperator);
        -:  240:
       1*:  241:    const auto* falseBinOp = dynamic_cast<const BinaryOperator*>(falseExpr);
       1*:  242:    ASSERT_NE(falseBinOp, nullptr);
        -:  243:
        1:  244:    const Node* falseLeft = falseBinOp->getLeftNode().get();
        1:  245:    const Node* falseRight = falseBinOp->getRightNode().get();
       1*:  246:    ASSERT_NE(falseLeft, nullptr);
       1*:  247:    ASSERT_NE(falseRight, nullptr);
        -:  248:
       1*:  249:    EXPECT_EQ(falseLeft->getType(), NodeType::Number);
       1*:  250:    EXPECT_EQ(falseRight->getType(), NodeType::Number);
        -:  251:
       1*:  252:    const auto* falseLeftNum = dynamic_cast<const Number*>(falseLeft);
       1*:  253:    const auto* falseRightNum = dynamic_cast<const Number*>(falseRight);
       1*:  254:    ASSERT_NE(falseLeftNum, nullptr);
       1*:  255:    ASSERT_NE(falseRightNum, nullptr);
       1*:  256:    EXPECT_EQ(std::get<int>(falseLeftNum->getToken().getValue()), 3);
       1*:  257:    EXPECT_EQ(std::get<int>(falseRightNum->getToken().getValue()), 4);
        -:  258:
        -:  259:    // Check that the binary operator is MINUS
       1*:  260:    EXPECT_EQ(falseBinOp->getOperatorNode().getToken().getType(), TokenType::MINUS);
        -:  261:
       12:  262:}
------------------
_ZN32ParserTest_ParsesIfSatement_TestC1Ev:
function _ZN32ParserTest_ParsesIfSatement_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  146:TEST(ParserTest, ParsesIfSatement) {
        1:  146-block  0
call    0 returned 1
------------------
_ZN32ParserTest_ParsesIfSatement_TestD0Ev:
function _ZN32ParserTest_ParsesIfSatement_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  146:TEST(ParserTest, ParsesIfSatement) {
        1:  146-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN32ParserTest_ParsesIfSatement_TestD1Ev:
function _ZN32ParserTest_ParsesIfSatement_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  146:TEST(ParserTest, ParsesIfSatement) {
        1:  146-block  0
call    0 returned 1
------------------
_ZN32ParserTest_ParsesIfSatement_Test8TestBodyEv:
function _ZN32ParserTest_ParsesIfSatement_Test8TestBodyEv called 1 returned 100% blocks executed 33%
        1:  146:TEST(ParserTest, ParsesIfSatement) {
        -:  147:    std::vector<Token> tokenLine1 = {
        -:  148:        Token(TokenType::KEYWORD, dummyPos, "if"),
        -:  149:        Token(TokenType::OPENPAREN, dummyPos),
    #####:  150:        Token(TokenType::INT, dummyPos, 3),
    $$$$$:  150-block  0
        -:  151:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:  152:        Token(TokenType::OPENBRACE, dummyPos),
        -:  153:        Token(TokenType::EOL, dummyPos)
        8:  154:    };
        1:  154-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        7:  154-block  1
branch  3 taken 6 (fallthrough)
branch  4 taken 1
        6:  154-block  2
call    5 returned 6
    $$$$$:  154-block  3
    $$$$$:  154-block  4
    $$$$$:  154-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  154-block  6
call    8 never executed
    $$$$$:  154-block  7
        -:  155:    std::vector<Token> tokenLine2 = {
    #####:  156:        Token(TokenType::INT, dummyPos, 1),
    $$$$$:  156-block  0
        -:  157:        Token(TokenType::PLUS, dummyPos),
    #####:  158:        Token(TokenType::INT, dummyPos, 2),
    $$$$$:  158-block  0
        -:  159:        Token(TokenType::EOL, dummyPos)
        6:  160:    };
        1:  160-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  160-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  160-block  2
call    5 returned 4
    $$$$$:  160-block  3
    $$$$$:  160-block  4
    $$$$$:  160-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  160-block  6
call    8 never executed
    $$$$$:  160-block  7
        -:  161:    std::vector<Token> tokenLine3 = {
        -:  162:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  163:        Token(TokenType::EOL, dummyPos)
        4:  164:    };
        1:  164-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:  164-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:  164-block  2
call    5 returned 2
    $$$$$:  164-block  3
    $$$$$:  164-block  4
    $$$$$:  164-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  164-block  6
call    8 never executed
    $$$$$:  164-block  7
        -:  165:    std::vector<Token> tokenLine4 = {
        -:  166:        Token(TokenType::KEYWORD, dummyPos, "else"),
        -:  167:        Token(TokenType::OPENBRACE, dummyPos),
        -:  168:        Token(TokenType::EOL, dummyPos)
        5:  169:    };
        1:  169-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        4:  169-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 1
        3:  169-block  2
call    5 returned 3
    $$$$$:  169-block  3
    $$$$$:  169-block  4
    $$$$$:  169-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  169-block  6
call    8 never executed
    $$$$$:  169-block  7
        -:  170:    std::vector<Token> tokenLine5 = {
    #####:  171:        Token(TokenType::INT, dummyPos, 3),
    $$$$$:  171-block  0
        -:  172:        Token(TokenType::MINUS, dummyPos),
    #####:  173:        Token(TokenType::INT, dummyPos, 4),
    $$$$$:  173-block  0
        -:  174:        Token(TokenType::EOL, dummyPos)
        6:  175:    };
        1:  175-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  175-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  175-block  2
call    5 returned 4
    $$$$$:  175-block  3
    $$$$$:  175-block  4
    $$$$$:  175-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  175-block  6
call    8 never executed
    $$$$$:  175-block  7
        -:  176:    std::vector<Token> tokenLine6 = {
        -:  177:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  178:        Token(TokenType::EOL, dummyPos)
        4:  179:    };
        1:  179-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:  179-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:  179-block  2
call    5 returned 2
    $$$$$:  179-block  3
    $$$$$:  179-block  4
    $$$$$:  179-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  179-block  6
call    8 never executed
    $$$$$:  179-block  7
        -:  180:    const std::map<int, std::vector<Token>> tokenMap =
        -:  181:        {
    #####:  182:        {0, tokenLine1},
    $$$$$:  182-block  0
    #####:  183:        {1, tokenLine2},
    $$$$$:  183-block  0
    #####:  184:        {2, tokenLine3},
    $$$$$:  184-block  0
    #####:  185:        {3, tokenLine4},
    $$$$$:  185-block  0
    #####:  186:        {4, tokenLine5},
    $$$$$:  186-block  0
    #####:  187:        {5, tokenLine6},
    $$$$$:  187-block  0
    #####:  188:        {6, {Token(TokenType::EOF_, dummyPos)} }
    $$$$$:  188-block  0
       10:  189:        };
        1:  189-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        8:  189-block  1
branch  3 taken 7 (fallthrough)
branch  4 taken 1
        7:  189-block  2
call    5 returned 7
        1:  189-block  3
call    6 returned 1
    $$$$$:  189-block  4
    $$$$$:  189-block  5
    $$$$$:  189-block  6
    $$$$$:  189-block  7
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$:  189-block  8
call    9 never executed
    $$$$$:  189-block  9
    $$$$$:  189-block 10
call   10 never executed
    $$$$$:  189-block 11
        -:  190:
        1:  191:    Parser parser(tokenMap);
        1:  191-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  191-block  1
call    3 returned 1
    $$$$$:  191-block  2
call    4 never executed
    $$$$$:  191-block  3
        1:  192:    const std::unique_ptr<Node> node = parser.parse();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  193:    // Assert: Check the returned Node
       1*:  194:    ASSERT_NE(node, nullptr);
        1:  194-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  194-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  194-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  194-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  194-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  194-block  5
call   16 never executed
call   17 never executed
        1:  194-block  6
        1:  194-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  194-block  8
    $$$$$:  194-block  9
    $$$$$:  194-block 10
call   21 never executed
    $$$$$:  194-block 11
    $$$$$:  194-block 12
call   22 never executed
    $$$$$:  194-block 13
    $$$$$:  194-block 14
call   23 never executed
       1*:  195:    EXPECT_EQ(node->getType(), NodeType::IfStmt);
        1:  195-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  195-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  195-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:  195-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  195-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  195-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  195-block  6
call   20 never executed
call   21 never executed
        1:  195-block  7
call   22 returned 1
    $$$$$:  195-block  8
    $$$$$:  195-block  9
    $$$$$:  195-block 10
call   23 never executed
    $$$$$:  195-block 11
    $$$$$:  195-block 12
call   24 never executed
    $$$$$:  195-block 13
    $$$$$:  195-block 14
call   25 never executed
       1*:  196:    auto* ifStatement = dynamic_cast<IfStmt*>(node.get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  196-block  0
    %%%%%:  196-block  1
       1*:  197:    ASSERT_NE(ifStatement, nullptr);
        1:  197-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  197-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  197-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  197-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  197-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  197-block  5
call   16 never executed
call   17 never executed
        1:  197-block  6
        1:  197-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  197-block  8
    $$$$$:  197-block  9
    $$$$$:  197-block 10
call   21 never executed
    $$$$$:  197-block 11
    $$$$$:  197-block 12
call   22 never executed
    $$$$$:  197-block 13
    $$$$$:  197-block 14
call   23 never executed
        -:  198:    // Check the condition node
        1:  199:    const Node* condition = ifStatement->getComparison().get();
        1:  199-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  199-block  1
call    3 returned 1
       1*:  200:    ASSERT_NE(condition, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  200-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  200-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  200-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  200-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  200-block  4
call   16 never executed
call   17 never executed
        1:  200-block  5
        1:  200-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  200-block  7
    $$$$$:  200-block  8
    $$$$$:  200-block  9
call   21 never executed
    $$$$$:  200-block 10
    $$$$$:  200-block 11
call   22 never executed
    $$$$$:  200-block 12
    $$$$$:  200-block 13
call   23 never executed
       1*:  201:    EXPECT_EQ(condition->getType(), NodeType::Number);
        1:  201-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  201-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  201-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  201-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  201-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  201-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  201-block  6
call   19 never executed
call   20 never executed
        1:  201-block  7
call   21 returned 1
    $$$$$:  201-block  8
    $$$$$:  201-block  9
    $$$$$:  201-block 10
call   22 never executed
    $$$$$:  201-block 11
    $$$$$:  201-block 12
call   23 never executed
    $$$$$:  201-block 13
    $$$$$:  201-block 14
call   24 never executed
       1*:  202:    const auto* conditionNumber = dynamic_cast<const Number*>(condition);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  202-block  0
    %%%%%:  202-block  1
       1*:  203:    ASSERT_NE(conditionNumber, nullptr);
        1:  203-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  203-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  203-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  203-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  203-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  203-block  5
call   16 never executed
call   17 never executed
        1:  203-block  6
        1:  203-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  203-block  8
    $$$$$:  203-block  9
    $$$$$:  203-block 10
call   21 never executed
    $$$$$:  203-block 11
    $$$$$:  203-block 12
call   22 never executed
    $$$$$:  203-block 13
    $$$$$:  203-block 14
call   23 never executed
       1*:  204:    EXPECT_EQ(std::get<int>(conditionNumber->getToken().getValue()), 3);
        1:  204-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  204-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  204-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  204-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  204-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  204-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  204-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  204-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  204-block  8
call   27 never executed
call   28 never executed
        1:  204-block  9
call   29 returned 1
    $$$$$:  204-block 10
call   30 never executed
    $$$$$:  204-block 11
call   31 never executed
    $$$$$:  204-block 12
    $$$$$:  204-block 13
    $$$$$:  204-block 14
    $$$$$:  204-block 15
call   32 never executed
    $$$$$:  204-block 16
    $$$$$:  204-block 17
call   33 never executed
    $$$$$:  204-block 18
    $$$$$:  204-block 19
call   34 never executed
        -:  205:    // Check the true branch (then block)
        1:  206:    const auto& trueBody = ifStatement->getIfBlock();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  207:    ASSERT_EQ(trueBody.size(), 1);  // One expression inside the true block
        1:  207-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  207-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  207-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  207-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  207-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  207-block  5
call   17 never executed
call   18 never executed
        1:  207-block  6
        1:  207-block  7
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0
        1:  207-block  8
    $$$$$:  207-block  9
    $$$$$:  207-block 10
    $$$$$:  207-block 11
call   22 never executed
    $$$$$:  207-block 12
    $$$$$:  207-block 13
call   23 never executed
    $$$$$:  207-block 14
    $$$$$:  207-block 15
call   24 never executed
        -:  208:
        1:  209:    const Node* trueExpr = trueBody.at(0).get();
        1:  209-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  209-block  1
call    3 returned 1
       1*:  210:    ASSERT_NE(trueExpr, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  210-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  210-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  210-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  210-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  210-block  4
call   16 never executed
call   17 never executed
        1:  210-block  5
        1:  210-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  210-block  7
    $$$$$:  210-block  8
    $$$$$:  210-block  9
call   21 never executed
    $$$$$:  210-block 10
    $$$$$:  210-block 11
call   22 never executed
    $$$$$:  210-block 12
    $$$$$:  210-block 13
call   23 never executed
       1*:  211:    EXPECT_EQ(trueExpr->getType(), NodeType::BinaryOperator);
        1:  211-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  211-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  211-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  211-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  211-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  211-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  211-block  6
call   19 never executed
call   20 never executed
        1:  211-block  7
call   21 returned 1
    $$$$$:  211-block  8
    $$$$$:  211-block  9
    $$$$$:  211-block 10
call   22 never executed
    $$$$$:  211-block 11
    $$$$$:  211-block 12
call   23 never executed
    $$$$$:  211-block 13
    $$$$$:  211-block 14
call   24 never executed
        -:  212:
       1*:  213:    const auto* trueBinOp = dynamic_cast<const BinaryOperator*>(trueExpr);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  213-block  0
    %%%%%:  213-block  1
       1*:  214:    ASSERT_NE(trueBinOp, nullptr);
        1:  214-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  214-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  214-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  214-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  214-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  214-block  5
call   16 never executed
call   17 never executed
        1:  214-block  6
        1:  214-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  214-block  8
    $$$$$:  214-block  9
    $$$$$:  214-block 10
call   21 never executed
    $$$$$:  214-block 11
    $$$$$:  214-block 12
call   22 never executed
    $$$$$:  214-block 13
    $$$$$:  214-block 14
call   23 never executed
        1:  215:    const Node* leftOperand = trueBinOp->getLeftNode().get();
        1:  215-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  215-block  1
call    3 returned 1
        1:  216:    const Node* rightOperand = trueBinOp->getRightNode().get();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  216-block  0
call    3 returned 1
       1*:  217:    ASSERT_NE(leftOperand, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  217-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  217-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  217-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  217-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  217-block  4
call   16 never executed
call   17 never executed
        1:  217-block  5
        1:  217-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  217-block  7
    $$$$$:  217-block  8
    $$$$$:  217-block  9
call   21 never executed
    $$$$$:  217-block 10
    $$$$$:  217-block 11
call   22 never executed
    $$$$$:  217-block 12
    $$$$$:  217-block 13
call   23 never executed
       1*:  218:    ASSERT_NE(rightOperand, nullptr);
        1:  218-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  218-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  218-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  218-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  218-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  218-block  5
call   16 never executed
call   17 never executed
        1:  218-block  6
        1:  218-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  218-block  8
    $$$$$:  218-block  9
    $$$$$:  218-block 10
call   21 never executed
    $$$$$:  218-block 11
    $$$$$:  218-block 12
call   22 never executed
    $$$$$:  218-block 13
    $$$$$:  218-block 14
call   23 never executed
        -:  219:
       1*:  220:    EXPECT_EQ(leftOperand->getType(), NodeType::Number);
        1:  220-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  220-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  220-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  220-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  220-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  220-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  220-block  6
call   19 never executed
call   20 never executed
        1:  220-block  7
call   21 returned 1
    $$$$$:  220-block  8
    $$$$$:  220-block  9
    $$$$$:  220-block 10
call   22 never executed
    $$$$$:  220-block 11
    $$$$$:  220-block 12
call   23 never executed
    $$$$$:  220-block 13
    $$$$$:  220-block 14
call   24 never executed
       1*:  221:    EXPECT_EQ(rightOperand->getType(), NodeType::Number);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  221-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  221-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  221-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  221-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  221-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  221-block  5
call   19 never executed
call   20 never executed
        1:  221-block  6
call   21 returned 1
    $$$$$:  221-block  7
    $$$$$:  221-block  8
    $$$$$:  221-block  9
call   22 never executed
    $$$$$:  221-block 10
    $$$$$:  221-block 11
call   23 never executed
    $$$$$:  221-block 12
    $$$$$:  221-block 13
call   24 never executed
        -:  222:
       1*:  223:    const auto* leftNum = dynamic_cast<const Number*>(leftOperand);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  223-block  0
    %%%%%:  223-block  1
       1*:  224:    const auto* rightNum = dynamic_cast<const Number*>(rightOperand);
        1:  224-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  224-block  1
    %%%%%:  224-block  2
       1*:  225:    ASSERT_NE(leftNum, nullptr);
        1:  225-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  225-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  225-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  225-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  225-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  225-block  5
call   16 never executed
call   17 never executed
        1:  225-block  6
        1:  225-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  225-block  8
    $$$$$:  225-block  9
    $$$$$:  225-block 10
call   21 never executed
    $$$$$:  225-block 11
    $$$$$:  225-block 12
call   22 never executed
    $$$$$:  225-block 13
    $$$$$:  225-block 14
call   23 never executed
       1*:  226:    ASSERT_NE(rightNum, nullptr);
        1:  226-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  226-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  226-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  226-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  226-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  226-block  5
call   16 never executed
call   17 never executed
        1:  226-block  6
        1:  226-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  226-block  8
    $$$$$:  226-block  9
    $$$$$:  226-block 10
call   21 never executed
    $$$$$:  226-block 11
    $$$$$:  226-block 12
call   22 never executed
    $$$$$:  226-block 13
    $$$$$:  226-block 14
call   23 never executed
       1*:  227:    EXPECT_EQ(std::get<int>(leftNum->getToken().getValue()), 1);
        1:  227-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  227-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  227-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  227-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  227-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  227-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  227-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  227-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  227-block  8
call   27 never executed
call   28 never executed
        1:  227-block  9
call   29 returned 1
    $$$$$:  227-block 10
call   30 never executed
    $$$$$:  227-block 11
call   31 never executed
    $$$$$:  227-block 12
    $$$$$:  227-block 13
    $$$$$:  227-block 14
    $$$$$:  227-block 15
call   32 never executed
    $$$$$:  227-block 16
    $$$$$:  227-block 17
call   33 never executed
    $$$$$:  227-block 18
    $$$$$:  227-block 19
call   34 never executed
       1*:  228:    EXPECT_EQ(std::get<int>(rightNum->getToken().getValue()), 2);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  228-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  228-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  228-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  228-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  228-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  228-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  228-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  228-block  7
call   27 never executed
call   28 never executed
        1:  228-block  8
call   29 returned 1
    $$$$$:  228-block  9
call   30 never executed
    $$$$$:  228-block 10
call   31 never executed
    $$$$$:  228-block 11
    $$$$$:  228-block 12
    $$$$$:  228-block 13
    $$$$$:  228-block 14
call   32 never executed
    $$$$$:  228-block 15
    $$$$$:  228-block 16
call   33 never executed
    $$$$$:  228-block 17
    $$$$$:  228-block 18
call   34 never executed
        -:  229:
        -:  230:    // Check that the binary operator is PLUS
       1*:  231:    EXPECT_EQ(trueBinOp->getOperatorNode().getToken().getType(), TokenType::PLUS);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  231-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  231-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  231-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  231-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  231-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  231-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  231-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  231-block  7
call   27 never executed
call   28 never executed
        1:  231-block  8
call   29 returned 1
    $$$$$:  231-block  9
call   30 never executed
    $$$$$:  231-block 10
call   31 never executed
    $$$$$:  231-block 11
    $$$$$:  231-block 12
    $$$$$:  231-block 13
    $$$$$:  231-block 14
    $$$$$:  231-block 15
call   32 never executed
    $$$$$:  231-block 16
    $$$$$:  231-block 17
call   33 never executed
    $$$$$:  231-block 18
    $$$$$:  231-block 19
call   34 never executed
        -:  232:
        -:  233:    // Check the false branch (else block)
        1:  234:    const auto& falseBody = ifStatement->getElseBlock();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  235:    ASSERT_EQ(falseBody.size(), 1);  // One expression inside the else block
        1:  235-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  235-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  235-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  235-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  235-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  235-block  5
call   17 never executed
call   18 never executed
        1:  235-block  6
        1:  235-block  7
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0
        1:  235-block  8
    $$$$$:  235-block  9
    $$$$$:  235-block 10
    $$$$$:  235-block 11
call   22 never executed
    $$$$$:  235-block 12
    $$$$$:  235-block 13
call   23 never executed
    $$$$$:  235-block 14
    $$$$$:  235-block 15
call   24 never executed
        -:  236:
        1:  237:    const Node* falseExpr = falseBody.at(0).get();
        1:  237-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  237-block  1
call    3 returned 1
       1*:  238:    ASSERT_NE(falseExpr, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  238-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  238-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  238-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  238-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  238-block  4
call   16 never executed
call   17 never executed
        1:  238-block  5
        1:  238-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  238-block  7
    $$$$$:  238-block  8
    $$$$$:  238-block  9
call   21 never executed
    $$$$$:  238-block 10
    $$$$$:  238-block 11
call   22 never executed
    $$$$$:  238-block 12
    $$$$$:  238-block 13
call   23 never executed
       1*:  239:    EXPECT_EQ(falseExpr->getType(), NodeType::BinaryOperator);
        1:  239-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  239-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  239-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  239-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  239-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  239-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  239-block  6
call   19 never executed
call   20 never executed
        1:  239-block  7
call   21 returned 1
    $$$$$:  239-block  8
    $$$$$:  239-block  9
    $$$$$:  239-block 10
call   22 never executed
    $$$$$:  239-block 11
    $$$$$:  239-block 12
call   23 never executed
    $$$$$:  239-block 13
    $$$$$:  239-block 14
call   24 never executed
        -:  240:
       1*:  241:    const auto* falseBinOp = dynamic_cast<const BinaryOperator*>(falseExpr);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  241-block  0
    %%%%%:  241-block  1
       1*:  242:    ASSERT_NE(falseBinOp, nullptr);
        1:  242-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  242-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  242-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  242-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  242-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  242-block  5
call   16 never executed
call   17 never executed
        1:  242-block  6
        1:  242-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  242-block  8
    $$$$$:  242-block  9
    $$$$$:  242-block 10
call   21 never executed
    $$$$$:  242-block 11
    $$$$$:  242-block 12
call   22 never executed
    $$$$$:  242-block 13
    $$$$$:  242-block 14
call   23 never executed
        -:  243:
        1:  244:    const Node* falseLeft = falseBinOp->getLeftNode().get();
        1:  244-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  244-block  1
call    3 returned 1
        1:  245:    const Node* falseRight = falseBinOp->getRightNode().get();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  245-block  0
call    3 returned 1
       1*:  246:    ASSERT_NE(falseLeft, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  246-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  246-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  246-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  246-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  246-block  4
call   16 never executed
call   17 never executed
        1:  246-block  5
        1:  246-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  246-block  7
    $$$$$:  246-block  8
    $$$$$:  246-block  9
call   21 never executed
    $$$$$:  246-block 10
    $$$$$:  246-block 11
call   22 never executed
    $$$$$:  246-block 12
    $$$$$:  246-block 13
call   23 never executed
       1*:  247:    ASSERT_NE(falseRight, nullptr);
        1:  247-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  247-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  247-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  247-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  247-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  247-block  5
call   16 never executed
call   17 never executed
        1:  247-block  6
        1:  247-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  247-block  8
    $$$$$:  247-block  9
    $$$$$:  247-block 10
call   21 never executed
    $$$$$:  247-block 11
    $$$$$:  247-block 12
call   22 never executed
    $$$$$:  247-block 13
    $$$$$:  247-block 14
call   23 never executed
        -:  248:
       1*:  249:    EXPECT_EQ(falseLeft->getType(), NodeType::Number);
        1:  249-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  249-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  249-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  249-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  249-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  249-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  249-block  6
call   19 never executed
call   20 never executed
        1:  249-block  7
call   21 returned 1
    $$$$$:  249-block  8
    $$$$$:  249-block  9
    $$$$$:  249-block 10
call   22 never executed
    $$$$$:  249-block 11
    $$$$$:  249-block 12
call   23 never executed
    $$$$$:  249-block 13
    $$$$$:  249-block 14
call   24 never executed
       1*:  250:    EXPECT_EQ(falseRight->getType(), NodeType::Number);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  250-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  250-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  250-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  250-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  250-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  250-block  5
call   19 never executed
call   20 never executed
        1:  250-block  6
call   21 returned 1
    $$$$$:  250-block  7
    $$$$$:  250-block  8
    $$$$$:  250-block  9
call   22 never executed
    $$$$$:  250-block 10
    $$$$$:  250-block 11
call   23 never executed
    $$$$$:  250-block 12
    $$$$$:  250-block 13
call   24 never executed
        -:  251:
       1*:  252:    const auto* falseLeftNum = dynamic_cast<const Number*>(falseLeft);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  252-block  0
    %%%%%:  252-block  1
       1*:  253:    const auto* falseRightNum = dynamic_cast<const Number*>(falseRight);
        1:  253-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  253-block  1
    %%%%%:  253-block  2
       1*:  254:    ASSERT_NE(falseLeftNum, nullptr);
        1:  254-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  254-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  254-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  254-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  254-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  254-block  5
call   16 never executed
call   17 never executed
        1:  254-block  6
        1:  254-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  254-block  8
    $$$$$:  254-block  9
    $$$$$:  254-block 10
call   21 never executed
    $$$$$:  254-block 11
    $$$$$:  254-block 12
call   22 never executed
    $$$$$:  254-block 13
    $$$$$:  254-block 14
call   23 never executed
       1*:  255:    ASSERT_NE(falseRightNum, nullptr);
        1:  255-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  255-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  255-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  255-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  255-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  255-block  5
call   16 never executed
call   17 never executed
        1:  255-block  6
        1:  255-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  255-block  8
    $$$$$:  255-block  9
    $$$$$:  255-block 10
call   21 never executed
    $$$$$:  255-block 11
    $$$$$:  255-block 12
call   22 never executed
    $$$$$:  255-block 13
    $$$$$:  255-block 14
call   23 never executed
       1*:  256:    EXPECT_EQ(std::get<int>(falseLeftNum->getToken().getValue()), 3);
        1:  256-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  256-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  256-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  256-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  256-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  256-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  256-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  256-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  256-block  8
call   27 never executed
call   28 never executed
        1:  256-block  9
call   29 returned 1
    $$$$$:  256-block 10
call   30 never executed
    $$$$$:  256-block 11
call   31 never executed
    $$$$$:  256-block 12
    $$$$$:  256-block 13
    $$$$$:  256-block 14
    $$$$$:  256-block 15
call   32 never executed
    $$$$$:  256-block 16
    $$$$$:  256-block 17
call   33 never executed
    $$$$$:  256-block 18
    $$$$$:  256-block 19
call   34 never executed
       1*:  257:    EXPECT_EQ(std::get<int>(falseRightNum->getToken().getValue()), 4);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  257-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  257-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  257-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  257-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  257-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  257-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  257-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  257-block  7
call   27 never executed
call   28 never executed
        1:  257-block  8
call   29 returned 1
    $$$$$:  257-block  9
call   30 never executed
    $$$$$:  257-block 10
call   31 never executed
    $$$$$:  257-block 11
    $$$$$:  257-block 12
    $$$$$:  257-block 13
    $$$$$:  257-block 14
call   32 never executed
    $$$$$:  257-block 15
    $$$$$:  257-block 16
call   33 never executed
    $$$$$:  257-block 17
    $$$$$:  257-block 18
call   34 never executed
        -:  258:
        -:  259:    // Check that the binary operator is MINUS
       1*:  260:    EXPECT_EQ(falseBinOp->getOperatorNode().getToken().getType(), TokenType::MINUS);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  260-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  260-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  260-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  260-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  260-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  260-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  260-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  260-block  7
call   27 never executed
call   28 never executed
        1:  260-block  8
call   29 returned 1
    $$$$$:  260-block  9
call   30 never executed
    $$$$$:  260-block 10
call   31 never executed
    $$$$$:  260-block 11
    $$$$$:  260-block 12
    $$$$$:  260-block 13
    $$$$$:  260-block 14
    $$$$$:  260-block 15
call   32 never executed
    $$$$$:  260-block 16
    $$$$$:  260-block 17
call   33 never executed
    $$$$$:  260-block 18
    $$$$$:  260-block 19
call   34 never executed
        -:  261:
       12:  262:}
        1:  262-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  262-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  262-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  262-block  3
call   10 returned 1
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
        1:  262-block  4
call   14 returned 1
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1:  262-block  5
call   18 returned 1
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0 (throw)
        1:  262-block  6
call   22 returned 1
call   23 returned 1
branch 24 taken 1 (fallthrough)
branch 25 taken 0 (throw)
        1:  262-block  7
        1:  262-block  8
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
call   30 returned 1
call   31 returned 1
call   32 returned 1
call   33 returned 1
branch 34 taken 1 (fallthrough)
branch 35 taken 0 (throw)
        1:  262-block  9
call   36 returned 1
call   37 returned 1
branch 38 taken 1 (fallthrough)
branch 39 taken 0 (throw)
        1:  262-block 10
call   40 returned 1
call   41 returned 1
branch 42 taken 1 (fallthrough)
branch 43 taken 0 (throw)
        1:  262-block 11
call   44 returned 1
call   45 returned 1
branch 46 taken 1 (fallthrough)
branch 47 taken 0 (throw)
        1:  262-block 12
        1:  262-block 13
call   48 returned 1
call   49 returned 1
call   50 returned 1
call   51 returned 1
call   52 returned 1
call   53 returned 1
branch 54 taken 1 (fallthrough)
branch 55 taken 0 (throw)
        1:  262-block 14
call   56 returned 1
call   57 returned 1
branch 58 taken 1 (fallthrough)
branch 59 taken 0 (throw)
        1:  262-block 15
        1:  262-block 16
call   60 returned 1
call   61 returned 1
call   62 returned 1
branch 63 taken 1 (fallthrough)
branch 64 taken 0 (throw)
        1:  262-block 17
call   65 returned 1
branch 66 taken 1 (fallthrough)
branch 67 taken 0 (throw)
        1:  262-block 18
call   68 returned 1
call   69 returned 1
branch 70 taken 1 (fallthrough)
branch 71 taken 0 (throw)
        1:  262-block 19
call   72 returned 1
call   73 returned 1
branch 74 taken 1 (fallthrough)
branch 75 taken 0 (throw)
        1:  262-block 20
        1:  262-block 21
call   76 returned 1
call   77 returned 1
call   78 returned 1
call   79 returned 1
call   80 returned 1
branch 81 taken 1 (fallthrough)
branch 82 taken 0 (throw)
        1:  262-block 22
call   83 returned 1
call   84 returned 1
branch 85 taken 1 (fallthrough)
branch 86 taken 0 (throw)
        1:  262-block 23
call   87 returned 1
call   88 returned 1
branch 89 taken 1 (fallthrough)
branch 90 taken 0 (throw)
        1:  262-block 24
call   91 returned 1
call   92 returned 1
branch 93 taken 1 (fallthrough)
branch 94 taken 0 (throw)
        1:  262-block 25
        1:  262-block 26
call   95 returned 1
call   96 returned 1
call   97 returned 1
call   98 returned 1
call   99 returned 1
call   100 returned 1
branch 101 taken 1 (fallthrough)
branch 102 taken 0 (throw)
        1:  262-block 27
call   103 returned 1
call   104 returned 1
branch 105 taken 1 (fallthrough)
branch 106 taken 0 (throw)
        1:  262-block 28
        1:  262-block 29
call   107 returned 1
call   108 returned 1
call   109 returned 1
branch 110 taken 1 (fallthrough)
branch 111 taken 0 (throw)
        1:  262-block 30
call   112 returned 1
branch 113 taken 1 (fallthrough)
branch 114 taken 0 (throw)
        1:  262-block 31
call   115 returned 1
branch 116 taken 1 (fallthrough)
branch 117 taken 0 (throw)
        1:  262-block 32
call   118 returned 1
branch 119 taken 1 (fallthrough)
branch 120 taken 0 (throw)
        1:  262-block 33
call   121 returned 1
branch 122 taken 1 (fallthrough)
branch 123 taken 0 (throw)
        1:  262-block 34
call   124 returned 1
branch 125 taken 1 (fallthrough)
branch 126 taken 0 (throw)
        1:  262-block 35
call   127 returned 1
call   128 returned 1
branch 129 taken 1 (fallthrough)
branch 130 taken 0 (throw)
        1:  262-block 36
        1:  262-block 37
call   131 returned 1
branch 132 taken 1 (fallthrough)
branch 133 taken 0 (throw)
        1:  262-block 38
call   134 returned 1
branch 135 taken 1 (fallthrough)
branch 136 taken 0 (throw)
        1:  262-block 39
        1:  262-block 40
call   137 returned 1
        2:  262-block 41
branch 138 taken 1 (fallthrough)
branch 139 taken 1
        1:  262-block 42
call   140 returned 1
call   141 returned 1
branch 142 taken 1 (fallthrough)
branch 143 taken 0 (throw)
        1:  262-block 43
call   144 returned 1
branch 145 taken 1 (fallthrough)
branch 146 taken 0
        1:  262-block 44
        1:  262-block 45
call   147 returned 1
branch 148 taken 1 (fallthrough)
branch 149 taken 0
        1:  262-block 46
        1:  262-block 47
call   150 returned 1
branch 151 taken 1 (fallthrough)
branch 152 taken 0
        1:  262-block 48
        1:  262-block 49
call   153 returned 1
branch 154 taken 1 (fallthrough)
branch 155 taken 0
        1:  262-block 50
        1:  262-block 51
call   156 returned 1
branch 157 taken 1 (fallthrough)
branch 158 taken 0
        1:  262-block 52
        1:  262-block 53
call   159 returned 1
branch 160 taken 1 (fallthrough)
branch 161 taken 0
        1:  262-block 54
        1:  262-block 55
call   162 returned 1
branch 163 taken 1 (fallthrough)
branch 164 taken 0
        1:  262-block 56
        1:  262-block 57
call   165 returned 1
branch 166 taken 1 (fallthrough)
branch 167 taken 0
        1:  262-block 58
        1:  262-block 59
call   168 returned 1
branch 169 taken 1 (fallthrough)
branch 170 taken 0
    $$$$$:  262-block 60
call   171 never executed
    $$$$$:  262-block 61
    $$$$$:  262-block 62
    $$$$$:  262-block 63
call   172 never executed
    $$$$$:  262-block 64
    $$$$$:  262-block 65
    $$$$$:  262-block 66
call   173 never executed
    $$$$$:  262-block 67
    $$$$$:  262-block 68
    $$$$$:  262-block 69
call   174 never executed
    $$$$$:  262-block 70
    $$$$$:  262-block 71
call   175 never executed
    $$$$$:  262-block 72
    $$$$$:  262-block 73
    $$$$$:  262-block 74
call   176 never executed
    $$$$$:  262-block 75
    $$$$$:  262-block 76
branch 177 never executed (fallthrough)
branch 178 never executed
    $$$$$:  262-block 77
    $$$$$:  262-block 78
branch 179 never executed (fallthrough)
branch 180 never executed
    $$$$$:  262-block 79
call   181 never executed
    $$$$$:  262-block 80
call   182 never executed
    $$$$$:  262-block 81
    $$$$$:  262-block 82
    $$$$$:  262-block 83
call   183 never executed
    $$$$$:  262-block 84
    $$$$$:  262-block 85
call   184 never executed
    $$$$$:  262-block 86
    $$$$$:  262-block 87
    $$$$$:  262-block 88
call   185 never executed
    $$$$$:  262-block 89
    $$$$$:  262-block 90
branch 186 never executed (fallthrough)
branch 187 never executed
    $$$$$:  262-block 91
    $$$$$:  262-block 92
branch 188 never executed (fallthrough)
branch 189 never executed
    $$$$$:  262-block 93
call   190 never executed
    $$$$$:  262-block 94
call   191 never executed
    $$$$$:  262-block 95
    $$$$$:  262-block 96
    $$$$$:  262-block 97
call   192 never executed
    $$$$$:  262-block 98
    $$$$$:  262-block 99
    $$$$$:  262-block 100
branch 193 never executed (fallthrough)
branch 194 never executed
    $$$$$:  262-block 101
    $$$$$:  262-block 102
branch 195 never executed (fallthrough)
branch 196 never executed
    $$$$$:  262-block 103
call   197 never executed
    $$$$$:  262-block 104
call   198 never executed
    $$$$$:  262-block 105
    $$$$$:  262-block 106
    $$$$$:  262-block 107
call   199 never executed
    $$$$$:  262-block 108
    $$$$$:  262-block 109
    $$$$$:  262-block 110
call   200 never executed
    $$$$$:  262-block 111
    $$$$$:  262-block 112
branch 201 never executed (fallthrough)
branch 202 never executed
    $$$$$:  262-block 113
    $$$$$:  262-block 114
branch 203 never executed (fallthrough)
branch 204 never executed
    $$$$$:  262-block 115
call   205 never executed
    $$$$$:  262-block 116
call   206 never executed
    $$$$$:  262-block 117
    $$$$$:  262-block 118
    $$$$$:  262-block 119
call   207 never executed
    $$$$$:  262-block 120
    $$$$$:  262-block 121
call   208 never executed
    $$$$$:  262-block 122
    $$$$$:  262-block 123
    $$$$$:  262-block 124
call   209 never executed
    $$$$$:  262-block 125
    $$$$$:  262-block 126
branch 210 never executed (fallthrough)
branch 211 never executed
    $$$$$:  262-block 127
    $$$$$:  262-block 128
branch 212 never executed (fallthrough)
branch 213 never executed
    $$$$$:  262-block 129
call   214 never executed
    $$$$$:  262-block 130
call   215 never executed
    $$$$$:  262-block 131
    $$$$$:  262-block 132
    $$$$$:  262-block 133
call   216 never executed
    $$$$$:  262-block 134
    $$$$$:  262-block 135
    $$$$$:  262-block 136
branch 217 never executed (fallthrough)
branch 218 never executed
    $$$$$:  262-block 137
    $$$$$:  262-block 138
branch 219 never executed (fallthrough)
branch 220 never executed
    $$$$$:  262-block 139
call   221 never executed
    $$$$$:  262-block 140
call   222 never executed
    $$$$$:  262-block 141
    $$$$$:  262-block 142
branch 223 never executed (fallthrough)
branch 224 never executed
    $$$$$:  262-block 143
call   225 never executed
    $$$$$:  262-block 144
    $$$$$:  262-block 145
    $$$$$:  262-block 146
branch 226 never executed (fallthrough)
branch 227 never executed
    $$$$$:  262-block 147
    $$$$$:  262-block 148
branch 228 never executed (fallthrough)
branch 229 never executed
    $$$$$:  262-block 149
call   230 never executed
    $$$$$:  262-block 150
    $$$$$:  262-block 151
    $$$$$:  262-block 152
branch 231 never executed (fallthrough)
branch 232 never executed
    $$$$$:  262-block 153
    $$$$$:  262-block 154
branch 233 never executed (fallthrough)
branch 234 never executed
    $$$$$:  262-block 155
call   235 never executed
    $$$$$:  262-block 156
call   236 never executed
    $$$$$:  262-block 157
call   237 never executed
    $$$$$:  262-block 158
call   238 never executed
    $$$$$:  262-block 159
call   239 never executed
    $$$$$:  262-block 160
call   240 never executed
    $$$$$:  262-block 161
call   241 never executed
    $$$$$:  262-block 162
call   242 never executed
    $$$$$:  262-block 163
call   243 never executed
    $$$$$:  262-block 164
call   244 never executed
------------------
        -:  263:
        4:  264:TEST(ParserTest, ParsesWhileSatement) {
        -:  265:    std::vector<Token> tokenLine1 = {
        -:  266:        Token(TokenType::KEYWORD, dummyPos, "while"),
        -:  267:        Token(TokenType::OPENPAREN, dummyPos),
    #####:  268:        Token(TokenType::INT, dummyPos, 3),
        -:  269:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:  270:        Token(TokenType::OPENBRACE, dummyPos),
        -:  271:        Token(TokenType::EOL, dummyPos)
        8:  272:    };
        -:  273:    std::vector<Token> tokenLine2 = {
    #####:  274:        Token(TokenType::INT, dummyPos, 1),
        -:  275:        Token(TokenType::PLUS, dummyPos),
    #####:  276:        Token(TokenType::INT, dummyPos, 2),
        -:  277:        Token(TokenType::EOL, dummyPos)
        6:  278:    };
        -:  279:    std::vector<Token> tokenLine3 = {
        -:  280:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  281:        Token(TokenType::EOL, dummyPos)
        4:  282:    };
        -:  283:    const std::map<int, std::vector<Token>> tokenMap =
        -:  284:        {
    #####:  285:        {0, tokenLine1},
    #####:  286:        {1, tokenLine2},
    #####:  287:        {2, tokenLine3},
    #####:  288:        {6, {Token(TokenType::EOF_, dummyPos)} }
        7:  289:        };
        -:  290:
        1:  291:    Parser parser(tokenMap);
        -:  292:    // Act: Parse the tokens
        1:  293:    const std::unique_ptr<Node> node = parser.parse();
        -:  294:
        -:  295:    // Assert: Check the returned Node
       1*:  296:    ASSERT_NE(node, nullptr);
       1*:  297:    EXPECT_EQ(node->getType(), NodeType::WhileStmt);
        -:  298:
       1*:  299:    auto* whileStatement = dynamic_cast<WhileStmt*>(node.get());
       1*:  300:    ASSERT_NE(whileStatement, nullptr);
        -:  301:
        -:  302:    // Check the condition node
        1:  303:    const Node* condition = whileStatement->getComparison().get();
       1*:  304:    ASSERT_NE(condition, nullptr);
       1*:  305:    EXPECT_EQ(condition->getType(), NodeType::Number);
        -:  306:
       1*:  307:    const auto* conditionNumber = dynamic_cast<const Number*>(condition);
       1*:  308:    ASSERT_NE(conditionNumber, nullptr);
       1*:  309:    EXPECT_EQ(std::get<int>(conditionNumber->getToken().getValue()), 3);
        -:  310:
        -:  311:    // Check the true branch (then block)
        1:  312:    const auto& loopBody = whileStatement->getWhileBlock();
       1*:  313:    ASSERT_EQ(loopBody.size(), 1);  // One expression inside the true block
        -:  314:
        1:  315:    const Node* trueExpr = loopBody.at(0).get();
       1*:  316:    ASSERT_NE(trueExpr, nullptr);
       1*:  317:    EXPECT_EQ(trueExpr->getType(), NodeType::BinaryOperator);
        -:  318:
       1*:  319:    const auto* trueBinOp = dynamic_cast<const BinaryOperator*>(trueExpr);
       1*:  320:    ASSERT_NE(trueBinOp, nullptr);
        1:  321:    const Node* leftOperand = trueBinOp->getLeftNode().get();
        1:  322:    const Node* rightOperand = trueBinOp->getRightNode().get();
       1*:  323:    ASSERT_NE(leftOperand, nullptr);
       1*:  324:    ASSERT_NE(rightOperand, nullptr);
        -:  325:
       1*:  326:    EXPECT_EQ(leftOperand->getType(), NodeType::Number);
       1*:  327:    EXPECT_EQ(rightOperand->getType(), NodeType::Number);
        -:  328:
       1*:  329:    const auto* leftNum = dynamic_cast<const Number*>(leftOperand);
       1*:  330:    const auto* rightNum = dynamic_cast<const Number*>(rightOperand);
       1*:  331:    ASSERT_NE(leftNum, nullptr);
       1*:  332:    ASSERT_NE(rightNum, nullptr);
        -:  333:
       1*:  334:    EXPECT_EQ(std::get<int>(leftNum->getToken().getValue()), 1);
       1*:  335:    EXPECT_EQ(std::get<int>(rightNum->getToken().getValue()), 2);
        -:  336:
        -:  337:    // Check that the binary operator is PLUS
       1*:  338:    EXPECT_EQ(trueBinOp->getOperatorNode().getToken().getType(), TokenType::PLUS);
        9:  339:}
------------------
_ZN35ParserTest_ParsesWhileSatement_TestC1Ev:
function _ZN35ParserTest_ParsesWhileSatement_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  264:TEST(ParserTest, ParsesWhileSatement) {
        1:  264-block  0
call    0 returned 1
------------------
_ZN35ParserTest_ParsesWhileSatement_TestD0Ev:
function _ZN35ParserTest_ParsesWhileSatement_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  264:TEST(ParserTest, ParsesWhileSatement) {
        1:  264-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN35ParserTest_ParsesWhileSatement_TestD1Ev:
function _ZN35ParserTest_ParsesWhileSatement_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  264:TEST(ParserTest, ParsesWhileSatement) {
        1:  264-block  0
call    0 returned 1
------------------
_ZN35ParserTest_ParsesWhileSatement_Test8TestBodyEv:
function _ZN35ParserTest_ParsesWhileSatement_Test8TestBodyEv called 1 returned 100% blocks executed 33%
        1:  264:TEST(ParserTest, ParsesWhileSatement) {
        -:  265:    std::vector<Token> tokenLine1 = {
        -:  266:        Token(TokenType::KEYWORD, dummyPos, "while"),
        -:  267:        Token(TokenType::OPENPAREN, dummyPos),
    #####:  268:        Token(TokenType::INT, dummyPos, 3),
    $$$$$:  268-block  0
        -:  269:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:  270:        Token(TokenType::OPENBRACE, dummyPos),
        -:  271:        Token(TokenType::EOL, dummyPos)
        8:  272:    };
        1:  272-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        7:  272-block  1
branch  3 taken 6 (fallthrough)
branch  4 taken 1
        6:  272-block  2
call    5 returned 6
    $$$$$:  272-block  3
    $$$$$:  272-block  4
    $$$$$:  272-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  272-block  6
call    8 never executed
    $$$$$:  272-block  7
        -:  273:    std::vector<Token> tokenLine2 = {
    #####:  274:        Token(TokenType::INT, dummyPos, 1),
    $$$$$:  274-block  0
        -:  275:        Token(TokenType::PLUS, dummyPos),
    #####:  276:        Token(TokenType::INT, dummyPos, 2),
    $$$$$:  276-block  0
        -:  277:        Token(TokenType::EOL, dummyPos)
        6:  278:    };
        1:  278-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  278-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  278-block  2
call    5 returned 4
    $$$$$:  278-block  3
    $$$$$:  278-block  4
    $$$$$:  278-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  278-block  6
call    8 never executed
    $$$$$:  278-block  7
        -:  279:    std::vector<Token> tokenLine3 = {
        -:  280:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  281:        Token(TokenType::EOL, dummyPos)
        4:  282:    };
        1:  282-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:  282-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:  282-block  2
call    5 returned 2
    $$$$$:  282-block  3
    $$$$$:  282-block  4
    $$$$$:  282-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  282-block  6
call    8 never executed
    $$$$$:  282-block  7
        -:  283:    const std::map<int, std::vector<Token>> tokenMap =
        -:  284:        {
    #####:  285:        {0, tokenLine1},
    $$$$$:  285-block  0
    #####:  286:        {1, tokenLine2},
    $$$$$:  286-block  0
    #####:  287:        {2, tokenLine3},
    $$$$$:  287-block  0
    #####:  288:        {6, {Token(TokenType::EOF_, dummyPos)} }
    $$$$$:  288-block  0
        7:  289:        };
        1:  289-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  289-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  289-block  2
call    5 returned 4
        1:  289-block  3
call    6 returned 1
    $$$$$:  289-block  4
    $$$$$:  289-block  5
    $$$$$:  289-block  6
    $$$$$:  289-block  7
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$:  289-block  8
call    9 never executed
    $$$$$:  289-block  9
    $$$$$:  289-block 10
call   10 never executed
    $$$$$:  289-block 11
        -:  290:
        1:  291:    Parser parser(tokenMap);
        1:  291-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  291-block  1
call    3 returned 1
    $$$$$:  291-block  2
call    4 never executed
    $$$$$:  291-block  3
        -:  292:    // Act: Parse the tokens
        1:  293:    const std::unique_ptr<Node> node = parser.parse();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  294:
        -:  295:    // Assert: Check the returned Node
       1*:  296:    ASSERT_NE(node, nullptr);
        1:  296-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  296-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  296-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  296-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  296-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  296-block  5
call   16 never executed
call   17 never executed
        1:  296-block  6
        1:  296-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  296-block  8
    $$$$$:  296-block  9
    $$$$$:  296-block 10
call   21 never executed
    $$$$$:  296-block 11
    $$$$$:  296-block 12
call   22 never executed
    $$$$$:  296-block 13
    $$$$$:  296-block 14
call   23 never executed
       1*:  297:    EXPECT_EQ(node->getType(), NodeType::WhileStmt);
        1:  297-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  297-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  297-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:  297-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  297-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  297-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  297-block  6
call   20 never executed
call   21 never executed
        1:  297-block  7
call   22 returned 1
    $$$$$:  297-block  8
    $$$$$:  297-block  9
    $$$$$:  297-block 10
call   23 never executed
    $$$$$:  297-block 11
    $$$$$:  297-block 12
call   24 never executed
    $$$$$:  297-block 13
    $$$$$:  297-block 14
call   25 never executed
        -:  298:
       1*:  299:    auto* whileStatement = dynamic_cast<WhileStmt*>(node.get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  299-block  0
    %%%%%:  299-block  1
       1*:  300:    ASSERT_NE(whileStatement, nullptr);
        1:  300-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  300-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  300-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  300-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  300-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  300-block  5
call   16 never executed
call   17 never executed
        1:  300-block  6
        1:  300-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  300-block  8
    $$$$$:  300-block  9
    $$$$$:  300-block 10
call   21 never executed
    $$$$$:  300-block 11
    $$$$$:  300-block 12
call   22 never executed
    $$$$$:  300-block 13
    $$$$$:  300-block 14
call   23 never executed
        -:  301:
        -:  302:    // Check the condition node
        1:  303:    const Node* condition = whileStatement->getComparison().get();
        1:  303-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  303-block  1
call    3 returned 1
       1*:  304:    ASSERT_NE(condition, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  304-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  304-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  304-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  304-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  304-block  4
call   16 never executed
call   17 never executed
        1:  304-block  5
        1:  304-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  304-block  7
    $$$$$:  304-block  8
    $$$$$:  304-block  9
call   21 never executed
    $$$$$:  304-block 10
    $$$$$:  304-block 11
call   22 never executed
    $$$$$:  304-block 12
    $$$$$:  304-block 13
call   23 never executed
       1*:  305:    EXPECT_EQ(condition->getType(), NodeType::Number);
        1:  305-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  305-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  305-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  305-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  305-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  305-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  305-block  6
call   19 never executed
call   20 never executed
        1:  305-block  7
call   21 returned 1
    $$$$$:  305-block  8
    $$$$$:  305-block  9
    $$$$$:  305-block 10
call   22 never executed
    $$$$$:  305-block 11
    $$$$$:  305-block 12
call   23 never executed
    $$$$$:  305-block 13
    $$$$$:  305-block 14
call   24 never executed
        -:  306:
       1*:  307:    const auto* conditionNumber = dynamic_cast<const Number*>(condition);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  307-block  0
    %%%%%:  307-block  1
       1*:  308:    ASSERT_NE(conditionNumber, nullptr);
        1:  308-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  308-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  308-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  308-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  308-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  308-block  5
call   16 never executed
call   17 never executed
        1:  308-block  6
        1:  308-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  308-block  8
    $$$$$:  308-block  9
    $$$$$:  308-block 10
call   21 never executed
    $$$$$:  308-block 11
    $$$$$:  308-block 12
call   22 never executed
    $$$$$:  308-block 13
    $$$$$:  308-block 14
call   23 never executed
       1*:  309:    EXPECT_EQ(std::get<int>(conditionNumber->getToken().getValue()), 3);
        1:  309-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  309-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  309-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  309-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  309-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  309-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  309-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  309-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  309-block  8
call   27 never executed
call   28 never executed
        1:  309-block  9
call   29 returned 1
    $$$$$:  309-block 10
call   30 never executed
    $$$$$:  309-block 11
call   31 never executed
    $$$$$:  309-block 12
    $$$$$:  309-block 13
    $$$$$:  309-block 14
    $$$$$:  309-block 15
call   32 never executed
    $$$$$:  309-block 16
    $$$$$:  309-block 17
call   33 never executed
    $$$$$:  309-block 18
    $$$$$:  309-block 19
call   34 never executed
        -:  310:
        -:  311:    // Check the true branch (then block)
        1:  312:    const auto& loopBody = whileStatement->getWhileBlock();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  313:    ASSERT_EQ(loopBody.size(), 1);  // One expression inside the true block
        1:  313-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  313-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  313-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  313-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  313-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  313-block  5
call   17 never executed
call   18 never executed
        1:  313-block  6
        1:  313-block  7
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0
        1:  313-block  8
    $$$$$:  313-block  9
    $$$$$:  313-block 10
    $$$$$:  313-block 11
call   22 never executed
    $$$$$:  313-block 12
    $$$$$:  313-block 13
call   23 never executed
    $$$$$:  313-block 14
    $$$$$:  313-block 15
call   24 never executed
        -:  314:
        1:  315:    const Node* trueExpr = loopBody.at(0).get();
        1:  315-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  315-block  1
call    3 returned 1
       1*:  316:    ASSERT_NE(trueExpr, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  316-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  316-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  316-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  316-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  316-block  4
call   16 never executed
call   17 never executed
        1:  316-block  5
        1:  316-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  316-block  7
    $$$$$:  316-block  8
    $$$$$:  316-block  9
call   21 never executed
    $$$$$:  316-block 10
    $$$$$:  316-block 11
call   22 never executed
    $$$$$:  316-block 12
    $$$$$:  316-block 13
call   23 never executed
       1*:  317:    EXPECT_EQ(trueExpr->getType(), NodeType::BinaryOperator);
        1:  317-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  317-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  317-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  317-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  317-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  317-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  317-block  6
call   19 never executed
call   20 never executed
        1:  317-block  7
call   21 returned 1
    $$$$$:  317-block  8
    $$$$$:  317-block  9
    $$$$$:  317-block 10
call   22 never executed
    $$$$$:  317-block 11
    $$$$$:  317-block 12
call   23 never executed
    $$$$$:  317-block 13
    $$$$$:  317-block 14
call   24 never executed
        -:  318:
       1*:  319:    const auto* trueBinOp = dynamic_cast<const BinaryOperator*>(trueExpr);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  319-block  0
    %%%%%:  319-block  1
       1*:  320:    ASSERT_NE(trueBinOp, nullptr);
        1:  320-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  320-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  320-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  320-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  320-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  320-block  5
call   16 never executed
call   17 never executed
        1:  320-block  6
        1:  320-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  320-block  8
    $$$$$:  320-block  9
    $$$$$:  320-block 10
call   21 never executed
    $$$$$:  320-block 11
    $$$$$:  320-block 12
call   22 never executed
    $$$$$:  320-block 13
    $$$$$:  320-block 14
call   23 never executed
        1:  321:    const Node* leftOperand = trueBinOp->getLeftNode().get();
        1:  321-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  321-block  1
call    3 returned 1
        1:  322:    const Node* rightOperand = trueBinOp->getRightNode().get();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  322-block  0
call    3 returned 1
       1*:  323:    ASSERT_NE(leftOperand, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  323-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  323-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  323-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  323-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  323-block  4
call   16 never executed
call   17 never executed
        1:  323-block  5
        1:  323-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  323-block  7
    $$$$$:  323-block  8
    $$$$$:  323-block  9
call   21 never executed
    $$$$$:  323-block 10
    $$$$$:  323-block 11
call   22 never executed
    $$$$$:  323-block 12
    $$$$$:  323-block 13
call   23 never executed
       1*:  324:    ASSERT_NE(rightOperand, nullptr);
        1:  324-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  324-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  324-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  324-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  324-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  324-block  5
call   16 never executed
call   17 never executed
        1:  324-block  6
        1:  324-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  324-block  8
    $$$$$:  324-block  9
    $$$$$:  324-block 10
call   21 never executed
    $$$$$:  324-block 11
    $$$$$:  324-block 12
call   22 never executed
    $$$$$:  324-block 13
    $$$$$:  324-block 14
call   23 never executed
        -:  325:
       1*:  326:    EXPECT_EQ(leftOperand->getType(), NodeType::Number);
        1:  326-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  326-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  326-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  326-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  326-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  326-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  326-block  6
call   19 never executed
call   20 never executed
        1:  326-block  7
call   21 returned 1
    $$$$$:  326-block  8
    $$$$$:  326-block  9
    $$$$$:  326-block 10
call   22 never executed
    $$$$$:  326-block 11
    $$$$$:  326-block 12
call   23 never executed
    $$$$$:  326-block 13
    $$$$$:  326-block 14
call   24 never executed
       1*:  327:    EXPECT_EQ(rightOperand->getType(), NodeType::Number);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  327-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  327-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  327-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  327-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  327-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  327-block  5
call   19 never executed
call   20 never executed
        1:  327-block  6
call   21 returned 1
    $$$$$:  327-block  7
    $$$$$:  327-block  8
    $$$$$:  327-block  9
call   22 never executed
    $$$$$:  327-block 10
    $$$$$:  327-block 11
call   23 never executed
    $$$$$:  327-block 12
    $$$$$:  327-block 13
call   24 never executed
        -:  328:
       1*:  329:    const auto* leftNum = dynamic_cast<const Number*>(leftOperand);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  329-block  0
    %%%%%:  329-block  1
       1*:  330:    const auto* rightNum = dynamic_cast<const Number*>(rightOperand);
        1:  330-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  330-block  1
    %%%%%:  330-block  2
       1*:  331:    ASSERT_NE(leftNum, nullptr);
        1:  331-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  331-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  331-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  331-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  331-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  331-block  5
call   16 never executed
call   17 never executed
        1:  331-block  6
        1:  331-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  331-block  8
    $$$$$:  331-block  9
    $$$$$:  331-block 10
call   21 never executed
    $$$$$:  331-block 11
    $$$$$:  331-block 12
call   22 never executed
    $$$$$:  331-block 13
    $$$$$:  331-block 14
call   23 never executed
       1*:  332:    ASSERT_NE(rightNum, nullptr);
        1:  332-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  332-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  332-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  332-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  332-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  332-block  5
call   16 never executed
call   17 never executed
        1:  332-block  6
        1:  332-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  332-block  8
    $$$$$:  332-block  9
    $$$$$:  332-block 10
call   21 never executed
    $$$$$:  332-block 11
    $$$$$:  332-block 12
call   22 never executed
    $$$$$:  332-block 13
    $$$$$:  332-block 14
call   23 never executed
        -:  333:
       1*:  334:    EXPECT_EQ(std::get<int>(leftNum->getToken().getValue()), 1);
        1:  334-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  334-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  334-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  334-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  334-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  334-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  334-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  334-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  334-block  8
call   27 never executed
call   28 never executed
        1:  334-block  9
call   29 returned 1
    $$$$$:  334-block 10
call   30 never executed
    $$$$$:  334-block 11
call   31 never executed
    $$$$$:  334-block 12
    $$$$$:  334-block 13
    $$$$$:  334-block 14
    $$$$$:  334-block 15
call   32 never executed
    $$$$$:  334-block 16
    $$$$$:  334-block 17
call   33 never executed
    $$$$$:  334-block 18
    $$$$$:  334-block 19
call   34 never executed
       1*:  335:    EXPECT_EQ(std::get<int>(rightNum->getToken().getValue()), 2);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  335-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  335-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  335-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  335-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  335-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  335-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  335-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  335-block  7
call   27 never executed
call   28 never executed
        1:  335-block  8
call   29 returned 1
    $$$$$:  335-block  9
call   30 never executed
    $$$$$:  335-block 10
call   31 never executed
    $$$$$:  335-block 11
    $$$$$:  335-block 12
    $$$$$:  335-block 13
    $$$$$:  335-block 14
call   32 never executed
    $$$$$:  335-block 15
    $$$$$:  335-block 16
call   33 never executed
    $$$$$:  335-block 17
    $$$$$:  335-block 18
call   34 never executed
        -:  336:
        -:  337:    // Check that the binary operator is PLUS
       1*:  338:    EXPECT_EQ(trueBinOp->getOperatorNode().getToken().getType(), TokenType::PLUS);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  338-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  338-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  338-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  338-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  338-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  338-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  338-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  338-block  7
call   27 never executed
call   28 never executed
        1:  338-block  8
call   29 returned 1
    $$$$$:  338-block  9
call   30 never executed
    $$$$$:  338-block 10
call   31 never executed
    $$$$$:  338-block 11
    $$$$$:  338-block 12
    $$$$$:  338-block 13
    $$$$$:  338-block 14
    $$$$$:  338-block 15
call   32 never executed
    $$$$$:  338-block 16
    $$$$$:  338-block 17
call   33 never executed
    $$$$$:  338-block 18
    $$$$$:  338-block 19
call   34 never executed
        9:  339:}
        1:  339-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  339-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  339-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  339-block  3
call   10 returned 1
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
        1:  339-block  4
call   14 returned 1
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1:  339-block  5
call   18 returned 1
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0 (throw)
        1:  339-block  6
call   22 returned 1
call   23 returned 1
branch 24 taken 1 (fallthrough)
branch 25 taken 0 (throw)
        1:  339-block  7
        1:  339-block  8
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
call   30 returned 1
call   31 returned 1
call   32 returned 1
call   33 returned 1
branch 34 taken 1 (fallthrough)
branch 35 taken 0 (throw)
        1:  339-block  9
call   36 returned 1
call   37 returned 1
branch 38 taken 1 (fallthrough)
branch 39 taken 0 (throw)
        1:  339-block 10
call   40 returned 1
call   41 returned 1
branch 42 taken 1 (fallthrough)
branch 43 taken 0 (throw)
        1:  339-block 11
call   44 returned 1
call   45 returned 1
branch 46 taken 1 (fallthrough)
branch 47 taken 0 (throw)
        1:  339-block 12
        1:  339-block 13
call   48 returned 1
call   49 returned 1
call   50 returned 1
call   51 returned 1
call   52 returned 1
call   53 returned 1
branch 54 taken 1 (fallthrough)
branch 55 taken 0 (throw)
        1:  339-block 14
call   56 returned 1
call   57 returned 1
branch 58 taken 1 (fallthrough)
branch 59 taken 0 (throw)
        1:  339-block 15
        1:  339-block 16
call   60 returned 1
call   61 returned 1
call   62 returned 1
branch 63 taken 1 (fallthrough)
branch 64 taken 0 (throw)
        1:  339-block 17
call   65 returned 1
branch 66 taken 1 (fallthrough)
branch 67 taken 0 (throw)
        1:  339-block 18
call   68 returned 1
branch 69 taken 1 (fallthrough)
branch 70 taken 0 (throw)
        1:  339-block 19
call   71 returned 1
call   72 returned 1
branch 73 taken 1 (fallthrough)
branch 74 taken 0 (throw)
        1:  339-block 20
        1:  339-block 21
call   75 returned 1
branch 76 taken 1 (fallthrough)
branch 77 taken 0 (throw)
        1:  339-block 22
call   78 returned 1
branch 79 taken 1 (fallthrough)
branch 80 taken 0 (throw)
        1:  339-block 23
        1:  339-block 24
call   81 returned 1
        2:  339-block 25
branch 82 taken 1 (fallthrough)
branch 83 taken 1
        1:  339-block 26
call   84 returned 1
call   85 returned 1
branch 86 taken 1 (fallthrough)
branch 87 taken 0 (throw)
        1:  339-block 27
call   88 returned 1
branch 89 taken 1 (fallthrough)
branch 90 taken 0
        1:  339-block 28
        1:  339-block 29
call   91 returned 1
branch 92 taken 1 (fallthrough)
branch 93 taken 0
        1:  339-block 30
        1:  339-block 31
call   94 returned 1
branch 95 taken 1 (fallthrough)
branch 96 taken 0
        1:  339-block 32
        1:  339-block 33
call   97 returned 1
branch 98 taken 1 (fallthrough)
branch 99 taken 0
        1:  339-block 34
        1:  339-block 35
call   100 returned 1
branch 101 taken 1 (fallthrough)
branch 102 taken 0
        1:  339-block 36
        1:  339-block 37
call   103 returned 1
branch 104 taken 1 (fallthrough)
branch 105 taken 0
    $$$$$:  339-block 38
call   106 never executed
    $$$$$:  339-block 39
    $$$$$:  339-block 40
    $$$$$:  339-block 41
call   107 never executed
    $$$$$:  339-block 42
    $$$$$:  339-block 43
    $$$$$:  339-block 44
call   108 never executed
    $$$$$:  339-block 45
    $$$$$:  339-block 46
    $$$$$:  339-block 47
call   109 never executed
    $$$$$:  339-block 48
    $$$$$:  339-block 49
call   110 never executed
    $$$$$:  339-block 50
    $$$$$:  339-block 51
    $$$$$:  339-block 52
call   111 never executed
    $$$$$:  339-block 53
    $$$$$:  339-block 54
branch 112 never executed (fallthrough)
branch 113 never executed
    $$$$$:  339-block 55
    $$$$$:  339-block 56
branch 114 never executed (fallthrough)
branch 115 never executed
    $$$$$:  339-block 57
call   116 never executed
    $$$$$:  339-block 58
call   117 never executed
    $$$$$:  339-block 59
    $$$$$:  339-block 60
    $$$$$:  339-block 61
call   118 never executed
    $$$$$:  339-block 62
    $$$$$:  339-block 63
call   119 never executed
    $$$$$:  339-block 64
    $$$$$:  339-block 65
    $$$$$:  339-block 66
call   120 never executed
    $$$$$:  339-block 67
    $$$$$:  339-block 68
branch 121 never executed (fallthrough)
branch 122 never executed
    $$$$$:  339-block 69
    $$$$$:  339-block 70
branch 123 never executed (fallthrough)
branch 124 never executed
    $$$$$:  339-block 71
call   125 never executed
    $$$$$:  339-block 72
call   126 never executed
    $$$$$:  339-block 73
    $$$$$:  339-block 74
    $$$$$:  339-block 75
call   127 never executed
    $$$$$:  339-block 76
    $$$$$:  339-block 77
    $$$$$:  339-block 78
branch 128 never executed (fallthrough)
branch 129 never executed
    $$$$$:  339-block 79
    $$$$$:  339-block 80
branch 130 never executed (fallthrough)
branch 131 never executed
    $$$$$:  339-block 81
call   132 never executed
    $$$$$:  339-block 82
call   133 never executed
    $$$$$:  339-block 83
    $$$$$:  339-block 84
branch 134 never executed (fallthrough)
branch 135 never executed
    $$$$$:  339-block 85
call   136 never executed
    $$$$$:  339-block 86
    $$$$$:  339-block 87
    $$$$$:  339-block 88
branch 137 never executed (fallthrough)
branch 138 never executed
    $$$$$:  339-block 89
    $$$$$:  339-block 90
branch 139 never executed (fallthrough)
branch 140 never executed
    $$$$$:  339-block 91
call   141 never executed
    $$$$$:  339-block 92
    $$$$$:  339-block 93
    $$$$$:  339-block 94
branch 142 never executed (fallthrough)
branch 143 never executed
    $$$$$:  339-block 95
    $$$$$:  339-block 96
branch 144 never executed (fallthrough)
branch 145 never executed
    $$$$$:  339-block 97
call   146 never executed
    $$$$$:  339-block 98
call   147 never executed
    $$$$$:  339-block 99
call   148 never executed
    $$$$$:  339-block 100
call   149 never executed
    $$$$$:  339-block 101
call   150 never executed
    $$$$$:  339-block 102
call   151 never executed
    $$$$$:  339-block 103
call   152 never executed
------------------
        -:  340:
        4:  341:TEST(ParserTest, ParsesForSatement) {
        -:  342:    std::vector<Token> tokenLine1 = {
        -:  343:        Token(TokenType::KEYWORD, dummyPos, "for"),
        -:  344:        Token(TokenType::OPENPAREN, dummyPos),
        -:  345:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:  346:        Token(TokenType::IDENTIFIER, dummyPos, "x"),
        -:  347:        Token(TokenType::EQUALS, dummyPos),
    #####:  348:        Token(TokenType::INT, dummyPos, 0),
        -:  349:        Token(TokenType::SEPERATOR, dummyPos),
        -:  350:        Token(TokenType::IDENTIFIER, dummyPos, "x"),
        -:  351:        Token(TokenType::LESSTHAN, dummyPos),
    #####:  352:        Token(TokenType::INT, dummyPos, 10),
        -:  353:        Token(TokenType::SEPERATOR, dummyPos),
        -:  354:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:  355:        Token(TokenType::IDENTIFIER, dummyPos, "x"),
        -:  356:        Token(TokenType::INCREMENT, dummyPos),
        -:  357:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:  358:        Token(TokenType::OPENBRACE, dummyPos),
        -:  359:        Token(TokenType::EOL, dummyPos)
       19:  360:    };
        -:  361:    std::vector<Token> tokenLine2 = {
    #####:  362:        Token(TokenType::INT, dummyPos, 1),
        -:  363:        Token(TokenType::PLUS, dummyPos),
    #####:  364:        Token(TokenType::INT, dummyPos, 2),
        -:  365:        Token(TokenType::EOL, dummyPos)
        6:  366:    };
        -:  367:    std::vector<Token> tokenLine3 = {
        -:  368:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  369:        Token(TokenType::EOL, dummyPos)
        4:  370:    };
        -:  371:    const std::map<int, std::vector<Token>> tokenMap =
        -:  372:        {
    #####:  373:        {0, tokenLine1},
    #####:  374:        {1, tokenLine2},
    #####:  375:        {2, tokenLine3},
    #####:  376:        {6, {Token(TokenType::EOF_, dummyPos)} }
        7:  377:        };
        -:  378:
        1:  379:    Parser parser(tokenMap);
        -:  380:    // Act: Parse the tokens
        1:  381:    const std::unique_ptr<Node> node = parser.parse();
        -:  382:
        -:  383:    // Assert: Check the returned Node
       1*:  384:    ASSERT_NE(node, nullptr);
       1*:  385:    EXPECT_EQ(node->getType(), NodeType::ForStmt);
        -:  386:
       1*:  387:    auto* whileStatement = dynamic_cast<ForStmt*>(node.get());
       1*:  388:    ASSERT_NE(whileStatement, nullptr);
        -:  389:
        -:  390:    // Check the condition node
        1:  391:    const Node* varDeclare = whileStatement->getVarDeclare().get();
       1*:  392:    ASSERT_NE(varDeclare, nullptr);
       1*:  393:    EXPECT_EQ(varDeclare->getType(), NodeType::VarAssgnment);
       1*:  394:    const auto* varAssignNode = dynamic_cast<const VarAssignment*>(varDeclare);
       1*:  395:    ASSERT_NE(varAssignNode, nullptr);
       1*:  396:    EXPECT_EQ(std::get<std::string>(varAssignNode->getToken().getValue()), "x");
       1*:  397:    EXPECT_EQ(varAssignNode->getValue()->getType(), NodeType::Number);
        -:  398:
        -:  399:    // Check the true branch (then block)
        1:  400:    const auto& loopBody = whileStatement->getForBlock();
       1*:  401:    ASSERT_EQ(loopBody.size(), 1);  // One expression inside the true block
        -:  402:
        1:  403:    const Node* trueExpr = loopBody.at(0).get();
       1*:  404:    ASSERT_NE(trueExpr, nullptr);
       1*:  405:    EXPECT_EQ(trueExpr->getType(), NodeType::BinaryOperator);
        -:  406:
       1*:  407:    const auto* trueBinOp = dynamic_cast<const BinaryOperator*>(trueExpr);
       1*:  408:    ASSERT_NE(trueBinOp, nullptr);
        1:  409:    const Node* leftOperand = trueBinOp->getLeftNode().get();
        1:  410:    const Node* rightOperand = trueBinOp->getRightNode().get();
       1*:  411:    ASSERT_NE(leftOperand, nullptr);
       1*:  412:    ASSERT_NE(rightOperand, nullptr);
        -:  413:
       1*:  414:    EXPECT_EQ(leftOperand->getType(), NodeType::Number);
       1*:  415:    EXPECT_EQ(rightOperand->getType(), NodeType::Number);
        -:  416:
       1*:  417:    const auto* leftNum = dynamic_cast<const Number*>(leftOperand);
       1*:  418:    const auto* rightNum = dynamic_cast<const Number*>(rightOperand);
       1*:  419:    ASSERT_NE(leftNum, nullptr);
       1*:  420:    ASSERT_NE(rightNum, nullptr);
        -:  421:
       1*:  422:    EXPECT_EQ(std::get<int>(leftNum->getToken().getValue()), 1);
       1*:  423:    EXPECT_EQ(std::get<int>(rightNum->getToken().getValue()), 2);
        -:  424:
        -:  425:    // Check that the binary operator is PLUS
       1*:  426:    EXPECT_EQ(trueBinOp->getOperatorNode().getToken().getType(), TokenType::PLUS);
        9:  427:}
------------------
_ZN33ParserTest_ParsesForSatement_TestC1Ev:
function _ZN33ParserTest_ParsesForSatement_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  341:TEST(ParserTest, ParsesForSatement) {
        1:  341-block  0
call    0 returned 1
------------------
_ZN33ParserTest_ParsesForSatement_TestD0Ev:
function _ZN33ParserTest_ParsesForSatement_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  341:TEST(ParserTest, ParsesForSatement) {
        1:  341-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN33ParserTest_ParsesForSatement_TestD1Ev:
function _ZN33ParserTest_ParsesForSatement_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  341:TEST(ParserTest, ParsesForSatement) {
        1:  341-block  0
call    0 returned 1
------------------
_ZN33ParserTest_ParsesForSatement_Test8TestBodyEv:
function _ZN33ParserTest_ParsesForSatement_Test8TestBodyEv called 1 returned 100% blocks executed 34%
        1:  341:TEST(ParserTest, ParsesForSatement) {
        -:  342:    std::vector<Token> tokenLine1 = {
        -:  343:        Token(TokenType::KEYWORD, dummyPos, "for"),
        -:  344:        Token(TokenType::OPENPAREN, dummyPos),
        -:  345:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:  346:        Token(TokenType::IDENTIFIER, dummyPos, "x"),
        -:  347:        Token(TokenType::EQUALS, dummyPos),
    #####:  348:        Token(TokenType::INT, dummyPos, 0),
    $$$$$:  348-block  0
        -:  349:        Token(TokenType::SEPERATOR, dummyPos),
        -:  350:        Token(TokenType::IDENTIFIER, dummyPos, "x"),
        -:  351:        Token(TokenType::LESSTHAN, dummyPos),
    #####:  352:        Token(TokenType::INT, dummyPos, 10),
    $$$$$:  352-block  0
        -:  353:        Token(TokenType::SEPERATOR, dummyPos),
        -:  354:        Token(TokenType::KEYWORD, dummyPos, "var"),
        -:  355:        Token(TokenType::IDENTIFIER, dummyPos, "x"),
        -:  356:        Token(TokenType::INCREMENT, dummyPos),
        -:  357:        Token(TokenType::CLOSEPAREN, dummyPos),
        -:  358:        Token(TokenType::OPENBRACE, dummyPos),
        -:  359:        Token(TokenType::EOL, dummyPos)
       19:  360:    };
        1:  360-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       18:  360-block  1
branch  3 taken 17 (fallthrough)
branch  4 taken 1
       17:  360-block  2
call    5 returned 17
    $$$$$:  360-block  3
    $$$$$:  360-block  4
    $$$$$:  360-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  360-block  6
call    8 never executed
    $$$$$:  360-block  7
        -:  361:    std::vector<Token> tokenLine2 = {
    #####:  362:        Token(TokenType::INT, dummyPos, 1),
    $$$$$:  362-block  0
        -:  363:        Token(TokenType::PLUS, dummyPos),
    #####:  364:        Token(TokenType::INT, dummyPos, 2),
    $$$$$:  364-block  0
        -:  365:        Token(TokenType::EOL, dummyPos)
        6:  366:    };
        1:  366-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  366-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  366-block  2
call    5 returned 4
    $$$$$:  366-block  3
    $$$$$:  366-block  4
    $$$$$:  366-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  366-block  6
call    8 never executed
    $$$$$:  366-block  7
        -:  367:    std::vector<Token> tokenLine3 = {
        -:  368:        Token(TokenType::CLOSEBRACE, dummyPos),
        -:  369:        Token(TokenType::EOL, dummyPos)
        4:  370:    };
        1:  370-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:  370-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:  370-block  2
call    5 returned 2
    $$$$$:  370-block  3
    $$$$$:  370-block  4
    $$$$$:  370-block  5
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  370-block  6
call    8 never executed
    $$$$$:  370-block  7
        -:  371:    const std::map<int, std::vector<Token>> tokenMap =
        -:  372:        {
    #####:  373:        {0, tokenLine1},
    $$$$$:  373-block  0
    #####:  374:        {1, tokenLine2},
    $$$$$:  374-block  0
    #####:  375:        {2, tokenLine3},
    $$$$$:  375-block  0
    #####:  376:        {6, {Token(TokenType::EOF_, dummyPos)} }
    $$$$$:  376-block  0
        7:  377:        };
        1:  377-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  377-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  377-block  2
call    5 returned 4
        1:  377-block  3
call    6 returned 1
    $$$$$:  377-block  4
    $$$$$:  377-block  5
    $$$$$:  377-block  6
    $$$$$:  377-block  7
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$:  377-block  8
call    9 never executed
    $$$$$:  377-block  9
    $$$$$:  377-block 10
call   10 never executed
    $$$$$:  377-block 11
        -:  378:
        1:  379:    Parser parser(tokenMap);
        1:  379-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  379-block  1
call    3 returned 1
    $$$$$:  379-block  2
call    4 never executed
    $$$$$:  379-block  3
        -:  380:    // Act: Parse the tokens
        1:  381:    const std::unique_ptr<Node> node = parser.parse();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  382:
        -:  383:    // Assert: Check the returned Node
       1*:  384:    ASSERT_NE(node, nullptr);
        1:  384-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  384-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  384-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  384-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  384-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  384-block  5
call   16 never executed
call   17 never executed
        1:  384-block  6
        1:  384-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  384-block  8
    $$$$$:  384-block  9
    $$$$$:  384-block 10
call   21 never executed
    $$$$$:  384-block 11
    $$$$$:  384-block 12
call   22 never executed
    $$$$$:  384-block 13
    $$$$$:  384-block 14
call   23 never executed
       1*:  385:    EXPECT_EQ(node->getType(), NodeType::ForStmt);
        1:  385-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  385-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  385-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:  385-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  385-block  4
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  385-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  385-block  6
call   20 never executed
call   21 never executed
        1:  385-block  7
call   22 returned 1
    $$$$$:  385-block  8
    $$$$$:  385-block  9
    $$$$$:  385-block 10
call   23 never executed
    $$$$$:  385-block 11
    $$$$$:  385-block 12
call   24 never executed
    $$$$$:  385-block 13
    $$$$$:  385-block 14
call   25 never executed
        -:  386:
       1*:  387:    auto* whileStatement = dynamic_cast<ForStmt*>(node.get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  387-block  0
    %%%%%:  387-block  1
       1*:  388:    ASSERT_NE(whileStatement, nullptr);
        1:  388-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  388-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  388-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  388-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  388-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  388-block  5
call   16 never executed
call   17 never executed
        1:  388-block  6
        1:  388-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  388-block  8
    $$$$$:  388-block  9
    $$$$$:  388-block 10
call   21 never executed
    $$$$$:  388-block 11
    $$$$$:  388-block 12
call   22 never executed
    $$$$$:  388-block 13
    $$$$$:  388-block 14
call   23 never executed
        -:  389:
        -:  390:    // Check the condition node
        1:  391:    const Node* varDeclare = whileStatement->getVarDeclare().get();
        1:  391-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  391-block  1
call    3 returned 1
       1*:  392:    ASSERT_NE(varDeclare, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  392-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  392-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  392-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  392-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  392-block  4
call   16 never executed
call   17 never executed
        1:  392-block  5
        1:  392-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  392-block  7
    $$$$$:  392-block  8
    $$$$$:  392-block  9
call   21 never executed
    $$$$$:  392-block 10
    $$$$$:  392-block 11
call   22 never executed
    $$$$$:  392-block 12
    $$$$$:  392-block 13
call   23 never executed
       1*:  393:    EXPECT_EQ(varDeclare->getType(), NodeType::VarAssgnment);
        1:  393-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  393-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  393-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  393-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  393-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  393-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  393-block  6
call   19 never executed
call   20 never executed
        1:  393-block  7
call   21 returned 1
    $$$$$:  393-block  8
    $$$$$:  393-block  9
    $$$$$:  393-block 10
call   22 never executed
    $$$$$:  393-block 11
    $$$$$:  393-block 12
call   23 never executed
    $$$$$:  393-block 13
    $$$$$:  393-block 14
call   24 never executed
       1*:  394:    const auto* varAssignNode = dynamic_cast<const VarAssignment*>(varDeclare);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  394-block  0
    %%%%%:  394-block  1
       1*:  395:    ASSERT_NE(varAssignNode, nullptr);
        1:  395-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  395-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  395-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  395-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  395-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  395-block  5
call   16 never executed
call   17 never executed
        1:  395-block  6
        1:  395-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  395-block  8
    $$$$$:  395-block  9
    $$$$$:  395-block 10
call   21 never executed
    $$$$$:  395-block 11
    $$$$$:  395-block 12
call   22 never executed
    $$$$$:  395-block 13
    $$$$$:  395-block 14
call   23 never executed
       1*:  396:    EXPECT_EQ(std::get<std::string>(varAssignNode->getToken().getValue()), "x");
        1:  396-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  396-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  396-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  396-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  396-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  396-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  396-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  396-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  396-block  8
call   27 never executed
call   28 never executed
        1:  396-block  9
call   29 returned 1
    $$$$$:  396-block 10
call   30 never executed
    $$$$$:  396-block 11
call   31 never executed
    $$$$$:  396-block 12
    $$$$$:  396-block 13
    $$$$$:  396-block 14
call   32 never executed
    $$$$$:  396-block 15
    $$$$$:  396-block 16
call   33 never executed
    $$$$$:  396-block 17
    $$$$$:  396-block 18
call   34 never executed
       1*:  397:    EXPECT_EQ(varAssignNode->getValue()->getType(), NodeType::Number);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  397-block  0
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  397-block  1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  397-block  2
call   10 returned 1
branch 11 taken 0 (fallthrough)
branch 12 taken 1
    %%%%%:  397-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  397-block  4
call   16 never executed
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  397-block  5
call   20 never executed
branch 21 never executed (fallthrough)
branch 22 never executed (throw)
    %%%%%:  397-block  6
call   23 never executed
call   24 never executed
        1:  397-block  7
call   25 returned 1
    $$$$$:  397-block  8
    $$$$$:  397-block  9
    $$$$$:  397-block 10
call   26 never executed
    $$$$$:  397-block 11
    $$$$$:  397-block 12
call   27 never executed
    $$$$$:  397-block 13
    $$$$$:  397-block 14
call   28 never executed
        -:  398:
        -:  399:    // Check the true branch (then block)
        1:  400:    const auto& loopBody = whileStatement->getForBlock();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  401:    ASSERT_EQ(loopBody.size(), 1);  // One expression inside the true block
        1:  401-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  401-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  401-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  401-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  401-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  401-block  5
call   17 never executed
call   18 never executed
        1:  401-block  6
        1:  401-block  7
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0
        1:  401-block  8
    $$$$$:  401-block  9
    $$$$$:  401-block 10
    $$$$$:  401-block 11
call   22 never executed
    $$$$$:  401-block 12
    $$$$$:  401-block 13
call   23 never executed
    $$$$$:  401-block 14
    $$$$$:  401-block 15
call   24 never executed
        -:  402:
        1:  403:    const Node* trueExpr = loopBody.at(0).get();
        1:  403-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  403-block  1
call    3 returned 1
       1*:  404:    ASSERT_NE(trueExpr, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  404-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  404-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  404-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  404-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  404-block  4
call   16 never executed
call   17 never executed
        1:  404-block  5
        1:  404-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  404-block  7
    $$$$$:  404-block  8
    $$$$$:  404-block  9
call   21 never executed
    $$$$$:  404-block 10
    $$$$$:  404-block 11
call   22 never executed
    $$$$$:  404-block 12
    $$$$$:  404-block 13
call   23 never executed
       1*:  405:    EXPECT_EQ(trueExpr->getType(), NodeType::BinaryOperator);
        1:  405-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  405-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  405-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  405-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  405-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  405-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  405-block  6
call   19 never executed
call   20 never executed
        1:  405-block  7
call   21 returned 1
    $$$$$:  405-block  8
    $$$$$:  405-block  9
    $$$$$:  405-block 10
call   22 never executed
    $$$$$:  405-block 11
    $$$$$:  405-block 12
call   23 never executed
    $$$$$:  405-block 13
    $$$$$:  405-block 14
call   24 never executed
        -:  406:
       1*:  407:    const auto* trueBinOp = dynamic_cast<const BinaryOperator*>(trueExpr);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  407-block  0
    %%%%%:  407-block  1
       1*:  408:    ASSERT_NE(trueBinOp, nullptr);
        1:  408-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  408-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  408-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  408-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  408-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  408-block  5
call   16 never executed
call   17 never executed
        1:  408-block  6
        1:  408-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  408-block  8
    $$$$$:  408-block  9
    $$$$$:  408-block 10
call   21 never executed
    $$$$$:  408-block 11
    $$$$$:  408-block 12
call   22 never executed
    $$$$$:  408-block 13
    $$$$$:  408-block 14
call   23 never executed
        1:  409:    const Node* leftOperand = trueBinOp->getLeftNode().get();
        1:  409-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  409-block  1
call    3 returned 1
        1:  410:    const Node* rightOperand = trueBinOp->getRightNode().get();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  410-block  0
call    3 returned 1
       1*:  411:    ASSERT_NE(leftOperand, nullptr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  411-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  411-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  411-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  411-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  411-block  4
call   16 never executed
call   17 never executed
        1:  411-block  5
        1:  411-block  6
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  411-block  7
    $$$$$:  411-block  8
    $$$$$:  411-block  9
call   21 never executed
    $$$$$:  411-block 10
    $$$$$:  411-block 11
call   22 never executed
    $$$$$:  411-block 12
    $$$$$:  411-block 13
call   23 never executed
       1*:  412:    ASSERT_NE(rightOperand, nullptr);
        1:  412-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  412-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  412-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  412-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  412-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  412-block  5
call   16 never executed
call   17 never executed
        1:  412-block  6
        1:  412-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  412-block  8
    $$$$$:  412-block  9
    $$$$$:  412-block 10
call   21 never executed
    $$$$$:  412-block 11
    $$$$$:  412-block 12
call   22 never executed
    $$$$$:  412-block 13
    $$$$$:  412-block 14
call   23 never executed
        -:  413:
       1*:  414:    EXPECT_EQ(leftOperand->getType(), NodeType::Number);
        1:  414-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  414-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  414-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  414-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  414-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  414-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  414-block  6
call   19 never executed
call   20 never executed
        1:  414-block  7
call   21 returned 1
    $$$$$:  414-block  8
    $$$$$:  414-block  9
    $$$$$:  414-block 10
call   22 never executed
    $$$$$:  414-block 11
    $$$$$:  414-block 12
call   23 never executed
    $$$$$:  414-block 13
    $$$$$:  414-block 14
call   24 never executed
       1*:  415:    EXPECT_EQ(rightOperand->getType(), NodeType::Number);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  415-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  415-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  415-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  415-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  415-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  415-block  5
call   19 never executed
call   20 never executed
        1:  415-block  6
call   21 returned 1
    $$$$$:  415-block  7
    $$$$$:  415-block  8
    $$$$$:  415-block  9
call   22 never executed
    $$$$$:  415-block 10
    $$$$$:  415-block 11
call   23 never executed
    $$$$$:  415-block 12
    $$$$$:  415-block 13
call   24 never executed
        -:  416:
       1*:  417:    const auto* leftNum = dynamic_cast<const Number*>(leftOperand);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  417-block  0
    %%%%%:  417-block  1
       1*:  418:    const auto* rightNum = dynamic_cast<const Number*>(rightOperand);
        1:  418-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  418-block  1
    %%%%%:  418-block  2
       1*:  419:    ASSERT_NE(leftNum, nullptr);
        1:  419-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  419-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  419-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  419-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  419-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  419-block  5
call   16 never executed
call   17 never executed
        1:  419-block  6
        1:  419-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  419-block  8
    $$$$$:  419-block  9
    $$$$$:  419-block 10
call   21 never executed
    $$$$$:  419-block 11
    $$$$$:  419-block 12
call   22 never executed
    $$$$$:  419-block 13
    $$$$$:  419-block 14
call   23 never executed
       1*:  420:    ASSERT_NE(rightNum, nullptr);
        1:  420-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  420-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  420-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  420-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  420-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  420-block  5
call   16 never executed
call   17 never executed
        1:  420-block  6
        1:  420-block  7
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
        1:  420-block  8
    $$$$$:  420-block  9
    $$$$$:  420-block 10
call   21 never executed
    $$$$$:  420-block 11
    $$$$$:  420-block 12
call   22 never executed
    $$$$$:  420-block 13
    $$$$$:  420-block 14
call   23 never executed
        -:  421:
       1*:  422:    EXPECT_EQ(std::get<int>(leftNum->getToken().getValue()), 1);
        1:  422-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  422-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  422-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  422-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  422-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  422-block  5
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  422-block  6
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  422-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  422-block  8
call   27 never executed
call   28 never executed
        1:  422-block  9
call   29 returned 1
    $$$$$:  422-block 10
call   30 never executed
    $$$$$:  422-block 11
call   31 never executed
    $$$$$:  422-block 12
    $$$$$:  422-block 13
    $$$$$:  422-block 14
    $$$$$:  422-block 15
call   32 never executed
    $$$$$:  422-block 16
    $$$$$:  422-block 17
call   33 never executed
    $$$$$:  422-block 18
    $$$$$:  422-block 19
call   34 never executed
       1*:  423:    EXPECT_EQ(std::get<int>(rightNum->getToken().getValue()), 2);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  423-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  423-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  423-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  423-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  423-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  423-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  423-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  423-block  7
call   27 never executed
call   28 never executed
        1:  423-block  8
call   29 returned 1
    $$$$$:  423-block  9
call   30 never executed
    $$$$$:  423-block 10
call   31 never executed
    $$$$$:  423-block 11
    $$$$$:  423-block 12
    $$$$$:  423-block 13
    $$$$$:  423-block 14
call   32 never executed
    $$$$$:  423-block 15
    $$$$$:  423-block 16
call   33 never executed
    $$$$$:  423-block 17
    $$$$$:  423-block 18
call   34 never executed
        -:  424:
        -:  425:    // Check that the binary operator is PLUS
       1*:  426:    EXPECT_EQ(trueBinOp->getOperatorNode().getToken().getType(), TokenType::PLUS);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  426-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  426-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  426-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  426-block  3
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  426-block  4
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  426-block  5
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:  426-block  6
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:  426-block  7
call   27 never executed
call   28 never executed
        1:  426-block  8
call   29 returned 1
    $$$$$:  426-block  9
call   30 never executed
    $$$$$:  426-block 10
call   31 never executed
    $$$$$:  426-block 11
    $$$$$:  426-block 12
    $$$$$:  426-block 13
    $$$$$:  426-block 14
    $$$$$:  426-block 15
call   32 never executed
    $$$$$:  426-block 16
    $$$$$:  426-block 17
call   33 never executed
    $$$$$:  426-block 18
    $$$$$:  426-block 19
call   34 never executed
        9:  427:}
        1:  427-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  427-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  427-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  427-block  3
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1:  427-block  4
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:  427-block  5
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
        1:  427-block  6
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0 (throw)
        1:  427-block  7
call   22 returned 1
call   23 returned 1
branch 24 taken 1 (fallthrough)
branch 25 taken 0 (throw)
        1:  427-block  8
call   26 returned 1
call   27 returned 1
branch 28 taken 1 (fallthrough)
branch 29 taken 0 (throw)
        1:  427-block  9
call   30 returned 1
call   31 returned 1
branch 32 taken 1 (fallthrough)
branch 33 taken 0 (throw)
        1:  427-block 10
call   34 returned 1
branch 35 taken 1 (fallthrough)
branch 36 taken 0 (throw)
        1:  427-block 11
call   37 returned 1
branch 38 taken 1 (fallthrough)
branch 39 taken 0 (throw)
        1:  427-block 12
call   40 returned 1
call   41 returned 1
branch 42 taken 1 (fallthrough)
branch 43 taken 0 (throw)
        1:  427-block 13
call   44 returned 1
call   45 returned 1
branch 46 taken 1 (fallthrough)
branch 47 taken 0 (throw)
        1:  427-block 14
call   48 returned 1
call   49 returned 1
branch 50 taken 1 (fallthrough)
branch 51 taken 0 (throw)
        1:  427-block 15
call   52 returned 1
branch 53 taken 1 (fallthrough)
branch 54 taken 0 (throw)
        1:  427-block 16
call   55 returned 1
branch 56 taken 1 (fallthrough)
branch 57 taken 0 (throw)
        1:  427-block 17
call   58 returned 1
branch 59 taken 1 (fallthrough)
branch 60 taken 0 (throw)
        1:  427-block 18
call   61 returned 1
branch 62 taken 1 (fallthrough)
branch 63 taken 0 (throw)
        1:  427-block 19
call   64 returned 1
call   65 returned 1
branch 66 taken 1 (fallthrough)
branch 67 taken 0 (throw)
        1:  427-block 20
call   68 returned 1
call   69 returned 1
branch 70 taken 1 (fallthrough)
branch 71 taken 0 (throw)
        1:  427-block 21
call   72 returned 1
call   73 returned 1
branch 74 taken 1 (fallthrough)
branch 75 taken 0 (throw)
        1:  427-block 22
call   76 returned 1
call   77 returned 1
branch 78 taken 1 (fallthrough)
branch 79 taken 0 (throw)
        1:  427-block 23
        1:  427-block 24
call   80 returned 1
call   81 returned 1
call   82 returned 1
call   83 returned 1
call   84 returned 1
call   85 returned 1
call   86 returned 1
call   87 returned 1
call   88 returned 1
call   89 returned 1
call   90 returned 1
call   91 returned 1
call   92 returned 1
call   93 returned 1
call   94 returned 1
call   95 returned 1
call   96 returned 1
call   97 returned 1
call   98 returned 1
branch 99 taken 1 (fallthrough)
branch 100 taken 0 (throw)
        1:  427-block 25
call   101 returned 1
call   102 returned 1
branch 103 taken 1 (fallthrough)
branch 104 taken 0 (throw)
        1:  427-block 26
call   105 returned 1
call   106 returned 1
branch 107 taken 1 (fallthrough)
branch 108 taken 0 (throw)
        1:  427-block 27
call   109 returned 1
call   110 returned 1
branch 111 taken 1 (fallthrough)
branch 112 taken 0 (throw)
        1:  427-block 28
        1:  427-block 29
call   113 returned 1
call   114 returned 1
call   115 returned 1
call   116 returned 1
call   117 returned 1
call   118 returned 1
branch 119 taken 1 (fallthrough)
branch 120 taken 0 (throw)
        1:  427-block 30
call   121 returned 1
call   122 returned 1
branch 123 taken 1 (fallthrough)
branch 124 taken 0 (throw)
        1:  427-block 31
        1:  427-block 32
call   125 returned 1
call   126 returned 1
call   127 returned 1
branch 128 taken 1 (fallthrough)
branch 129 taken 0 (throw)
        1:  427-block 33
call   130 returned 1
branch 131 taken 1 (fallthrough)
branch 132 taken 0 (throw)
        1:  427-block 34
call   133 returned 1
branch 134 taken 1 (fallthrough)
branch 135 taken 0 (throw)
        1:  427-block 35
call   136 returned 1
call   137 returned 1
branch 138 taken 1 (fallthrough)
branch 139 taken 0 (throw)
        1:  427-block 36
        1:  427-block 37
call   140 returned 1
branch 141 taken 1 (fallthrough)
branch 142 taken 0 (throw)
        1:  427-block 38
call   143 returned 1
branch 144 taken 1 (fallthrough)
branch 145 taken 0 (throw)
        1:  427-block 39
        1:  427-block 40
call   146 returned 1
        2:  427-block 41
branch 147 taken 1 (fallthrough)
branch 148 taken 1
        1:  427-block 42
call   149 returned 1
call   150 returned 1
branch 151 taken 1 (fallthrough)
branch 152 taken 0 (throw)
        1:  427-block 43
call   153 returned 1
branch 154 taken 1 (fallthrough)
branch 155 taken 0
        1:  427-block 44
        1:  427-block 45
call   156 returned 1
branch 157 taken 1 (fallthrough)
branch 158 taken 0
        1:  427-block 46
        1:  427-block 47
call   159 returned 1
branch 160 taken 1 (fallthrough)
branch 161 taken 0
        1:  427-block 48
        1:  427-block 49
call   162 returned 1
branch 163 taken 1 (fallthrough)
branch 164 taken 0
        1:  427-block 50
        1:  427-block 51
call   165 returned 1
branch 166 taken 1 (fallthrough)
branch 167 taken 0
        1:  427-block 52
        1:  427-block 53
call   168 returned 1
branch 169 taken 1 (fallthrough)
branch 170 taken 0
    $$$$$:  427-block 54
call   171 never executed
    $$$$$:  427-block 55
    $$$$$:  427-block 56
    $$$$$:  427-block 57
call   172 never executed
    $$$$$:  427-block 58
    $$$$$:  427-block 59
    $$$$$:  427-block 60
call   173 never executed
    $$$$$:  427-block 61
    $$$$$:  427-block 62
    $$$$$:  427-block 63
call   174 never executed
    $$$$$:  427-block 64
    $$$$$:  427-block 65
    $$$$$:  427-block 66
call   175 never executed
    $$$$$:  427-block 67
    $$$$$:  427-block 68
call   176 never executed
    $$$$$:  427-block 69
    $$$$$:  427-block 70
call   177 never executed
    $$$$$:  427-block 71
    $$$$$:  427-block 72
    $$$$$:  427-block 73
call   178 never executed
    $$$$$:  427-block 74
    $$$$$:  427-block 75
call   179 never executed
    $$$$$:  427-block 76
    $$$$$:  427-block 77
    $$$$$:  427-block 78
call   180 never executed
    $$$$$:  427-block 79
    $$$$$:  427-block 80
call   181 never executed
    $$$$$:  427-block 81
    $$$$$:  427-block 82
    $$$$$:  427-block 83
call   182 never executed
    $$$$$:  427-block 84
    $$$$$:  427-block 85
call   183 never executed
    $$$$$:  427-block 86
    $$$$$:  427-block 87
    $$$$$:  427-block 88
call   184 never executed
    $$$$$:  427-block 89
    $$$$$:  427-block 90
call   185 never executed
    $$$$$:  427-block 91
    $$$$$:  427-block 92
call   186 never executed
    $$$$$:  427-block 93
    $$$$$:  427-block 94
    $$$$$:  427-block 95
call   187 never executed
    $$$$$:  427-block 96
    $$$$$:  427-block 97
branch 188 never executed (fallthrough)
branch 189 never executed
    $$$$$:  427-block 98
    $$$$$:  427-block 99
branch 190 never executed (fallthrough)
branch 191 never executed
    $$$$$:  427-block 100
call   192 never executed
    $$$$$:  427-block 101
call   193 never executed
    $$$$$:  427-block 102
    $$$$$:  427-block 103
    $$$$$:  427-block 104
call   194 never executed
    $$$$$:  427-block 105
    $$$$$:  427-block 106
call   195 never executed
    $$$$$:  427-block 107
    $$$$$:  427-block 108
    $$$$$:  427-block 109
call   196 never executed
    $$$$$:  427-block 110
    $$$$$:  427-block 111
branch 197 never executed (fallthrough)
branch 198 never executed
    $$$$$:  427-block 112
    $$$$$:  427-block 113
branch 199 never executed (fallthrough)
branch 200 never executed
    $$$$$:  427-block 114
call   201 never executed
    $$$$$:  427-block 115
call   202 never executed
    $$$$$:  427-block 116
    $$$$$:  427-block 117
    $$$$$:  427-block 118
call   203 never executed
    $$$$$:  427-block 119
    $$$$$:  427-block 120
    $$$$$:  427-block 121
branch 204 never executed (fallthrough)
branch 205 never executed
    $$$$$:  427-block 122
    $$$$$:  427-block 123
branch 206 never executed (fallthrough)
branch 207 never executed
    $$$$$:  427-block 124
call   208 never executed
    $$$$$:  427-block 125
call   209 never executed
    $$$$$:  427-block 126
    $$$$$:  427-block 127
branch 210 never executed (fallthrough)
branch 211 never executed
    $$$$$:  427-block 128
call   212 never executed
    $$$$$:  427-block 129
    $$$$$:  427-block 130
    $$$$$:  427-block 131
branch 213 never executed (fallthrough)
branch 214 never executed
    $$$$$:  427-block 132
    $$$$$:  427-block 133
branch 215 never executed (fallthrough)
branch 216 never executed
    $$$$$:  427-block 134
call   217 never executed
    $$$$$:  427-block 135
    $$$$$:  427-block 136
    $$$$$:  427-block 137
branch 218 never executed (fallthrough)
branch 219 never executed
    $$$$$:  427-block 138
    $$$$$:  427-block 139
branch 220 never executed (fallthrough)
branch 221 never executed
    $$$$$:  427-block 140
call   222 never executed
    $$$$$:  427-block 141
call   223 never executed
    $$$$$:  427-block 142
call   224 never executed
    $$$$$:  427-block 143
call   225 never executed
    $$$$$:  427-block 144
call   226 never executed
    $$$$$:  427-block 145
call   227 never executed
    $$$$$:  427-block 146
call   228 never executed
------------------
        -:  428:
        -:  429:
        -:  430:
