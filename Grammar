func def    ::= KEYWORD<func> IDENTIFIER OPENPAREN (expr (SEPERATOR expr)*)? CLOSEPAREN
                OPENBRACE (stmt)+ CLOSEBRACE

stmt        ::= return stmt
            ::= while stmt
            ::= for stmt
            ::= if stmt
            ::= expr

return stmt ::= KEYWORD<return> expr?

while stmt  ::= KEYWORD<while> OPENPAREN expr CLOSEPAREN OPENBRACE (expr)+ CLOSEBRACE

for stmt    ::= KEYWORD<for> OPENPAREN var expr SEPERATOR comp expr SEPERATOR var expr CLOSEPAREN
                OPENBRACE (stmt)+ CLOSEBRACE

if stmt     ::= KEYWORD<if> OPENPAREN expr CLOSEPAREN OPENBRACE (stmt)+ CLOSEBRACE

expr        ::= lib expr | (var expr)* (comp expr)*

lib expr    ::= KEYWORD<out> OPENPAREN (expr(SEPERATOR expr)*)? CLOSEPAREN

var expr    ::= KEYWORD<var> IDENTIFIER ((INCREMENT | DECREMENT) | EQUALS expression)

comp expr   ::= comparison ((KEYWORD<and>|KEYWORD<or>) comparison)*

comparison  ::= KEYWORD<not> comparison
            ::= arith expr ((TE|LT|GT|LTE|GTE) arith expr)*

arith expr  ::= term | term (PLUS | MINUS) term

term        ::= factor | factor (MUL | DIV | MOD) factor

factor      ::= call | (PLUS | MINUS) call

call        ::= atom (OPENPAREN (expr (SEPERATOR expr)* )? CLOSEPAREN)?

atom        ::= INT | FLOAT | STRING | BOOL | IDENTIFIER
                LPAREN expression RPAREN

